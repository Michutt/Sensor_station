
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08009690  08009690  00019690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010bc  200001e0  08009bb8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000129c  08009bb8  0002129c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dc9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000318a  00000000  00000000  00037fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003b168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028787  00000000  00000000  0003d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f81  00000000  00000000  00065e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb5cb  00000000  00000000  00076dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001723a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  00172420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009678 	.word	0x08009678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009678 	.word	0x08009678

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <pin_Output>:

#define PORT GPIOA
#define PIN GPIO_PIN_0

void pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fdd4 	bl	8001b68 <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <pin_Input>:

void pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <pin_Input+0x3c>)
 8000fea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fdb6 	bl	8001b68 <HAL_GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	10210000 	.word	0x10210000

08001008 <delay>:

void delay(uint32_t delay)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	delay = delay * 0.8;
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fa77 	bl	8000504 <__aeabi_ui2d>
 8001016:	a30f      	add	r3, pc, #60	; (adr r3, 8001054 <delay+0x4c>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4603      	mov	r3, r0
 8001022:	460c      	mov	r4, r1
 8001024:	4618      	mov	r0, r3
 8001026:	4621      	mov	r1, r4
 8001028:	f7ff fdbe 	bl	8000ba8 <__aeabi_d2uiz>
 800102c:	4603      	mov	r3, r0
 800102e:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <delay+0x48>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8001038:	bf00      	nop
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <delay+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d8f9      	bhi.n	800103a <delay+0x32>
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	200011c8 	.word	0x200011c8
 8001054:	9999999a 	.word	0x9999999a
 8001058:	3fe99999 	.word	0x3fe99999

0800105c <DHT11_Init>:

void DHT11_Init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	pin_Output(PORT, PIN);
 8001060:	2101      	movs	r1, #1
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f7ff ff8f 	bl	8000f88 <pin_Output>
	HAL_GPIO_WritePin(PORT, PIN, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f000 ff39 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_Delay(18); // 18ms
 8001076:	2012      	movs	r0, #18
 8001078:	f000 fc72 	bl	8001960 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, PIN, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	2101      	movs	r1, #1
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 ff30 	bl	8001ee8 <HAL_GPIO_WritePin>
 	delay(3000); // 30us
 8001088:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800108c:	f7ff ffbc 	bl	8001008 <delay>
 	pin_Input(PORT, PIN);
 8001090:	2101      	movs	r1, #1
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f7ff ff97 	bl	8000fc8 <pin_Input>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <DHT11_Check_Response>:

uint8_t DHT11_Check_Response()
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	71fb      	strb	r3, [r7, #7]
	delay(4000); // 40us
 80010a8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80010ac:	f7ff ffac 	bl	8001008 <delay>
	if (!HAL_GPIO_ReadPin(PORT, PIN))
 80010b0:	2101      	movs	r1, #1
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f000 feff 	bl	8001eb8 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <DHT11_Check_Response+0x26>
		state = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
	delay(8000); // 80us
 80010c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80010c8:	f7ff ff9e 	bl	8001008 <delay>
	if (!HAL_GPIO_ReadPin(PORT, PIN) && state)
 80010cc:	2101      	movs	r1, #1
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f000 fef1 	bl	8001eb8 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <DHT11_Check_Response+0x48>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <DHT11_Check_Response+0x48>
		state = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(PORT, PIN));
 80010e6:	bf00      	nop
 80010e8:	2101      	movs	r1, #1
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f000 fee3 	bl	8001eb8 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f7      	bne.n	80010e8 <DHT11_Check_Response+0x4a>

	return state;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte()
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
	uint8_t i, data;
	for (i=0; i<8; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	e03b      	b.n	8001186 <DHT11_Read_Byte+0x84>
	{
		while (!HAL_GPIO_ReadPin(PORT, PIN));
 800110e:	bf00      	nop
 8001110:	2101      	movs	r1, #1
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f000 fecf 	bl	8001eb8 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f7      	beq.n	8001110 <DHT11_Read_Byte+0xe>
		delay(4000); // 40us
 8001120:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001124:	f7ff ff70 	bl	8001008 <delay>
		if (HAL_GPIO_ReadPin(PORT, PIN))
 8001128:	2101      	movs	r1, #1
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f000 fec3 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00c      	beq.n	8001152 <DHT11_Read_Byte+0x50>
			data |= (1 << (7-i));
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2201      	movs	r2, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	b25a      	sxtb	r2, r3
 8001146:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114a:	4313      	orrs	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	e00d      	b.n	800116e <DHT11_Read_Byte+0x6c>
		else
			data &= ~(1 << (7-i));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f1c3 0307 	rsb	r3, r3, #7
 8001158:	2201      	movs	r2, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	b25b      	sxtb	r3, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001168:	4013      	ands	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(PORT, PIN));
 800116e:	bf00      	nop
 8001170:	2101      	movs	r1, #1
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f000 fe9f 	bl	8001eb8 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f7      	bne.n	8001170 <DHT11_Read_Byte+0x6e>
	for (i=0; i<8; i++)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	3301      	adds	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d9c0      	bls.n	800110e <DHT11_Read_Byte+0xc>
	}
	return data;
 800118c:	79bb      	ldrb	r3, [r7, #6]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <DHT11_Receive_Data>:

void DHT11_Receive_Data(uint8_t *humidity, uint8_t *temperature)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	DHT11_Init();
 80011a0:	f7ff ff5c 	bl	800105c <DHT11_Init>
	if (DHT11_Check_Response())
 80011a4:	f7ff ff7b 	bl	800109e <DHT11_Check_Response>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d015      	beq.n	80011da <DHT11_Receive_Data+0x44>
	{
		uint8_t humM = DHT11_Read_Byte();
 80011ae:	f7ff ffa8 	bl	8001102 <DHT11_Read_Byte>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
		uint8_t humL = DHT11_Read_Byte();
 80011b6:	f7ff ffa4 	bl	8001102 <DHT11_Read_Byte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73bb      	strb	r3, [r7, #14]
		uint8_t tempM = DHT11_Read_Byte();
 80011be:	f7ff ffa0 	bl	8001102 <DHT11_Read_Byte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	737b      	strb	r3, [r7, #13]
		uint8_t tempL = DHT11_Read_Byte();
 80011c6:	f7ff ff9c 	bl	8001102 <DHT11_Read_Byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	733b      	strb	r3, [r7, #12]

		*humidity = humM;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	701a      	strb	r2, [r3, #0]
		*temperature = tempM;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	7b7a      	ldrb	r2, [r7, #13]
 80011d8:	701a      	strb	r2, [r3, #0]
	}
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <vApplicationGetIdleTaskMemory+0x2c>)
 80011f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <vApplicationGetIdleTaskMemory+0x30>)
 80011fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000200 	.word	0x20000200
 8001214:	20000254 	.word	0x20000254

08001218 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_FREERTOS_Init+0x30>)
 8001220:	1d3c      	adds	r4, r7, #4
 8001222:	461d      	mov	r5, r3
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fb96 	bl	8004966 <osThreadCreate>
 800123a:	4602      	mov	r2, r0
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <MX_FREERTOS_Init+0x34>)
 800123e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bdb0      	pop	{r4, r5, r7, pc}
 8001248:	0800969c 	.word	0x0800969c
 800124c:	20001178 	.word	0x20001178

08001250 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	for(;;)
	{
		DHT11_Receive_Data(&humidity, &temperature);
 8001258:	490b      	ldr	r1, [pc, #44]	; (8001288 <StartDefaultTask+0x38>)
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <StartDefaultTask+0x3c>)
 800125c:	f7ff ff9b 	bl	8001196 <DHT11_Receive_Data>
		HAL_Delay(2000);
 8001260:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001264:	f000 fb7c 	bl	8001960 <HAL_Delay>
		static char data[20];
		sprintf((char *)data, "-%i-%i\r\n", humidity, temperature);
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <StartDefaultTask+0x3c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <StartDefaultTask+0x38>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4907      	ldr	r1, [pc, #28]	; (8001290 <StartDefaultTask+0x40>)
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <StartDefaultTask+0x44>)
 8001276:	f005 fb15 	bl	80068a4 <siprintf>
		HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	2214      	movs	r2, #20
 800127e:	4905      	ldr	r1, [pc, #20]	; (8001294 <StartDefaultTask+0x44>)
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <StartDefaultTask+0x48>)
 8001282:	f002 fed1 	bl	8004028 <HAL_UART_Transmit>
	{
 8001286:	e7e7      	b.n	8001258 <StartDefaultTask+0x8>
 8001288:	200001fc 	.word	0x200001fc
 800128c:	200001fd 	.word	0x200001fd
 8001290:	080096b8 	.word	0x080096b8
 8001294:	20000454 	.word	0x20000454
 8001298:	20001214 	.word	0x20001214

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <MX_GPIO_Init+0xd0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_GPIO_Init+0xd0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_GPIO_Init+0xd0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <MX_GPIO_Init+0xd0>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_GPIO_Init+0xd0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_GPIO_Init+0xd0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_GPIO_Init+0xd0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_GPIO_Init+0xd0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_GPIO_Init+0xd0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <MX_GPIO_Init+0xd0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_GPIO_Init+0xd0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2101      	movs	r1, #1
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 fde5 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2120      	movs	r1, #32
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 fddf 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_GPIO_Init+0xd4>)
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_GPIO_Init+0xd8>)
 8001340:	f000 fc12 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001344:	2321      	movs	r3, #33	; 0x21
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 fc03 	bl	8001b68 <HAL_GPIO_Init>

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	10210000 	.word	0x10210000
 8001374:	48000800 	.word	0x48000800

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 fab0 	bl	80018e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f810 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f7ff ff8a 	bl	800129c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001388:	f000 fa0e 	bl	80017a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800138c:	f000 f9a0 	bl	80016d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <main+0x28>)
 8001392:	f002 f949 	bl	8003628 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001396:	f7ff ff3f 	bl	8001218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800139a:	f003 fadd 	bl	8004958 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800139e:	e7fe      	b.n	800139e <main+0x26>
 80013a0:	200011c8 	.word	0x200011c8

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b8      	sub	sp, #224	; 0xe0
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ae:	2244      	movs	r2, #68	; 0x44
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fc29 	bl	8005c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2288      	movs	r2, #136	; 0x88
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 fc1b 	bl	8005c0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e2:	2310      	movs	r3, #16
 80013e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013fa:	230a      	movs	r3, #10
 80013fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fde2 	bl	8001fe0 <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001422:	f000 f847 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2303      	movs	r3, #3
 800142e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001444:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001448:	2104      	movs	r1, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f9ae 	bl	80027ac <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001456:	f000 f82d 	bl	80014b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145a:	2302      	movs	r3, #2
 800145c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800145e:	2300      	movs	r3, #0
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fbd7 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001470:	f000 f820 	bl	80014b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001474:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001478:	f000 fd5c 	bl	8001f34 <HAL_PWREx_ControlVoltageScaling>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001482:	f000 f817 	bl	80014b4 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	37e0      	adds	r7, #224	; 0xe0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014a2:	f000 fa3d 	bl	8001920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40012c00 	.word	0x40012c00

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ba:	e7fe      	b.n	80014ba <Error_Handler+0x6>

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_MspInit+0x4c>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6613      	str	r3, [r2, #96]	; 0x60
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_MspInit+0x4c>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_MspInit+0x4c>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	210f      	movs	r1, #15
 80014f6:	f06f 0001 	mvn.w	r0, #1
 80014fa:	f000 fb0b 	bl	8001b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	2019      	movs	r0, #25
 8001522:	f000 faf7 	bl	8001b14 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001526:	2019      	movs	r0, #25
 8001528:	f000 fb10 	bl	8001b4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_InitTick+0x9c>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_InitTick+0x9c>)
 8001532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001536:	6613      	str	r3, [r2, #96]	; 0x60
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_InitTick+0x9c>)
 800153a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fad0 	bl	8002af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001554:	f001 fab8 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8001558:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_InitTick+0xa0>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	3b01      	subs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0xa4>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_InitTick+0xa8>)
 800156c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_InitTick+0xa4>)
 8001570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001574:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_InitTick+0xa4>)
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_InitTick+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_InitTick+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_InitTick+0xa4>)
 800158a:	f001 fff5 	bl	8003578 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <HAL_InitTick+0xa4>)
 8001596:	f002 f8af 	bl	80036f8 <HAL_TIM_Base_Start_IT>
 800159a:	4603      	mov	r3, r0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	2000117c 	.word	0x2000117c
 80015b4:	40012c00 	.word	0x40012c00

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015ea:	f002 f8f5 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000117c 	.word	0x2000117c

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f004 faba 	bl	8005ba0 <__errno>
 800162c:	4602      	mov	r2, r0
 800162e:	230c      	movs	r3, #12
 8001630:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20018000 	.word	0x20018000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000468 	.word	0x20000468
 8001660:	200012a0 	.word	0x200012a0

08001664 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <SystemInit+0x64>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <SystemInit+0x64>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <SystemInit+0x68>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a13      	ldr	r2, [pc, #76]	; (80016cc <SystemInit+0x68>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <SystemInit+0x68>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <SystemInit+0x68>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <SystemInit+0x68>)
 8001690:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001694:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001698:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <SystemInit+0x68>)
 800169c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <SystemInit+0x68>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <SystemInit+0x68>)
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <SystemInit+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SystemInit+0x64>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	40021000 	.word	0x40021000

080016d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_TIM2_Init+0x98>)
 80016f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_TIM2_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM2_Init+0x98>)
 8001704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_TIM2_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_TIM2_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_TIM2_Init+0x98>)
 8001718:	f001 ff2e 	bl	8003578 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001722:	f7ff fec7 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM2_Init+0x98>)
 8001734:	f002 f96f 	bl	8003a16 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800173e:	f7ff feb9 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM2_Init+0x98>)
 8001750:	f002 fb76 	bl	8003e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800175a:	f7ff feab 	bl	80014b4 <Error_Handler>
  }

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200011c8 	.word	0x200011c8

0800176c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d10b      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x38>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_TIM_Base_MspInit+0x38>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_TIM_Base_MspInit+0x38>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <MX_USART2_UART_Init+0x5c>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART2_UART_Init+0x58>)
 80017ec:	f002 fbce 	bl	8003f8c <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017f6:	f7ff fe5d 	bl	80014b4 <Error_Handler>
  }

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001214 	.word	0x20001214
 8001804:	40004400 	.word	0x40004400

08001808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x7c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d128      	bne.n	800187c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x80>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f000 f976 	bl	8001b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	40021000 	.word	0x40021000

0800188c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001890:	f7ff fee8 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001894:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001896:	e003      	b.n	80018a0 <LoopCopyDataInit>

08001898 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800189a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800189c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800189e:	3104      	adds	r1, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018a8:	d3f6      	bcc.n	8001898 <CopyDataInit>
	ldr	r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018ac:	e002      	b.n	80018b4 <LoopFillZerobss>

080018ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018b0:	f842 3b04 	str.w	r3, [r2], #4

080018b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LoopForever+0x16>)
	cmp	r2, r3
 80018b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018b8:	d3f9      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f004 f977 	bl	8005bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018be:	f7ff fd5b 	bl	8001378 <main>

080018c2 <LoopForever>:

LoopForever:
    b LoopForever
 80018c2:	e7fe      	b.n	80018c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80018c8:	080099d8 	.word	0x080099d8
	ldr	r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018d0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80018d4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80018d8:	2000129c 	.word	0x2000129c

080018dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC1_2_IRQHandler>
	...

080018e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_Init+0x3c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_Init+0x3c>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f000 f901 	bl	8001afe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fe05 	bl	800150c <HAL_InitTick>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	e001      	b.n	8001912 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800190e:	f7ff fdd5 	bl	80014bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001912:	79fb      	ldrb	r3, [r7, #7]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	20001294 	.word	0x20001294

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20001294 	.word	0x20001294

08001960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001968:	f7ff ffee 	bl	8001948 <HAL_GetTick>
 800196c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d005      	beq.n	8001986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_Delay+0x40>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001986:	bf00      	nop
 8001988:	f7ff ffde 	bl	8001948 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d8f7      	bhi.n	8001988 <HAL_Delay+0x28>
  {
  }
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff4c 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b26:	f7ff ff61 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7ff ffb1 	bl	8001a98 <NVIC_EncodePriority>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff80 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff54 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e17f      	b.n	8001e78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8171 	beq.w	8001e72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d00b      	beq.n	8001bb0 <HAL_GPIO_Init+0x48>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba4:	2b11      	cmp	r3, #17
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b12      	cmp	r3, #18
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 0201 	and.w	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d118      	bne.n	8001c50 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x128>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	6939      	ldr	r1, [r7, #16]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80ac 	beq.w	8001e72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_GPIO_Init+0x32c>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_GPIO_Init+0x32c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_GPIO_Init+0x32c>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d32:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d5c:	d025      	beq.n	8001daa <HAL_GPIO_Init+0x242>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4e      	ldr	r2, [pc, #312]	; (8001e9c <HAL_GPIO_Init+0x334>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <HAL_GPIO_Init+0x23e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_GPIO_Init+0x338>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x23a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x33c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x236>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_GPIO_Init+0x340>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x232>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <HAL_GPIO_Init+0x344>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_GPIO_Init+0x348>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x22a>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e00c      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00a      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d96:	2305      	movs	r3, #5
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x244>
 8001daa:	2300      	movs	r3, #0
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dbc:	4936      	ldr	r1, [pc, #216]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f47f ae78 	bne.w	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	48000c00 	.word	0x48000c00
 8001ea8:	48001000 	.word	0x48001000
 8001eac:	48001400 	.word	0x48001400
 8001eb0:	48001800 	.word	0x48001800
 8001eb4:	40010400 	.word	0x40010400

08001eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000

08001f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f42:	d130      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f50:	d038      	beq.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2232      	movs	r2, #50	; 0x32
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f78:	e002      	b.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8c:	d102      	bne.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f2      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d110      	bne.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e00f      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d007      	beq.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	431bde83 	.word	0x431bde83

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e3d4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80e4 	beq.w	80021dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_RCC_OscConfig+0x4a>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b0c      	cmp	r3, #12
 800201e:	f040 808b 	bne.w	8002138 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	f040 8087 	bne.w	8002138 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202a:	4b93      	ldr	r3, [pc, #588]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e3ac      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_RCC_OscConfig+0x7c>
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205a:	e005      	b.n	8002068 <HAL_RCC_OscConfig+0x88>
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002068:	4293      	cmp	r3, r2
 800206a:	d223      	bcs.n	80020b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fd71 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e38d      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4977      	ldr	r1, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	4972      	ldr	r1, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e025      	b.n	8002100 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	496a      	ldr	r1, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d2:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fd31 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e34d      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002100:	f000 fc36 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002104:	4601      	mov	r1, r0
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	4a5a      	ldr	r2, [pc, #360]	; (800227c <HAL_RCC_OscConfig+0x29c>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa21 f303 	lsr.w	r3, r1, r3
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x2a0>)
 800211e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x2a4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f9f1 	bl	800150c <HAL_InitTick>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d052      	beq.n	80021da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	e331      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d032      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214c:	f7ff fbfc 	bl	8001948 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002154:	f7ff fbf8 	bl	8001948 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e31a      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	493b      	ldr	r1, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	4936      	ldr	r1, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e01a      	b.n	80021dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fbc9 	bl	8001948 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ba:	f7ff fbc5 	bl	8001948 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e2e7      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x1da>
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d074      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x21a>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d10e      	bne.n	8002212 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d064      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d160      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e2c4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x24a>
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e01d      	b.n	8002266 <HAL_RCC_OscConfig+0x286>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x26e>
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800223a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x286>
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fb6b 	bl	8001948 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002274:	e011      	b.n	800229a <HAL_RCC_OscConfig+0x2ba>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	080096cc 	.word	0x080096cc
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fb5e 	bl	8001948 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e280      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	4baf      	ldr	r3, [pc, #700]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x2a8>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff fb4e 	bl	8001948 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fb4a 	bl	8001948 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e26c      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c2:	4ba5      	ldr	r3, [pc, #660]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2d0>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d060      	beq.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x310>
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d119      	bne.n	800231e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d116      	bne.n	800231e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f0:	4b99      	ldr	r3, [pc, #612]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_OscConfig+0x328>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e249      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b93      	ldr	r3, [pc, #588]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	4990      	ldr	r1, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231c:	e040      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff fb09 	bl	8001948 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fb05 	bl	8001948 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e227      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	497c      	ldr	r1, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a79      	ldr	r2, [pc, #484]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff fae5 	bl	8001948 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff fae1 	bl	8001948 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e203      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03c      	beq.n	8002426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ba:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fac0 	bl	8001948 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fabc 	bl	8001948 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1de      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCC_OscConfig+0x3ec>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff faa3 	bl	8001948 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fa9f 	bl	8001948 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1c1      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ef      	bne.n	8002406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a6 	beq.w	8002580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a43      	ldr	r2, [pc, #268]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7ff fa66 	bl	8001948 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7ff fa62 	bl	8001948 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e184      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4d8>
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b6:	e024      	b.n	8002502 <HAL_RCC_OscConfig+0x522>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d110      	bne.n	80024e2 <HAL_RCC_OscConfig+0x502>
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e0:	e00f      	b.n	8002502 <HAL_RCC_OscConfig+0x522>
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff fa1d 	bl	8001948 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fa19 	bl	8001948 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e139      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ed      	beq.n	8002512 <HAL_RCC_OscConfig+0x532>
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff fa06 	bl	8001948 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff fa02 	bl	8001948 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d906      	bls.n	8002560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e122      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002560:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e8      	bne.n	8002540 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a8a      	ldr	r2, [pc, #552]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8108 	beq.w	800279a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	2b02      	cmp	r3, #2
 8002590:	f040 80d0 	bne.w	8002734 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002594:	4b83      	ldr	r3, [pc, #524]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d130      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d127      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11f      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d4:	2a07      	cmp	r2, #7
 80025d6:	bf14      	ite	ne
 80025d8:	2201      	movne	r2, #1
 80025da:	2200      	moveq	r2, #0
 80025dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	4293      	cmp	r3, r2
 80025e0:	d113      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d109      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d06e      	beq.n	80026e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d069      	beq.n	80026e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002610:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b7      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5c      	ldr	r2, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7ff f986 	bl	8001948 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f982 	bl	8001948 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0a4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x7c8>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800266e:	3a01      	subs	r2, #1
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	4311      	orrs	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002678:	0212      	lsls	r2, r2, #8
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002680:	0852      	lsrs	r2, r2, #1
 8002682:	3a01      	subs	r2, #1
 8002684:	0552      	lsls	r2, r2, #21
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800268c:	0852      	lsrs	r2, r2, #1
 800268e:	3a01      	subs	r2, #1
 8002690:	0652      	lsls	r2, r2, #25
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002698:	0912      	lsrs	r2, r2, #4
 800269a:	0452      	lsls	r2, r2, #17
 800269c:	430a      	orrs	r2, r1
 800269e:	4941      	ldr	r1, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026bc:	f7ff f944 	bl	8001948 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f940 	bl	8001948 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e062      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e2:	e05a      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e059      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d152      	bne.n	800279a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800270c:	f7ff f91c 	bl	8001948 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7ff f918 	bl	8001948 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e03a      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x734>
 8002732:	e032      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d02d      	beq.n	8002796 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002744:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002758:	f023 0303 	bic.w	r3, r3, #3
 800275c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002764:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff f8eb 	bl	8001948 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7ff f8e7 	bl	8001948 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e009      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x796>
 8002794:	e001      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f99d808c 	.word	0xf99d808c

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4961      	ldr	r1, [pc, #388]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b0      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d04c      	beq.n	8002896 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d121      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e09e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d115      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e092      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e086      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e07e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 0203 	bic.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	493f      	ldr	r1, [pc, #252]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7ff f86f 	bl	8001948 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	e00a      	b.n	8002884 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7ff f86b 	bl	8001948 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e066      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 020c 	and.w	r2, r3, #12
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d1eb      	bne.n	800286e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a2:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4924      	ldr	r1, [pc, #144]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e036      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4910      	ldr	r1, [pc, #64]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002922:	f000 f825 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002926:	4601      	mov	r1, r0
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fde0 	bl	800150c <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002950:	7afb      	ldrb	r3, [r7, #11]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	080096cc 	.word	0x080096cc
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d121      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11e      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029cc:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80029f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d133      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xaa>
 8002a12:	e005      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a16:	617b      	str	r3, [r7, #20]
      break;
 8002a18:	e005      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1c:	617b      	str	r3, [r7, #20]
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	617b      	str	r3, [r7, #20]
      break;
 8002a24:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	3301      	adds	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	fb02 f203 	mul.w	r2, r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a66:	69bb      	ldr	r3, [r7, #24]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3724      	adds	r7, #36	; 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	080096e4 	.word	0x080096e4
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080096dc 	.word	0x080096dc

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002acc:	f7ff ffda 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	080096dc 	.word	0x080096dc

08002af4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	220f      	movs	r2, #15
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_RCC_GetClockConfig+0x5c>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCC_GetClockConfig+0x60>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0207 	and.w	r2, r3, #7
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40022000 	.word	0x40022000

08002b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b70:	f7ff f9d2 	bl	8001f18 <HAL_PWREx_GetVoltageRange>
 8002b74:	6178      	str	r0, [r7, #20]
 8002b76:	e014      	b.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff f9c2 	bl	8001f18 <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d10b      	bne.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d919      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb4:	d902      	bls.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e013      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e010      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d902      	bls.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bc8:	2303      	movs	r3, #3
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e00a      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d102      	bne.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e004      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d101      	bne.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40022000 	.word	0x40022000

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d03f      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d01c      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c42:	d802      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c48:	e01f      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c54:	d01c      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c56:	e018      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c58:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a84      	ldr	r2, [pc, #528]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c64:	e015      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fab9 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c76:	e00c      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3320      	adds	r3, #32
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fba0 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c98:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca6:	4972      	ldr	r1, [pc, #456]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03f      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d01c      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cce:	d802      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002cd4:	e01f      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cda:	d003      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002cdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce0:	d01c      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce4:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a61      	ldr	r2, [pc, #388]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf0:	e015      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fa73 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d02:	e00c      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3320      	adds	r3, #32
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb5a 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	74fb      	strb	r3, [r7, #19]
      break;
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d32:	494f      	ldr	r1, [pc, #316]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a0 	beq.w	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6593      	str	r3, [r2, #88]	; 0x58
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fdda 	bl	8001948 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d96:	e009      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe fdd6 	bl	8001948 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	74fb      	strb	r3, [r7, #19]
        break;
 8002daa:	e005      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dac:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d15c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01f      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d019      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fd95 	bl	8001948 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e20:	e00b      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fd91 	bl	8001948 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d902      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	74fb      	strb	r3, [r7, #19]
            break;
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ec      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e66:	e009      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	74bb      	strb	r3, [r7, #18]
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7c:	7c7b      	ldrb	r3, [r7, #17]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	4a9d      	ldr	r2, [pc, #628]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e9a:	4b98      	ldr	r3, [pc, #608]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 0203 	bic.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4994      	ldr	r1, [pc, #592]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ebc:	4b8f      	ldr	r3, [pc, #572]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f023 020c 	bic.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	498c      	ldr	r1, [pc, #560]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ede:	4b87      	ldr	r3, [pc, #540]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4983      	ldr	r1, [pc, #524]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f00:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	497b      	ldr	r1, [pc, #492]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	4972      	ldr	r1, [pc, #456]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f44:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	496a      	ldr	r1, [pc, #424]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	4961      	ldr	r1, [pc, #388]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f88:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	4959      	ldr	r1, [pc, #356]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002faa:	4b54      	ldr	r3, [pc, #336]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	4950      	ldr	r1, [pc, #320]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fcc:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	4948      	ldr	r1, [pc, #288]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	493f      	ldr	r1, [pc, #252]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d028      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003010:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301e:	4937      	ldr	r1, [pc, #220]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800302e:	d106      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a31      	ldr	r2, [pc, #196]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800303a:	60d3      	str	r3, [r2, #12]
 800303c:	e011      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003046:	d10c      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f8c8 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d028      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	491f      	ldr	r1, [pc, #124]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d106      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003098:	60d3      	str	r3, [r2, #12]
 800309a:	e011      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f899 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02b      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ea:	d109      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a02      	ldr	r2, [pc, #8]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
 80030f8:	e014      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003108:	d10c      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f867 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02f      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313e:	4928      	ldr	r1, [pc, #160]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800314e:	d10d      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f844 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d014      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	74bb      	strb	r3, [r7, #18]
 800316a:	e011      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d10c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3320      	adds	r3, #32
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f921 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000

080031e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031f2:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d018      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031fe:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0203 	and.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d10d      	bne.n	800322a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
       ||
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003216:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
       ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d044      	beq.n	80032b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e041      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d00c      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x6e>
 8003238:	2b03      	cmp	r3, #3
 800323a:	d013      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x80>
 800323c:	2b01      	cmp	r3, #1
 800323e:	d120      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003240:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11d      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003250:	e01a      	b.n	8003288 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e013      	b.n	800328c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003264:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10f      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003280:	e006      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      break;
 8003286:	e004      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003288:	bf00      	nop
 800328a:	e002      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003290:	bf00      	nop
    }

    if(status == HAL_OK)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	430b      	orrs	r3, r1
 80032ae:	4944      	ldr	r1, [pc, #272]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d17d      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c6:	f7fe fb3f 	bl	8001948 <HAL_GetTick>
 80032ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032cc:	e009      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ce:	f7fe fb3b 	bl	8001948 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d902      	bls.n	80032e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	73fb      	strb	r3, [r7, #15]
        break;
 80032e0:	e005      	b.n	80032ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ef      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d160      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d111      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	0211      	lsls	r1, r2, #8
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68d2      	ldr	r2, [r2, #12]
 8003310:	0912      	lsrs	r2, r2, #4
 8003312:	0452      	lsls	r2, r2, #17
 8003314:	430a      	orrs	r2, r1
 8003316:	492a      	ldr	r1, [pc, #168]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
 800331c:	e027      	b.n	800336e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d112      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800332c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6892      	ldr	r2, [r2, #8]
 8003334:	0211      	lsls	r1, r2, #8
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6912      	ldr	r2, [r2, #16]
 800333a:	0852      	lsrs	r2, r2, #1
 800333c:	3a01      	subs	r2, #1
 800333e:	0552      	lsls	r2, r2, #21
 8003340:	430a      	orrs	r2, r1
 8003342:	491f      	ldr	r1, [pc, #124]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	610b      	str	r3, [r1, #16]
 8003348:	e011      	b.n	800336e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	0211      	lsls	r1, r2, #8
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6952      	ldr	r2, [r2, #20]
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	3a01      	subs	r2, #1
 8003364:	0652      	lsls	r2, r2, #25
 8003366:	430a      	orrs	r2, r1
 8003368:	4915      	ldr	r1, [pc, #84]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003378:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fae5 	bl	8001948 <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003380:	e009      	b.n	8003396 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003382:	f7fe fae1 	bl	8001948 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	73fb      	strb	r3, [r7, #15]
          break;
 8003394:	e005      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ef      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d2:	4b68      	ldr	r3, [pc, #416]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
       ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
       ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d044      	beq.n	8003494 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e041      	b.n	8003494 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d00c      	beq.n	8003432 <RCCEx_PLLSAI2_Config+0x6e>
 8003418:	2b03      	cmp	r3, #3
 800341a:	d013      	beq.n	8003444 <RCCEx_PLLSAI2_Config+0x80>
 800341c:	2b01      	cmp	r3, #1
 800341e:	d120      	bne.n	8003462 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003420:	4b54      	ldr	r3, [pc, #336]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11d      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e01a      	b.n	8003468 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003432:	4b50      	ldr	r3, [pc, #320]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d116      	bne.n	800346c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e013      	b.n	800346c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003460:	e006      	b.n	8003470 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      break;
 8003466:	e004      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003468:	bf00      	nop
 800346a:	e002      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003470:	bf00      	nop
    }

    if(status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	3b01      	subs	r3, #1
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	430b      	orrs	r3, r1
 800348e:	4939      	ldr	r1, [pc, #228]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d167      	bne.n	800356a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a35      	ldr	r2, [pc, #212]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a6:	f7fe fa4f 	bl	8001948 <HAL_GetTick>
 80034aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ac:	e009      	b.n	80034c2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034ae:	f7fe fa4b 	bl	8001948 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d902      	bls.n	80034c2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	73fb      	strb	r3, [r7, #15]
        break;
 80034c0:	e005      	b.n	80034ce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ef      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d14a      	bne.n	800356a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d111      	bne.n	80034fe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	0211      	lsls	r1, r2, #8
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	0912      	lsrs	r2, r2, #4
 80034f2:	0452      	lsls	r2, r2, #17
 80034f4:	430a      	orrs	r2, r1
 80034f6:	491f      	ldr	r1, [pc, #124]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	614b      	str	r3, [r1, #20]
 80034fc:	e011      	b.n	8003522 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6892      	ldr	r2, [r2, #8]
 800350e:	0211      	lsls	r1, r2, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6912      	ldr	r2, [r2, #16]
 8003514:	0852      	lsrs	r2, r2, #1
 8003516:	3a01      	subs	r2, #1
 8003518:	0652      	lsls	r2, r2, #25
 800351a:	430a      	orrs	r2, r1
 800351c:	4915      	ldr	r1, [pc, #84]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 800351e:	4313      	orrs	r3, r2
 8003520:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fa0b 	bl	8001948 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003534:	e009      	b.n	800354a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003536:	f7fe fa07 	bl	8001948 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d902      	bls.n	800354a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	73fb      	strb	r3, [r7, #15]
          break;
 8003548:	e005      	b.n	8003556 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ef      	beq.n	8003536 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e049      	b.n	800361e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f8e4 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb0e 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e047      	b.n	80036d0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_TIM_Base_Start+0xb4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01d      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d018      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <HAL_TIM_Base_Start+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <HAL_TIM_Base_Start+0xbc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_TIM_Base_Start+0xc0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_TIM_Base_Start+0xc4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIM_Base_Start+0x66>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_TIM_Base_Start+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d115      	bne.n	80036ba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_TIM_Base_Start+0xcc>)
 8003696:	4013      	ands	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b06      	cmp	r3, #6
 800369e:	d015      	beq.n	80036cc <HAL_TIM_Base_Start+0xa4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a6:	d011      	beq.n	80036cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b8:	e008      	b.n	80036cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e000      	b.n	80036ce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	00010007 	.word	0x00010007

080036f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e04f      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_TIM_Base_Start_IT+0xc4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d018      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d115      	bne.n	800379a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d015      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003786:	d011      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e008      	b.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e000      	b.n	80037ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40013400 	.word	0x40013400
 80037d0:	40014000 	.word	0x40014000
 80037d4:	00010007 	.word	0x00010007

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9be 	bl	8003b9c <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9b0 	bl	8003b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9c1 	bl	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0204 	mvn.w	r2, #4
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f994 	bl	8003b9c <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f986 	bl	8003b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f997 	bl	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f96a 	bl	8003b9c <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f95c 	bl	8003b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f96d 	bl	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f940 	bl	8003b9c <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f932 	bl	8003b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f943 	bl	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fd9a 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 faee 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	d10e      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d107      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fae1 	bl	8003f78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d10e      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d107      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f1 	bl	8003bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d10e      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d107      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f06f 0220 	mvn.w	r2, #32
 8003a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 faa1 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_ConfigClockSource+0x18>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0a8      	b.n	8003b80 <HAL_TIM_ConfigClockSource+0x16a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d067      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x124>
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d80b      	bhi.n	8003a86 <HAL_TIM_ConfigClockSource+0x70>
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d073      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x144>
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d802      	bhi.n	8003a7c <HAL_TIM_ConfigClockSource+0x66>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06f      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a7a:	e078      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d06c      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x144>
 8003a80:	2b30      	cmp	r3, #48	; 0x30
 8003a82:	d06a      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003a84:	e073      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a86:	2b70      	cmp	r3, #112	; 0x70
 8003a88:	d00d      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x90>
 8003a8a:	2b70      	cmp	r3, #112	; 0x70
 8003a8c:	d804      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x82>
 8003a8e:	2b50      	cmp	r3, #80	; 0x50
 8003a90:	d033      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xe4>
 8003a92:	2b60      	cmp	r3, #96	; 0x60
 8003a94:	d041      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003a96:	e06a      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	d066      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x156>
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d017      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003aa4:	e063      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f000 f9a3 	bl	8003e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	609a      	str	r2, [r3, #8]
      break;
 8003ad2:	e04c      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f000 f98c 	bl	8003e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af6:	609a      	str	r2, [r3, #8]
      break;
 8003af8:	e039      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 f900 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2150      	movs	r1, #80	; 0x50
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f959 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b18:	e029      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 f91f 	bl	8003d6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2160      	movs	r1, #96	; 0x60
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f949 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b38:	e019      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 f8e0 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f939 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b58:	e009      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 f930 	bl	8003dca <TIM_ITRx_SetConfig>
        break;
 8003b6a:	e000      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003b6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a40      	ldr	r2, [pc, #256]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d00f      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <TIM_Base_SetConfig+0x118>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	; (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3a      	ldr	r2, [pc, #232]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01f      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c38:	d01b      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <TIM_Base_SetConfig+0x118>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d017      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00f      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <TIM_Base_SetConfig+0x128>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <TIM_Base_SetConfig+0x12c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <TIM_Base_SetConfig+0x130>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0xf8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0xf8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <TIM_Base_SetConfig+0x128>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0xf8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_Base_SetConfig+0x12c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0xf8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <TIM_Base_SetConfig+0x130>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40013400 	.word	0x40013400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e068      	b.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d018      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10c      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e040      	b.n	8004020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fc2a 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8c0 	bl	8004150 <UART_SetConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fb3e 	bl	8004664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fbc5 	bl	80047a8 <UART_CheckIdleState>
 800401e:	4603      	mov	r3, r0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	2b20      	cmp	r3, #32
 800403e:	f040 8081 	bne.w	8004144 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Transmit+0x26>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e079      	b.n	8004146 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_UART_Transmit+0x38>
 800405c:	2302      	movs	r3, #2
 800405e:	e072      	b.n	8004146 <HAL_UART_Transmit+0x11e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004074:	f7fd fc68 	bl	8001948 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d108      	bne.n	80040a6 <HAL_UART_Transmit+0x7e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e003      	b.n	80040ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040b6:	e02d      	b.n	8004114 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fbb5 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e039      	b.n	8004146 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	b292      	uxth	r2, r2
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3302      	adds	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e008      	b.n	8004102 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b292      	uxth	r2, r2
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1cb      	bne.n	80040b8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fb81 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e005      	b.n	8004146 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	4313      	orrs	r3, r2
 8004174:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4bac      	ldr	r3, [pc, #688]	; (8004430 <UART_SetConfig+0x2e0>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	69f9      	ldr	r1, [r7, #28]
 8004186:	430b      	orrs	r3, r1
 8004188:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4aa2      	ldr	r2, [pc, #648]	; (8004434 <UART_SetConfig+0x2e4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a99      	ldr	r2, [pc, #612]	; (8004438 <UART_SetConfig+0x2e8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d121      	bne.n	800421c <UART_SetConfig+0xcc>
 80041d8:	4b98      	ldr	r3, [pc, #608]	; (800443c <UART_SetConfig+0x2ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d816      	bhi.n	8004214 <UART_SetConfig+0xc4>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x9c>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004203 	.word	0x08004203
 80041f8:	0800420f 	.word	0x0800420f
 80041fc:	2301      	movs	r3, #1
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e0e8      	b.n	80043d4 <UART_SetConfig+0x284>
 8004202:	2302      	movs	r3, #2
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e0e5      	b.n	80043d4 <UART_SetConfig+0x284>
 8004208:	2304      	movs	r3, #4
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e0e2      	b.n	80043d4 <UART_SetConfig+0x284>
 800420e:	2308      	movs	r3, #8
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	e0df      	b.n	80043d4 <UART_SetConfig+0x284>
 8004214:	2310      	movs	r3, #16
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	bf00      	nop
 800421a:	e0db      	b.n	80043d4 <UART_SetConfig+0x284>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a87      	ldr	r2, [pc, #540]	; (8004440 <UART_SetConfig+0x2f0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d134      	bne.n	8004290 <UART_SetConfig+0x140>
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <UART_SetConfig+0x2ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d829      	bhi.n	8004288 <UART_SetConfig+0x138>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0xec>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004271 	.word	0x08004271
 8004240:	08004289 	.word	0x08004289
 8004244:	08004289 	.word	0x08004289
 8004248:	08004289 	.word	0x08004289
 800424c:	0800427d 	.word	0x0800427d
 8004250:	08004289 	.word	0x08004289
 8004254:	08004289 	.word	0x08004289
 8004258:	08004289 	.word	0x08004289
 800425c:	08004277 	.word	0x08004277
 8004260:	08004289 	.word	0x08004289
 8004264:	08004289 	.word	0x08004289
 8004268:	08004289 	.word	0x08004289
 800426c:	08004283 	.word	0x08004283
 8004270:	2300      	movs	r3, #0
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	e0ae      	b.n	80043d4 <UART_SetConfig+0x284>
 8004276:	2302      	movs	r3, #2
 8004278:	76fb      	strb	r3, [r7, #27]
 800427a:	e0ab      	b.n	80043d4 <UART_SetConfig+0x284>
 800427c:	2304      	movs	r3, #4
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e0a8      	b.n	80043d4 <UART_SetConfig+0x284>
 8004282:	2308      	movs	r3, #8
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e0a5      	b.n	80043d4 <UART_SetConfig+0x284>
 8004288:	2310      	movs	r3, #16
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	bf00      	nop
 800428e:	e0a1      	b.n	80043d4 <UART_SetConfig+0x284>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <UART_SetConfig+0x2f4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d120      	bne.n	80042dc <UART_SetConfig+0x18c>
 800429a:	4b68      	ldr	r3, [pc, #416]	; (800443c <UART_SetConfig+0x2ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d00f      	beq.n	80042c8 <UART_SetConfig+0x178>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d802      	bhi.n	80042b2 <UART_SetConfig+0x162>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <UART_SetConfig+0x16c>
 80042b0:	e010      	b.n	80042d4 <UART_SetConfig+0x184>
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d005      	beq.n	80042c2 <UART_SetConfig+0x172>
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d009      	beq.n	80042ce <UART_SetConfig+0x17e>
 80042ba:	e00b      	b.n	80042d4 <UART_SetConfig+0x184>
 80042bc:	2300      	movs	r3, #0
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e088      	b.n	80043d4 <UART_SetConfig+0x284>
 80042c2:	2302      	movs	r3, #2
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e085      	b.n	80043d4 <UART_SetConfig+0x284>
 80042c8:	2304      	movs	r3, #4
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e082      	b.n	80043d4 <UART_SetConfig+0x284>
 80042ce:	2308      	movs	r3, #8
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e07f      	b.n	80043d4 <UART_SetConfig+0x284>
 80042d4:	2310      	movs	r3, #16
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	bf00      	nop
 80042da:	e07b      	b.n	80043d4 <UART_SetConfig+0x284>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a59      	ldr	r2, [pc, #356]	; (8004448 <UART_SetConfig+0x2f8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d120      	bne.n	8004328 <UART_SetConfig+0x1d8>
 80042e6:	4b55      	ldr	r3, [pc, #340]	; (800443c <UART_SetConfig+0x2ec>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d00f      	beq.n	8004314 <UART_SetConfig+0x1c4>
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d802      	bhi.n	80042fe <UART_SetConfig+0x1ae>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <UART_SetConfig+0x1b8>
 80042fc:	e010      	b.n	8004320 <UART_SetConfig+0x1d0>
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d005      	beq.n	800430e <UART_SetConfig+0x1be>
 8004302:	2bc0      	cmp	r3, #192	; 0xc0
 8004304:	d009      	beq.n	800431a <UART_SetConfig+0x1ca>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x1d0>
 8004308:	2300      	movs	r3, #0
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e062      	b.n	80043d4 <UART_SetConfig+0x284>
 800430e:	2302      	movs	r3, #2
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e05f      	b.n	80043d4 <UART_SetConfig+0x284>
 8004314:	2304      	movs	r3, #4
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e05c      	b.n	80043d4 <UART_SetConfig+0x284>
 800431a:	2308      	movs	r3, #8
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e059      	b.n	80043d4 <UART_SetConfig+0x284>
 8004320:	2310      	movs	r3, #16
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	bf00      	nop
 8004326:	e055      	b.n	80043d4 <UART_SetConfig+0x284>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <UART_SetConfig+0x2fc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d124      	bne.n	800437c <UART_SetConfig+0x22c>
 8004332:	4b42      	ldr	r3, [pc, #264]	; (800443c <UART_SetConfig+0x2ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004340:	d012      	beq.n	8004368 <UART_SetConfig+0x218>
 8004342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004346:	d802      	bhi.n	800434e <UART_SetConfig+0x1fe>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <UART_SetConfig+0x20c>
 800434c:	e012      	b.n	8004374 <UART_SetConfig+0x224>
 800434e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004352:	d006      	beq.n	8004362 <UART_SetConfig+0x212>
 8004354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004358:	d009      	beq.n	800436e <UART_SetConfig+0x21e>
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x224>
 800435c:	2300      	movs	r3, #0
 800435e:	76fb      	strb	r3, [r7, #27]
 8004360:	e038      	b.n	80043d4 <UART_SetConfig+0x284>
 8004362:	2302      	movs	r3, #2
 8004364:	76fb      	strb	r3, [r7, #27]
 8004366:	e035      	b.n	80043d4 <UART_SetConfig+0x284>
 8004368:	2304      	movs	r3, #4
 800436a:	76fb      	strb	r3, [r7, #27]
 800436c:	e032      	b.n	80043d4 <UART_SetConfig+0x284>
 800436e:	2308      	movs	r3, #8
 8004370:	76fb      	strb	r3, [r7, #27]
 8004372:	e02f      	b.n	80043d4 <UART_SetConfig+0x284>
 8004374:	2310      	movs	r3, #16
 8004376:	76fb      	strb	r3, [r7, #27]
 8004378:	bf00      	nop
 800437a:	e02b      	b.n	80043d4 <UART_SetConfig+0x284>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <UART_SetConfig+0x2e4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d124      	bne.n	80043d0 <UART_SetConfig+0x280>
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <UART_SetConfig+0x2ec>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d012      	beq.n	80043bc <UART_SetConfig+0x26c>
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d802      	bhi.n	80043a2 <UART_SetConfig+0x252>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <UART_SetConfig+0x260>
 80043a0:	e012      	b.n	80043c8 <UART_SetConfig+0x278>
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a6:	d006      	beq.n	80043b6 <UART_SetConfig+0x266>
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d009      	beq.n	80043c2 <UART_SetConfig+0x272>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x278>
 80043b0:	2300      	movs	r3, #0
 80043b2:	76fb      	strb	r3, [r7, #27]
 80043b4:	e00e      	b.n	80043d4 <UART_SetConfig+0x284>
 80043b6:	2302      	movs	r3, #2
 80043b8:	76fb      	strb	r3, [r7, #27]
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x284>
 80043bc:	2304      	movs	r3, #4
 80043be:	76fb      	strb	r3, [r7, #27]
 80043c0:	e008      	b.n	80043d4 <UART_SetConfig+0x284>
 80043c2:	2308      	movs	r3, #8
 80043c4:	76fb      	strb	r3, [r7, #27]
 80043c6:	e005      	b.n	80043d4 <UART_SetConfig+0x284>
 80043c8:	2310      	movs	r3, #16
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	bf00      	nop
 80043ce:	e001      	b.n	80043d4 <UART_SetConfig+0x284>
 80043d0:	2310      	movs	r3, #16
 80043d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a16      	ldr	r2, [pc, #88]	; (8004434 <UART_SetConfig+0x2e4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	f040 8087 	bne.w	80044ee <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e0:	7efb      	ldrb	r3, [r7, #27]
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d836      	bhi.n	8004454 <UART_SetConfig+0x304>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x29c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004455 	.word	0x08004455
 80043fc:	0800441f 	.word	0x0800441f
 8004400:	08004455 	.word	0x08004455
 8004404:	08004455 	.word	0x08004455
 8004408:	08004455 	.word	0x08004455
 800440c:	08004427 	.word	0x08004427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7fe fb44 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8004414:	6178      	str	r0, [r7, #20]
        break;
 8004416:	e022      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <UART_SetConfig+0x300>)
 800441a:	617b      	str	r3, [r7, #20]
        break;
 800441c:	e01f      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441e:	f7fe faa7 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8004422:	6178      	str	r0, [r7, #20]
        break;
 8004424:	e01b      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	617b      	str	r3, [r7, #20]
        break;
 800442c:	e017      	b.n	800445e <UART_SetConfig+0x30e>
 800442e:	bf00      	nop
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	40008000 	.word	0x40008000
 8004438:	40013800 	.word	0x40013800
 800443c:	40021000 	.word	0x40021000
 8004440:	40004400 	.word	0x40004400
 8004444:	40004800 	.word	0x40004800
 8004448:	40004c00 	.word	0x40004c00
 800444c:	40005000 	.word	0x40005000
 8004450:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	76bb      	strb	r3, [r7, #26]
        break;
 800445c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80f1 	beq.w	8004648 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	429a      	cmp	r2, r3
 8004474:	d305      	bcc.n	8004482 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	429a      	cmp	r2, r3
 8004480:	d902      	bls.n	8004488 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	76bb      	strb	r3, [r7, #26]
 8004486:	e0df      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4619      	mov	r1, r3
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	f04f 0400 	mov.w	r4, #0
 8004498:	0214      	lsls	r4, r2, #8
 800449a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800449e:	020b      	lsls	r3, r1, #8
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6852      	ldr	r2, [r2, #4]
 80044a4:	0852      	lsrs	r2, r2, #1
 80044a6:	4611      	mov	r1, r2
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	eb13 0b01 	adds.w	fp, r3, r1
 80044b0:	eb44 0c02 	adc.w	ip, r4, r2
 80044b4:	4658      	mov	r0, fp
 80044b6:	4661      	mov	r1, ip
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	f7fc fbe0 	bl	8000c88 <__aeabi_uldivmod>
 80044c8:	4603      	mov	r3, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d4:	d308      	bcc.n	80044e8 <UART_SetConfig+0x398>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044dc:	d204      	bcs.n	80044e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e0af      	b.n	8004648 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	76bb      	strb	r3, [r7, #26]
 80044ec:	e0ac      	b.n	8004648 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d15b      	bne.n	80045b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80044f8:	7efb      	ldrb	r3, [r7, #27]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d827      	bhi.n	800454e <UART_SetConfig+0x3fe>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x3b4>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800453f 	.word	0x0800453f
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800454f 	.word	0x0800454f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe fab8 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 800452c:	6178      	str	r0, [r7, #20]
        break;
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fe faca 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8004534:	6178      	str	r0, [r7, #20]
        break;
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <UART_SetConfig+0x510>)
 800453a:	617b      	str	r3, [r7, #20]
        break;
 800453c:	e00c      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fe fa17 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8004542:	6178      	str	r0, [r7, #20]
        break;
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	617b      	str	r3, [r7, #20]
        break;
 800454c:	e004      	b.n	8004558 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	76bb      	strb	r3, [r7, #26]
        break;
 8004556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d074      	beq.n	8004648 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005a      	lsls	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d916      	bls.n	80045aa <UART_SetConfig+0x45a>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004582:	d212      	bcs.n	80045aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f023 030f 	bic.w	r3, r3, #15
 800458c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	b29a      	uxth	r2, r3
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	4313      	orrs	r3, r2
 800459e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	89fa      	ldrh	r2, [r7, #14]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e04e      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	76bb      	strb	r3, [r7, #26]
 80045ae:	e04b      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b0:	7efb      	ldrb	r3, [r7, #27]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d827      	bhi.n	8004606 <UART_SetConfig+0x4b6>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x46c>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004607 	.word	0x08004607
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe fa5c 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80045e4:	6178      	str	r0, [r7, #20]
        break;
 80045e6:	e013      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7fe fa6e 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 80045ec:	6178      	str	r0, [r7, #20]
        break;
 80045ee:	e00f      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <UART_SetConfig+0x510>)
 80045f2:	617b      	str	r3, [r7, #20]
        break;
 80045f4:	e00c      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe f9bb 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80045fa:	6178      	str	r0, [r7, #20]
        break;
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	617b      	str	r3, [r7, #20]
        break;
 8004604:	e004      	b.n	8004610 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	76bb      	strb	r3, [r7, #26]
        break;
 800460e:	bf00      	nop
    }

    if (pclk != 0U)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	085a      	lsrs	r2, r3, #1
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	b29b      	uxth	r3, r3
 800462a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d908      	bls.n	8004644 <UART_SetConfig+0x4f4>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d204      	bcs.n	8004644 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e001      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004654:	7ebb      	ldrb	r3, [r7, #26]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004660:	00f42400 	.word	0x00f42400

08004664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01a      	beq.n	800477a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004762:	d10a      	bne.n	800477a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047b6:	f7fd f8c7 	bl	8001948 <HAL_GetTick>
 80047ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d10e      	bne.n	80047e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f82a 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e020      	b.n	800482a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d10e      	bne.n	8004814 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f814 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e00a      	b.n	800482a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	e05d      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d059      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484c:	f7fd f87c 	bl	8001948 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11b      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004870:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e042      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02b      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b6:	d123      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e00f      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	d092      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493a:	2b84      	cmp	r3, #132	; 0x84
 800493c:	d005      	beq.n	800494a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800493e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	3303      	adds	r3, #3
 8004948:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800495c:	f000 fa5a 	bl	8004e14 <vTaskStartScheduler>
  
  return osOK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	bd80      	pop	{r7, pc}

08004966 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004968:	b089      	sub	sp, #36	; 0x24
 800496a:	af04      	add	r7, sp, #16
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <osThreadCreate+0x54>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01c      	beq.n	80049ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685c      	ldr	r4, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681d      	ldr	r5, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691e      	ldr	r6, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ffc8 	bl	8004928 <makeFreeRtosPriority>
 8004998:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049a2:	9202      	str	r2, [sp, #8]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	9100      	str	r1, [sp, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4632      	mov	r2, r6
 80049ac:	4629      	mov	r1, r5
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 f8a0 	bl	8004af4 <xTaskCreateStatic>
 80049b4:	4603      	mov	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e01c      	b.n	80049f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685c      	ldr	r4, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c6:	b29e      	uxth	r6, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ffaa 	bl	8004928 <makeFreeRtosPriority>
 80049d4:	4602      	mov	r2, r0
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	9200      	str	r2, [sp, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4632      	mov	r2, r6
 80049e2:	4629      	mov	r1, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 f8df 	bl	8004ba8 <xTaskCreate>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d001      	beq.n	80049f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049f4:	68fb      	ldr	r3, [r7, #12]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f103 0208 	add.w	r2, r3, #8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f04f 32ff 	mov.w	r2, #4294967295
 8004a16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0208 	add.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f103 0208 	add.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6892      	ldr	r2, [r2, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d103      	bne.n	8004ad4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08e      	sub	sp, #56	; 0x38
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	e7fe      	b.n	8004b1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <xTaskCreateStatic+0x42>
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e7fe      	b.n	8004b34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b36:	2354      	movs	r3, #84	; 0x54
 8004b38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b54      	cmp	r3, #84	; 0x54
 8004b3e:	d009      	beq.n	8004b54 <xTaskCreateStatic+0x60>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e7fe      	b.n	8004b52 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01e      	beq.n	8004b9a <xTaskCreateStatic+0xa6>
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b74:	2300      	movs	r3, #0
 8004b76:	9303      	str	r3, [sp, #12]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f850 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b94:	f000 f8d4 	bl	8004d40 <prvAddNewTaskToReadyList>
 8004b98:	e001      	b.n	8004b9e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b9e:	697b      	ldr	r3, [r7, #20]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	af04      	add	r7, sp, #16
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fe19 	bl	80057f4 <pvPortMalloc>
 8004bc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bca:	2054      	movs	r0, #84	; 0x54
 8004bcc:	f000 fe12 	bl	80057f4 <pvPortMalloc>
 8004bd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bde:	e005      	b.n	8004bec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f000 fec9 	bl	8005978 <vPortFree>
 8004be6:	e001      	b.n	8004bec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f80e 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f000 f892 	bl	8004d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e002      	b.n	8004c28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c28:	69bb      	ldr	r3, [r7, #24]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <prvInitialiseNewTask+0x46>
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e7fe      	b.n	8004c76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01f      	beq.n	8004cbe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e012      	b.n	8004caa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	7819      	ldrb	r1, [r3, #0]
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	3334      	adds	r3, #52	; 0x34
 8004c94:	460a      	mov	r2, r1
 8004c96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d9e9      	bls.n	8004c84 <prvInitialiseNewTask+0x52>
 8004cb0:	e000      	b.n	8004cb4 <prvInitialiseNewTask+0x82>
			{
				break;
 8004cb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cbc:	e003      	b.n	8004cc6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d901      	bls.n	8004cd0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ccc:	2306      	movs	r3, #6
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fea9 	bl	8004a3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	3318      	adds	r3, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fea4 	bl	8004a3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f1c3 0207 	rsb	r2, r3, #7
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	2200      	movs	r2, #0
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	69b8      	ldr	r0, [r7, #24]
 8004d20:	f000 fb64 	bl	80053ec <pxPortInitialiseStack>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d36:	bf00      	nop
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d48:	f000 fc78 	bl	800563c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <prvAddNewTaskToReadyList+0xb8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <prvAddNewTaskToReadyList+0xb8>)
 8004d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <prvAddNewTaskToReadyList+0xbc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5e:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <prvAddNewTaskToReadyList+0xbc>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d64:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <prvAddNewTaskToReadyList+0xb8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d110      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d6c:	f000 fa84 	bl	8005278 <prvInitialiseTaskLists>
 8004d70:	e00d      	b.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d72:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <prvAddNewTaskToReadyList+0xc0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <prvAddNewTaskToReadyList+0xbc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d802      	bhi.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <prvAddNewTaskToReadyList+0xbc>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7ff fe49 	bl	8004a58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dc6:	f000 fc67 	bl	8005698 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <prvAddNewTaskToReadyList+0xc0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <prvAddNewTaskToReadyList+0xbc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d207      	bcs.n	8004df0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000056c 	.word	0x2000056c
 8004dfc:	2000046c 	.word	0x2000046c
 8004e00:	20000578 	.word	0x20000578
 8004e04:	20000588 	.word	0x20000588
 8004e08:	20000574 	.word	0x20000574
 8004e0c:	20000470 	.word	0x20000470
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e22:	463a      	mov	r2, r7
 8004e24:	1d39      	adds	r1, r7, #4
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc f9da 	bl	80011e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	9202      	str	r2, [sp, #8]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	460a      	mov	r2, r1
 8004e42:	491d      	ldr	r1, [pc, #116]	; (8004eb8 <vTaskStartScheduler+0xa4>)
 8004e44:	481d      	ldr	r0, [pc, #116]	; (8004ebc <vTaskStartScheduler+0xa8>)
 8004e46:	f7ff fe55 	bl	8004af4 <xTaskCreateStatic>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <vTaskStartScheduler+0xac>)
 8004e4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <vTaskStartScheduler+0xac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e001      	b.n	8004e62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d115      	bne.n	8004e94 <vTaskStartScheduler+0x80>
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <vTaskStartScheduler+0xb0>)
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <vTaskStartScheduler+0xb4>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <vTaskStartScheduler+0xb8>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e8e:	f000 fb37 	bl	8005500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e92:	e00d      	b.n	8004eb0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d109      	bne.n	8004eb0 <vTaskStartScheduler+0x9c>
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e7fe      	b.n	8004eae <vTaskStartScheduler+0x9a>
}
 8004eb0:	bf00      	nop
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	080096c4 	.word	0x080096c4
 8004ebc:	08005249 	.word	0x08005249
 8004ec0:	20000590 	.word	0x20000590
 8004ec4:	2000058c 	.word	0x2000058c
 8004ec8:	20000578 	.word	0x20000578
 8004ecc:	20000570 	.word	0x20000570

08004ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <vTaskSuspendAll+0x18>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <vTaskSuspendAll+0x18>)
 8004edc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	20000594 	.word	0x20000594

08004eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <xTaskResumeAll+0x114>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <xTaskResumeAll+0x2a>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	e7fe      	b.n	8004f14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f16:	f000 fb91 	bl	800563c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <xTaskResumeAll+0x114>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	4a37      	ldr	r2, [pc, #220]	; (8005000 <xTaskResumeAll+0x114>)
 8004f22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f24:	4b36      	ldr	r3, [pc, #216]	; (8005000 <xTaskResumeAll+0x114>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d161      	bne.n	8004ff0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <xTaskResumeAll+0x118>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d05d      	beq.n	8004ff0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f34:	e02e      	b.n	8004f94 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f36:	4b34      	ldr	r3, [pc, #208]	; (8005008 <xTaskResumeAll+0x11c>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3318      	adds	r3, #24
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fdac 	bl	8004aa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fda7 	bl	8004aa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	2201      	movs	r2, #1
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <xTaskResumeAll+0x120>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <xTaskResumeAll+0x120>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <xTaskResumeAll+0x124>)
 8004f72:	441a      	add	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7ff fd6c 	bl	8004a58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4b23      	ldr	r3, [pc, #140]	; (8005014 <xTaskResumeAll+0x128>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <xTaskResumeAll+0x12c>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f94:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <xTaskResumeAll+0x11c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1cc      	bne.n	8004f36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fa2:	f000 fa03 	bl	80053ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <xTaskResumeAll+0x130>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f000 f837 	bl	8005024 <xTaskIncrementTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <xTaskResumeAll+0x12c>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f1      	bne.n	8004fb2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <xTaskResumeAll+0x130>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <xTaskResumeAll+0x12c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <xTaskResumeAll+0x134>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff0:	f000 fb52 	bl	8005698 <vPortExitCritical>

	return xAlreadyYielded;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000594 	.word	0x20000594
 8005004:	2000056c 	.word	0x2000056c
 8005008:	2000052c 	.word	0x2000052c
 800500c:	20000574 	.word	0x20000574
 8005010:	20000470 	.word	0x20000470
 8005014:	2000046c 	.word	0x2000046c
 8005018:	20000580 	.word	0x20000580
 800501c:	2000057c 	.word	0x2000057c
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502e:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <xTaskIncrementTick+0x144>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 8087 	bne.w	8005146 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <xTaskIncrementTick+0x148>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3301      	adds	r3, #1
 800503e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005040:	4a4a      	ldr	r2, [pc, #296]	; (800516c <xTaskIncrementTick+0x148>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d11f      	bne.n	800508c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800504c:	4b48      	ldr	r3, [pc, #288]	; (8005170 <xTaskIncrementTick+0x14c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <xTaskIncrementTick+0x46>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	e7fe      	b.n	8005068 <xTaskIncrementTick+0x44>
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <xTaskIncrementTick+0x14c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	4b40      	ldr	r3, [pc, #256]	; (8005174 <xTaskIncrementTick+0x150>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3e      	ldr	r2, [pc, #248]	; (8005170 <xTaskIncrementTick+0x14c>)
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4a3e      	ldr	r2, [pc, #248]	; (8005174 <xTaskIncrementTick+0x150>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <xTaskIncrementTick+0x154>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <xTaskIncrementTick+0x154>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	f000 f990 	bl	80053ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <xTaskIncrementTick+0x158>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d348      	bcc.n	8005128 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <xTaskIncrementTick+0x14c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <xTaskIncrementTick+0x158>)
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	601a      	str	r2, [r3, #0]
					break;
 80050a8:	e03e      	b.n	8005128 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <xTaskIncrementTick+0x14c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d203      	bcs.n	80050ca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050c2:	4a2e      	ldr	r2, [pc, #184]	; (800517c <xTaskIncrementTick+0x158>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050c8:	e02e      	b.n	8005128 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fce6 	bl	8004aa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3318      	adds	r3, #24
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fcdd 	bl	8004aa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	2201      	movs	r2, #1
 80050ec:	409a      	lsls	r2, r3
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <xTaskIncrementTick+0x15c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	4a22      	ldr	r2, [pc, #136]	; (8005180 <xTaskIncrementTick+0x15c>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <xTaskIncrementTick+0x160>)
 8005106:	441a      	add	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7ff fca2 	bl	8004a58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <xTaskIncrementTick+0x164>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	429a      	cmp	r2, r3
 8005120:	d3b9      	bcc.n	8005096 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005126:	e7b6      	b.n	8005096 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <xTaskIncrementTick+0x164>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4915      	ldr	r1, [pc, #84]	; (8005184 <xTaskIncrementTick+0x160>)
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d907      	bls.n	8005150 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005140:	2301      	movs	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e004      	b.n	8005150 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <xTaskIncrementTick+0x168>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	4a0f      	ldr	r2, [pc, #60]	; (800518c <xTaskIncrementTick+0x168>)
 800514e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTaskIncrementTick+0x16c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800515c:	697b      	ldr	r3, [r7, #20]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000594 	.word	0x20000594
 800516c:	20000570 	.word	0x20000570
 8005170:	20000524 	.word	0x20000524
 8005174:	20000528 	.word	0x20000528
 8005178:	20000584 	.word	0x20000584
 800517c:	2000058c 	.word	0x2000058c
 8005180:	20000574 	.word	0x20000574
 8005184:	20000470 	.word	0x20000470
 8005188:	2000046c 	.word	0x2000046c
 800518c:	2000057c 	.word	0x2000057c
 8005190:	20000580 	.word	0x20000580

08005194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <vTaskSwitchContext+0xa0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051a2:	4b25      	ldr	r3, [pc, #148]	; (8005238 <vTaskSwitchContext+0xa4>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051a8:	e03e      	b.n	8005228 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80051aa:	4b23      	ldr	r3, [pc, #140]	; (8005238 <vTaskSwitchContext+0xa4>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <vTaskSwitchContext+0xa8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	fab3 f383 	clz	r3, r3
 80051bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	f1c3 031f 	rsb	r3, r3, #31
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	491e      	ldr	r1, [pc, #120]	; (8005240 <vTaskSwitchContext+0xac>)
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <vTaskSwitchContext+0x5a>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e7fe      	b.n	80051ec <vTaskSwitchContext+0x58>
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4a11      	ldr	r2, [pc, #68]	; (8005240 <vTaskSwitchContext+0xac>)
 80051fa:	4413      	add	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3308      	adds	r3, #8
 8005210:	429a      	cmp	r2, r3
 8005212:	d104      	bne.n	800521e <vTaskSwitchContext+0x8a>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a07      	ldr	r2, [pc, #28]	; (8005244 <vTaskSwitchContext+0xb0>)
 8005226:	6013      	str	r3, [r2, #0]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000594 	.word	0x20000594
 8005238:	20000580 	.word	0x20000580
 800523c:	20000574 	.word	0x20000574
 8005240:	20000470 	.word	0x20000470
 8005244:	2000046c 	.word	0x2000046c

08005248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005250:	f000 f852 	bl	80052f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <prvIdleTask+0x28>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d9f9      	bls.n	8005250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <prvIdleTask+0x2c>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800526c:	e7f0      	b.n	8005250 <prvIdleTask+0x8>
 800526e:	bf00      	nop
 8005270:	20000470 	.word	0x20000470
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	e00c      	b.n	800529e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <prvInitialiseTaskLists+0x60>)
 8005290:	4413      	add	r3, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fbb3 	bl	80049fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d9ef      	bls.n	8005284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052a4:	480d      	ldr	r0, [pc, #52]	; (80052dc <prvInitialiseTaskLists+0x64>)
 80052a6:	f7ff fbaa 	bl	80049fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052aa:	480d      	ldr	r0, [pc, #52]	; (80052e0 <prvInitialiseTaskLists+0x68>)
 80052ac:	f7ff fba7 	bl	80049fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052b0:	480c      	ldr	r0, [pc, #48]	; (80052e4 <prvInitialiseTaskLists+0x6c>)
 80052b2:	f7ff fba4 	bl	80049fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052b6:	480c      	ldr	r0, [pc, #48]	; (80052e8 <prvInitialiseTaskLists+0x70>)
 80052b8:	f7ff fba1 	bl	80049fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <prvInitialiseTaskLists+0x74>)
 80052be:	f7ff fb9e 	bl	80049fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <prvInitialiseTaskLists+0x78>)
 80052c4:	4a05      	ldr	r2, [pc, #20]	; (80052dc <prvInitialiseTaskLists+0x64>)
 80052c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvInitialiseTaskLists+0x7c>)
 80052ca:	4a05      	ldr	r2, [pc, #20]	; (80052e0 <prvInitialiseTaskLists+0x68>)
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000470 	.word	0x20000470
 80052dc:	200004fc 	.word	0x200004fc
 80052e0:	20000510 	.word	0x20000510
 80052e4:	2000052c 	.word	0x2000052c
 80052e8:	20000540 	.word	0x20000540
 80052ec:	20000558 	.word	0x20000558
 80052f0:	20000524 	.word	0x20000524
 80052f4:	20000528 	.word	0x20000528

080052f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052fe:	e019      	b.n	8005334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005300:	f000 f99c 	bl	800563c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <prvCheckTasksWaitingTermination+0x4c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fbc5 	bl	8004aa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvCheckTasksWaitingTermination+0x50>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3b01      	subs	r3, #1
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <prvCheckTasksWaitingTermination+0x50>)
 800531e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <prvCheckTasksWaitingTermination+0x54>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	4a09      	ldr	r2, [pc, #36]	; (800534c <prvCheckTasksWaitingTermination+0x54>)
 8005328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800532a:	f000 f9b5 	bl	8005698 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f80e 	bl	8005350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <prvCheckTasksWaitingTermination+0x54>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e1      	bne.n	8005300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000540 	.word	0x20000540
 8005348:	2000056c 	.word	0x2000056c
 800534c:	20000554 	.word	0x20000554

08005350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fb06 	bl	8005978 <vPortFree>
				vPortFree( pxTCB );
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb03 	bl	8005978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005372:	e017      	b.n	80053a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800537a:	2b01      	cmp	r3, #1
 800537c:	d103      	bne.n	8005386 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fafa 	bl	8005978 <vPortFree>
	}
 8005384:	e00e      	b.n	80053a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538c:	2b02      	cmp	r3, #2
 800538e:	d009      	beq.n	80053a4 <prvDeleteTCB+0x54>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e7fe      	b.n	80053a2 <prvDeleteTCB+0x52>
	}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <prvResetNextTaskUnblockTime+0x38>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <prvResetNextTaskUnblockTime+0x3c>)
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053c4:	e008      	b.n	80053d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c6:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <prvResetNextTaskUnblockTime+0x38>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <prvResetNextTaskUnblockTime+0x3c>)
 80053d6:	6013      	str	r3, [r2, #0]
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000524 	.word	0x20000524
 80053e8:	2000058c 	.word	0x2000058c

080053ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3b04      	subs	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b04      	subs	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b04      	subs	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <pxPortInitialiseStack+0x64>)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b14      	subs	r3, #20
 8005426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b04      	subs	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f06f 0202 	mvn.w	r2, #2
 800543a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b20      	subs	r3, #32
 8005440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	08005455 	.word	0x08005455

08005454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <prvTaskExitError+0x50>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d009      	beq.n	800547c <prvTaskExitError+0x28>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e7fe      	b.n	800547a <prvTaskExitError+0x26>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800548e:	bf00      	nop
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0fc      	beq.n	8005490 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000000c 	.word	0x2000000c
	...

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	4770      	bx	lr
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst2>:
 80054d0:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054d8:	4808      	ldr	r0, [pc, #32]	; (80054fc <prvPortStartFirstTask+0x24>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8814 	msr	CONTROL, r0
 80054ea:	b662      	cpsie	i
 80054ec:	b661      	cpsie	f
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	df00      	svc	0
 80054f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054fa:	bf00      	nop
 80054fc:	e000ed08 	.word	0xe000ed08

08005500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005506:	4b44      	ldr	r3, [pc, #272]	; (8005618 <xPortStartScheduler+0x118>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a44      	ldr	r2, [pc, #272]	; (800561c <xPortStartScheduler+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d109      	bne.n	8005524 <xPortStartScheduler+0x24>
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e7fe      	b.n	8005522 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005524:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <xPortStartScheduler+0x118>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3d      	ldr	r2, [pc, #244]	; (8005620 <xPortStartScheduler+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d109      	bne.n	8005542 <xPortStartScheduler+0x42>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e7fe      	b.n	8005540 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005542:	4b38      	ldr	r3, [pc, #224]	; (8005624 <xPortStartScheduler+0x124>)
 8005544:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4b30      	ldr	r3, [pc, #192]	; (8005628 <xPortStartScheduler+0x128>)
 8005568:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800556a:	4b30      	ldr	r3, [pc, #192]	; (800562c <xPortStartScheduler+0x12c>)
 800556c:	2207      	movs	r2, #7
 800556e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005570:	e009      	b.n	8005586 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005572:	4b2e      	ldr	r3, [pc, #184]	; (800562c <xPortStartScheduler+0x12c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a2c      	ldr	r2, [pc, #176]	; (800562c <xPortStartScheduler+0x12c>)
 800557a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d0ef      	beq.n	8005572 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <xPortStartScheduler+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f1c3 0307 	rsb	r3, r3, #7
 800559a:	2b04      	cmp	r3, #4
 800559c:	d009      	beq.n	80055b2 <xPortStartScheduler+0xb2>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	e7fe      	b.n	80055b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055b2:	4b1e      	ldr	r3, [pc, #120]	; (800562c <xPortStartScheduler+0x12c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <xPortStartScheduler+0x12c>)
 80055ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <xPortStartScheduler+0x12c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <xPortStartScheduler+0x12c>)
 80055c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <xPortStartScheduler+0x130>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <xPortStartScheduler+0x130>)
 80055d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055dc:	4b14      	ldr	r3, [pc, #80]	; (8005630 <xPortStartScheduler+0x130>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a13      	ldr	r2, [pc, #76]	; (8005630 <xPortStartScheduler+0x130>)
 80055e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055e8:	f000 f8d6 	bl	8005798 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055ec:	4b11      	ldr	r3, [pc, #68]	; (8005634 <xPortStartScheduler+0x134>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055f2:	f000 f8f5 	bl	80057e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055f6:	4b10      	ldr	r3, [pc, #64]	; (8005638 <xPortStartScheduler+0x138>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <xPortStartScheduler+0x138>)
 80055fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005600:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005602:	f7ff ff69 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005606:	f7ff fdc5 	bl	8005194 <vTaskSwitchContext>
	prvTaskExitError();
 800560a:	f7ff ff23 	bl	8005454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed00 	.word	0xe000ed00
 800561c:	410fc271 	.word	0x410fc271
 8005620:	410fc270 	.word	0x410fc270
 8005624:	e000e400 	.word	0xe000e400
 8005628:	20000598 	.word	0x20000598
 800562c:	2000059c 	.word	0x2000059c
 8005630:	e000ed20 	.word	0xe000ed20
 8005634:	2000000c 	.word	0x2000000c
 8005638:	e000ef34 	.word	0xe000ef34

0800563c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <vPortEnterCritical+0x54>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <vPortEnterCritical+0x54>)
 800565c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <vPortEnterCritical+0x54>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d10e      	bne.n	8005684 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <vPortEnterCritical+0x58>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <vPortEnterCritical+0x48>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	e7fe      	b.n	8005682 <vPortEnterCritical+0x46>
	}
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	2000000c 	.word	0x2000000c
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <vPortExitCritical+0x4c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <vPortExitCritical+0x22>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e7fe      	b.n	80056b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <vPortExitCritical+0x4c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3b01      	subs	r3, #1
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <vPortExitCritical+0x4c>)
 80056c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056c4:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <vPortExitCritical+0x4c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <vPortExitCritical+0x3e>
 80056cc:	2300      	movs	r3, #0
 80056ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c
	...

080056f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056f0:	f3ef 8009 	mrs	r0, PSP
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <pxCurrentTCBConst>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	f01e 0f10 	tst.w	lr, #16
 8005700:	bf08      	it	eq
 8005702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	6010      	str	r0, [r2, #0]
 800570c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005714:	f380 8811 	msr	BASEPRI, r0
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f7ff fd38 	bl	8005194 <vTaskSwitchContext>
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f380 8811 	msr	BASEPRI, r0
 800572c:	bc09      	pop	{r0, r3}
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	6808      	ldr	r0, [r1, #0]
 8005732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005736:	f01e 0f10 	tst.w	lr, #16
 800573a:	bf08      	it	eq
 800573c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005740:	f380 8809 	msr	PSP, r0
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	f3af 8000 	nop.w

08005750 <pxCurrentTCBConst>:
 8005750:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop

08005758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005770:	f7ff fc58 	bl	8005024 <xTaskIncrementTick>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <SysTick_Handler+0x3c>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <vPortSetupTimerInterrupt+0x34>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortSetupTimerInterrupt+0x38>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vPortSetupTimerInterrupt+0x3c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <vPortSetupTimerInterrupt+0x40>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	099b      	lsrs	r3, r3, #6
 80057b4:	4a09      	ldr	r2, [pc, #36]	; (80057dc <vPortSetupTimerInterrupt+0x44>)
 80057b6:	3b01      	subs	r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <vPortSetupTimerInterrupt+0x34>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	e000e010 	.word	0xe000e010
 80057d0:	e000e018 	.word	0xe000e018
 80057d4:	20000000 	.word	0x20000000
 80057d8:	10624dd3 	.word	0x10624dd3
 80057dc:	e000e014 	.word	0xe000e014

080057e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057f0 <vPortEnableVFP+0x10>
 80057e4:	6801      	ldr	r1, [r0, #0]
 80057e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ea:	6001      	str	r1, [r0, #0]
 80057ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057ee:	bf00      	nop
 80057f0:	e000ed88 	.word	0xe000ed88

080057f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005800:	f7ff fb66 	bl	8004ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005804:	4b57      	ldr	r3, [pc, #348]	; (8005964 <pvPortMalloc+0x170>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800580c:	f000 f90c 	bl	8005a28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005810:	4b55      	ldr	r3, [pc, #340]	; (8005968 <pvPortMalloc+0x174>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 808c 	bne.w	8005936 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01c      	beq.n	800585e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005824:	2208      	movs	r2, #8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4413      	add	r3, r2
 800582a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d013      	beq.n	800585e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f023 0307 	bic.w	r3, r3, #7
 800583c:	3308      	adds	r3, #8
 800583e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <pvPortMalloc+0x6a>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e7fe      	b.n	800585c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d068      	beq.n	8005936 <pvPortMalloc+0x142>
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <pvPortMalloc+0x178>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d863      	bhi.n	8005936 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800586e:	4b40      	ldr	r3, [pc, #256]	; (8005970 <pvPortMalloc+0x17c>)
 8005870:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005872:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <pvPortMalloc+0x17c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005878:	e004      	b.n	8005884 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d903      	bls.n	8005896 <pvPortMalloc+0xa2>
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f1      	bne.n	800587a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005896:	4b33      	ldr	r3, [pc, #204]	; (8005964 <pvPortMalloc+0x170>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	429a      	cmp	r2, r3
 800589e:	d04a      	beq.n	8005936 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2208      	movs	r2, #8
 80058a6:	4413      	add	r3, r2
 80058a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	2308      	movs	r3, #8
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	429a      	cmp	r2, r3
 80058c0:	d91e      	bls.n	8005900 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4413      	add	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <pvPortMalloc+0xf4>
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e7fe      	b.n	80058e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058fa:	69b8      	ldr	r0, [r7, #24]
 80058fc:	f000 f8f6 	bl	8005aec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <pvPortMalloc+0x178>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <pvPortMalloc+0x178>)
 800590c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <pvPortMalloc+0x178>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b18      	ldr	r3, [pc, #96]	; (8005974 <pvPortMalloc+0x180>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d203      	bcs.n	8005922 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <pvPortMalloc+0x178>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a15      	ldr	r2, [pc, #84]	; (8005974 <pvPortMalloc+0x180>)
 8005920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <pvPortMalloc+0x174>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	431a      	orrs	r2, r3
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005936:	f7ff fad9 	bl	8004eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <pvPortMalloc+0x164>
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e7fe      	b.n	8005956 <pvPortMalloc+0x162>
	return pvReturn;
 8005958:	69fb      	ldr	r3, [r7, #28]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3728      	adds	r7, #40	; 0x28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20001160 	.word	0x20001160
 8005968:	2000116c 	.word	0x2000116c
 800596c:	20001164 	.word	0x20001164
 8005970:	20001158 	.word	0x20001158
 8005974:	20001168 	.word	0x20001168

08005978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d046      	beq.n	8005a18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800598a:	2308      	movs	r3, #8
 800598c:	425b      	negs	r3, r3
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <vPortFree+0xa8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <vPortFree+0x42>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e7fe      	b.n	80059b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <vPortFree+0x5e>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	e7fe      	b.n	80059d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <vPortFree+0xa8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d115      	bne.n	8005a18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortFree+0xa8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059fc:	f7ff fa68 	bl	8004ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <vPortFree+0xac>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4413      	add	r3, r2
 8005a0a:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <vPortFree+0xac>)
 8005a0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a0e:	6938      	ldr	r0, [r7, #16]
 8005a10:	f000 f86c 	bl	8005aec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a14:	f7ff fa6a 	bl	8004eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a18:	bf00      	nop
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2000116c 	.word	0x2000116c
 8005a24:	20001164 	.word	0x20001164

08005a28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a2e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <prvHeapInit+0xac>)
 8005a36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00c      	beq.n	8005a5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3307      	adds	r3, #7
 8005a46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <prvHeapInit+0xac>)
 8005a58:	4413      	add	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <prvHeapInit+0xb0>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a66:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <prvHeapInit+0xb0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a74:	2208      	movs	r2, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <prvHeapInit+0xb4>)
 8005a88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <prvHeapInit+0xb4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <prvHeapInit+0xb4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <prvHeapInit+0xb4>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <prvHeapInit+0xb8>)
 8005ab6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <prvHeapInit+0xbc>)
 8005abe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <prvHeapInit+0xc0>)
 8005ac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ac6:	601a      	str	r2, [r3, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	200005a0 	.word	0x200005a0
 8005ad8:	20001158 	.word	0x20001158
 8005adc:	20001160 	.word	0x20001160
 8005ae0:	20001168 	.word	0x20001168
 8005ae4:	20001164 	.word	0x20001164
 8005ae8:	2000116c 	.word	0x2000116c

08005aec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <prvInsertBlockIntoFreeList+0xac>)
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e002      	b.n	8005b00 <prvInsertBlockIntoFreeList+0x14>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d8f7      	bhi.n	8005afa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d108      	bne.n	8005b2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	441a      	add	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d118      	bne.n	8005b74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <prvInsertBlockIntoFreeList+0xb0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d00d      	beq.n	8005b6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e008      	b.n	8005b7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <prvInsertBlockIntoFreeList+0xb0>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e003      	b.n	8005b7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d002      	beq.n	8005b8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20001158 	.word	0x20001158
 8005b9c:	20001160 	.word	0x20001160

08005ba0 <__errno>:
 8005ba0:	4b01      	ldr	r3, [pc, #4]	; (8005ba8 <__errno+0x8>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000010 	.word	0x20000010

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4e0d      	ldr	r6, [pc, #52]	; (8005be4 <__libc_init_array+0x38>)
 8005bb0:	4c0d      	ldr	r4, [pc, #52]	; (8005be8 <__libc_init_array+0x3c>)
 8005bb2:	1ba4      	subs	r4, r4, r6
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	4e0b      	ldr	r6, [pc, #44]	; (8005bec <__libc_init_array+0x40>)
 8005bbe:	4c0c      	ldr	r4, [pc, #48]	; (8005bf0 <__libc_init_array+0x44>)
 8005bc0:	f003 fd5a 	bl	8009678 <_init>
 8005bc4:	1ba4      	subs	r4, r4, r6
 8005bc6:	10a4      	asrs	r4, r4, #2
 8005bc8:	2500      	movs	r5, #0
 8005bca:	42a5      	cmp	r5, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd4:	4798      	blx	r3
 8005bd6:	3501      	adds	r5, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bde:	4798      	blx	r3
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	080099d0 	.word	0x080099d0
 8005be8:	080099d0 	.word	0x080099d0
 8005bec:	080099d0 	.word	0x080099d0
 8005bf0:	080099d4 	.word	0x080099d4

08005bf4 <memcpy>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	1e43      	subs	r3, r0, #1
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	d100      	bne.n	8005c00 <memcpy+0xc>
 8005bfe:	bd10      	pop	{r4, pc}
 8005c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c08:	e7f7      	b.n	8005bfa <memcpy+0x6>

08005c0a <memset>:
 8005c0a:	4402      	add	r2, r0
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d100      	bne.n	8005c14 <memset+0xa>
 8005c12:	4770      	bx	lr
 8005c14:	f803 1b01 	strb.w	r1, [r3], #1
 8005c18:	e7f9      	b.n	8005c0e <memset+0x4>

08005c1a <__cvt>:
 8005c1a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1e:	ec55 4b10 	vmov	r4, r5, d0
 8005c22:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	460e      	mov	r6, r1
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	bfb8      	it	lt
 8005c32:	4622      	movlt	r2, r4
 8005c34:	462b      	mov	r3, r5
 8005c36:	f027 0720 	bic.w	r7, r7, #32
 8005c3a:	bfbb      	ittet	lt
 8005c3c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c40:	461d      	movlt	r5, r3
 8005c42:	2300      	movge	r3, #0
 8005c44:	232d      	movlt	r3, #45	; 0x2d
 8005c46:	bfb8      	it	lt
 8005c48:	4614      	movlt	r4, r2
 8005c4a:	2f46      	cmp	r7, #70	; 0x46
 8005c4c:	700b      	strb	r3, [r1, #0]
 8005c4e:	d004      	beq.n	8005c5a <__cvt+0x40>
 8005c50:	2f45      	cmp	r7, #69	; 0x45
 8005c52:	d100      	bne.n	8005c56 <__cvt+0x3c>
 8005c54:	3601      	adds	r6, #1
 8005c56:	2102      	movs	r1, #2
 8005c58:	e000      	b.n	8005c5c <__cvt+0x42>
 8005c5a:	2103      	movs	r1, #3
 8005c5c:	ab03      	add	r3, sp, #12
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	ab02      	add	r3, sp, #8
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4632      	mov	r2, r6
 8005c66:	4653      	mov	r3, sl
 8005c68:	ec45 4b10 	vmov	d0, r4, r5
 8005c6c:	f001 fd78 	bl	8007760 <_dtoa_r>
 8005c70:	2f47      	cmp	r7, #71	; 0x47
 8005c72:	4680      	mov	r8, r0
 8005c74:	d102      	bne.n	8005c7c <__cvt+0x62>
 8005c76:	f019 0f01 	tst.w	r9, #1
 8005c7a:	d026      	beq.n	8005cca <__cvt+0xb0>
 8005c7c:	2f46      	cmp	r7, #70	; 0x46
 8005c7e:	eb08 0906 	add.w	r9, r8, r6
 8005c82:	d111      	bne.n	8005ca8 <__cvt+0x8e>
 8005c84:	f898 3000 	ldrb.w	r3, [r8]
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d10a      	bne.n	8005ca2 <__cvt+0x88>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c98:	b918      	cbnz	r0, 8005ca2 <__cvt+0x88>
 8005c9a:	f1c6 0601 	rsb	r6, r6, #1
 8005c9e:	f8ca 6000 	str.w	r6, [sl]
 8005ca2:	f8da 3000 	ldr.w	r3, [sl]
 8005ca6:	4499      	add	r9, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb4:	b938      	cbnz	r0, 8005cc6 <__cvt+0xac>
 8005cb6:	2230      	movs	r2, #48	; 0x30
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	454b      	cmp	r3, r9
 8005cbc:	d205      	bcs.n	8005cca <__cvt+0xb0>
 8005cbe:	1c59      	adds	r1, r3, #1
 8005cc0:	9103      	str	r1, [sp, #12]
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	e7f8      	b.n	8005cb8 <__cvt+0x9e>
 8005cc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cca:	9b03      	ldr	r3, [sp, #12]
 8005ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cce:	eba3 0308 	sub.w	r3, r3, r8
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	b004      	add	sp, #16
 8005cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cdc <__exponent>:
 8005cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	bfba      	itte	lt
 8005ce4:	4249      	neglt	r1, r1
 8005ce6:	232d      	movlt	r3, #45	; 0x2d
 8005ce8:	232b      	movge	r3, #43	; 0x2b
 8005cea:	2909      	cmp	r1, #9
 8005cec:	f804 2b02 	strb.w	r2, [r4], #2
 8005cf0:	7043      	strb	r3, [r0, #1]
 8005cf2:	dd20      	ble.n	8005d36 <__exponent+0x5a>
 8005cf4:	f10d 0307 	add.w	r3, sp, #7
 8005cf8:	461f      	mov	r7, r3
 8005cfa:	260a      	movs	r6, #10
 8005cfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d00:	fb06 1115 	mls	r1, r6, r5, r1
 8005d04:	3130      	adds	r1, #48	; 0x30
 8005d06:	2d09      	cmp	r5, #9
 8005d08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d0c:	f103 32ff 	add.w	r2, r3, #4294967295
 8005d10:	4629      	mov	r1, r5
 8005d12:	dc09      	bgt.n	8005d28 <__exponent+0x4c>
 8005d14:	3130      	adds	r1, #48	; 0x30
 8005d16:	3b02      	subs	r3, #2
 8005d18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d1c:	42bb      	cmp	r3, r7
 8005d1e:	4622      	mov	r2, r4
 8005d20:	d304      	bcc.n	8005d2c <__exponent+0x50>
 8005d22:	1a10      	subs	r0, r2, r0
 8005d24:	b003      	add	sp, #12
 8005d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d28:	4613      	mov	r3, r2
 8005d2a:	e7e7      	b.n	8005cfc <__exponent+0x20>
 8005d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d30:	f804 2b01 	strb.w	r2, [r4], #1
 8005d34:	e7f2      	b.n	8005d1c <__exponent+0x40>
 8005d36:	2330      	movs	r3, #48	; 0x30
 8005d38:	4419      	add	r1, r3
 8005d3a:	7083      	strb	r3, [r0, #2]
 8005d3c:	1d02      	adds	r2, r0, #4
 8005d3e:	70c1      	strb	r1, [r0, #3]
 8005d40:	e7ef      	b.n	8005d22 <__exponent+0x46>
	...

08005d44 <_printf_float>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	b08d      	sub	sp, #52	; 0x34
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005d50:	4616      	mov	r6, r2
 8005d52:	461f      	mov	r7, r3
 8005d54:	4605      	mov	r5, r0
 8005d56:	f002 fde7 	bl	8008928 <_localeconv_r>
 8005d5a:	6803      	ldr	r3, [r0, #0]
 8005d5c:	9304      	str	r3, [sp, #16]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fa36 	bl	80001d0 <strlen>
 8005d64:	2300      	movs	r3, #0
 8005d66:	930a      	str	r3, [sp, #40]	; 0x28
 8005d68:	f8d8 3000 	ldr.w	r3, [r8]
 8005d6c:	9005      	str	r0, [sp, #20]
 8005d6e:	3307      	adds	r3, #7
 8005d70:	f023 0307 	bic.w	r3, r3, #7
 8005d74:	f103 0208 	add.w	r2, r3, #8
 8005d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d80:	f8c8 2000 	str.w	r2, [r8]
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d94:	9307      	str	r3, [sp, #28]
 8005d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9e:	4ba7      	ldr	r3, [pc, #668]	; (800603c <_printf_float+0x2f8>)
 8005da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da4:	f7fa fec2 	bl	8000b2c <__aeabi_dcmpun>
 8005da8:	bb70      	cbnz	r0, 8005e08 <_printf_float+0xc4>
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	4ba3      	ldr	r3, [pc, #652]	; (800603c <_printf_float+0x2f8>)
 8005db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db4:	f7fa fe9c 	bl	8000af0 <__aeabi_dcmple>
 8005db8:	bb30      	cbnz	r0, 8005e08 <_printf_float+0xc4>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa fe8b 	bl	8000adc <__aeabi_dcmplt>
 8005dc6:	b110      	cbz	r0, 8005dce <_printf_float+0x8a>
 8005dc8:	232d      	movs	r3, #45	; 0x2d
 8005dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dce:	4a9c      	ldr	r2, [pc, #624]	; (8006040 <_printf_float+0x2fc>)
 8005dd0:	4b9c      	ldr	r3, [pc, #624]	; (8006044 <_printf_float+0x300>)
 8005dd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005dd6:	bf8c      	ite	hi
 8005dd8:	4690      	movhi	r8, r2
 8005dda:	4698      	movls	r8, r3
 8005ddc:	2303      	movs	r3, #3
 8005dde:	f02b 0204 	bic.w	r2, fp, #4
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	f04f 0900 	mov.w	r9, #0
 8005dea:	9700      	str	r7, [sp, #0]
 8005dec:	4633      	mov	r3, r6
 8005dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f9e6 	bl	80061c4 <_printf_common>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f040 808d 	bne.w	8005f18 <_printf_float+0x1d4>
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005e02:	b00d      	add	sp, #52	; 0x34
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa fe8c 	bl	8000b2c <__aeabi_dcmpun>
 8005e14:	b110      	cbz	r0, 8005e1c <_printf_float+0xd8>
 8005e16:	4a8c      	ldr	r2, [pc, #560]	; (8006048 <_printf_float+0x304>)
 8005e18:	4b8c      	ldr	r3, [pc, #560]	; (800604c <_printf_float+0x308>)
 8005e1a:	e7da      	b.n	8005dd2 <_printf_float+0x8e>
 8005e1c:	6861      	ldr	r1, [r4, #4]
 8005e1e:	1c4b      	adds	r3, r1, #1
 8005e20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005e24:	a80a      	add	r0, sp, #40	; 0x28
 8005e26:	d13e      	bne.n	8005ea6 <_printf_float+0x162>
 8005e28:	2306      	movs	r3, #6
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005e32:	ab09      	add	r3, sp, #36	; 0x24
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	ec49 8b10 	vmov	d0, r8, r9
 8005e3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	f8cd a004 	str.w	sl, [sp, #4]
 8005e44:	6861      	ldr	r1, [r4, #4]
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7ff fee7 	bl	8005c1a <__cvt>
 8005e4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005e50:	2b47      	cmp	r3, #71	; 0x47
 8005e52:	4680      	mov	r8, r0
 8005e54:	d109      	bne.n	8005e6a <_printf_float+0x126>
 8005e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e58:	1cd8      	adds	r0, r3, #3
 8005e5a:	db02      	blt.n	8005e62 <_printf_float+0x11e>
 8005e5c:	6862      	ldr	r2, [r4, #4]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	dd47      	ble.n	8005ef2 <_printf_float+0x1ae>
 8005e62:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e66:	fa5f fa8a 	uxtb.w	sl, sl
 8005e6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e70:	d824      	bhi.n	8005ebc <_printf_float+0x178>
 8005e72:	3901      	subs	r1, #1
 8005e74:	4652      	mov	r2, sl
 8005e76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8005e7c:	f7ff ff2e 	bl	8005cdc <__exponent>
 8005e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e82:	1813      	adds	r3, r2, r0
 8005e84:	2a01      	cmp	r2, #1
 8005e86:	4681      	mov	r9, r0
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	dc02      	bgt.n	8005e92 <_printf_float+0x14e>
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	07d1      	lsls	r1, r2, #31
 8005e90:	d501      	bpl.n	8005e96 <_printf_float+0x152>
 8005e92:	3301      	adds	r3, #1
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0a5      	beq.n	8005dea <_printf_float+0xa6>
 8005e9e:	232d      	movs	r3, #45	; 0x2d
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	e7a1      	b.n	8005dea <_printf_float+0xa6>
 8005ea6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005eaa:	f000 8177 	beq.w	800619c <_printf_float+0x458>
 8005eae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005eb2:	d1bb      	bne.n	8005e2c <_printf_float+0xe8>
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d1b9      	bne.n	8005e2c <_printf_float+0xe8>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7b6      	b.n	8005e2a <_printf_float+0xe6>
 8005ebc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005ec0:	d119      	bne.n	8005ef6 <_printf_float+0x1b2>
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	dd0c      	ble.n	8005ee2 <_printf_float+0x19e>
 8005ec8:	6121      	str	r1, [r4, #16]
 8005eca:	b913      	cbnz	r3, 8005ed2 <_printf_float+0x18e>
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	07d2      	lsls	r2, r2, #31
 8005ed0:	d502      	bpl.n	8005ed8 <_printf_float+0x194>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	440b      	add	r3, r1
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eda:	65a3      	str	r3, [r4, #88]	; 0x58
 8005edc:	f04f 0900 	mov.w	r9, #0
 8005ee0:	e7d9      	b.n	8005e96 <_printf_float+0x152>
 8005ee2:	b913      	cbnz	r3, 8005eea <_printf_float+0x1a6>
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	07d0      	lsls	r0, r2, #31
 8005ee8:	d501      	bpl.n	8005eee <_printf_float+0x1aa>
 8005eea:	3302      	adds	r3, #2
 8005eec:	e7f3      	b.n	8005ed6 <_printf_float+0x192>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e7f1      	b.n	8005ed6 <_printf_float+0x192>
 8005ef2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005efa:	4293      	cmp	r3, r2
 8005efc:	db05      	blt.n	8005f0a <_printf_float+0x1c6>
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	07d1      	lsls	r1, r2, #31
 8005f04:	d5e8      	bpl.n	8005ed8 <_printf_float+0x194>
 8005f06:	3301      	adds	r3, #1
 8005f08:	e7e5      	b.n	8005ed6 <_printf_float+0x192>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfd4      	ite	le
 8005f0e:	f1c3 0302 	rsble	r3, r3, #2
 8005f12:	2301      	movgt	r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	e7de      	b.n	8005ed6 <_printf_float+0x192>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	055a      	lsls	r2, r3, #21
 8005f1c:	d407      	bmi.n	8005f2e <_printf_float+0x1ea>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	4642      	mov	r2, r8
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d12b      	bne.n	8005f84 <_printf_float+0x240>
 8005f2c:	e767      	b.n	8005dfe <_printf_float+0xba>
 8005f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005f32:	f240 80dc 	bls.w	80060ee <_printf_float+0x3aa>
 8005f36:	2200      	movs	r2, #0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f3e:	f7fa fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d033      	beq.n	8005fae <_printf_float+0x26a>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4a41      	ldr	r2, [pc, #260]	; (8006050 <_printf_float+0x30c>)
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f af54 	beq.w	8005dfe <_printf_float+0xba>
 8005f56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	db02      	blt.n	8005f64 <_printf_float+0x220>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	07d8      	lsls	r0, r3, #31
 8005f62:	d50f      	bpl.n	8005f84 <_printf_float+0x240>
 8005f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f af45 	beq.w	8005dfe <_printf_float+0xba>
 8005f74:	f04f 0800 	mov.w	r8, #0
 8005f78:	f104 091a 	add.w	r9, r4, #26
 8005f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	4543      	cmp	r3, r8
 8005f82:	dc09      	bgt.n	8005f98 <_printf_float+0x254>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	079b      	lsls	r3, r3, #30
 8005f88:	f100 8103 	bmi.w	8006192 <_printf_float+0x44e>
 8005f8c:	68e0      	ldr	r0, [r4, #12]
 8005f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f90:	4298      	cmp	r0, r3
 8005f92:	bfb8      	it	lt
 8005f94:	4618      	movlt	r0, r3
 8005f96:	e734      	b.n	8005e02 <_printf_float+0xbe>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	464a      	mov	r2, r9
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f af2b 	beq.w	8005dfe <_printf_float+0xba>
 8005fa8:	f108 0801 	add.w	r8, r8, #1
 8005fac:	e7e6      	b.n	8005f7c <_printf_float+0x238>
 8005fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dc2b      	bgt.n	800600c <_printf_float+0x2c8>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4a26      	ldr	r2, [pc, #152]	; (8006050 <_printf_float+0x30c>)
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af1d 	beq.w	8005dfe <_printf_float+0xba>
 8005fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc6:	b923      	cbnz	r3, 8005fd2 <_printf_float+0x28e>
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fca:	b913      	cbnz	r3, 8005fd2 <_printf_float+0x28e>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	07d9      	lsls	r1, r3, #31
 8005fd0:	d5d8      	bpl.n	8005f84 <_printf_float+0x240>
 8005fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f43f af0e 	beq.w	8005dfe <_printf_float+0xba>
 8005fe2:	f04f 0900 	mov.w	r9, #0
 8005fe6:	f104 0a1a 	add.w	sl, r4, #26
 8005fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fec:	425b      	negs	r3, r3
 8005fee:	454b      	cmp	r3, r9
 8005ff0:	dc01      	bgt.n	8005ff6 <_printf_float+0x2b2>
 8005ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff4:	e794      	b.n	8005f20 <_printf_float+0x1dc>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f aefc 	beq.w	8005dfe <_printf_float+0xba>
 8006006:	f109 0901 	add.w	r9, r9, #1
 800600a:	e7ee      	b.n	8005fea <_printf_float+0x2a6>
 800600c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800600e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006010:	429a      	cmp	r2, r3
 8006012:	bfa8      	it	ge
 8006014:	461a      	movge	r2, r3
 8006016:	2a00      	cmp	r2, #0
 8006018:	4691      	mov	r9, r2
 800601a:	dd07      	ble.n	800602c <_printf_float+0x2e8>
 800601c:	4613      	mov	r3, r2
 800601e:	4631      	mov	r1, r6
 8006020:	4642      	mov	r2, r8
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f aee9 	beq.w	8005dfe <_printf_float+0xba>
 800602c:	f104 031a 	add.w	r3, r4, #26
 8006030:	f04f 0b00 	mov.w	fp, #0
 8006034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006038:	9306      	str	r3, [sp, #24]
 800603a:	e015      	b.n	8006068 <_printf_float+0x324>
 800603c:	7fefffff 	.word	0x7fefffff
 8006040:	08009718 	.word	0x08009718
 8006044:	08009714 	.word	0x08009714
 8006048:	08009720 	.word	0x08009720
 800604c:	0800971c 	.word	0x0800971c
 8006050:	08009724 	.word	0x08009724
 8006054:	2301      	movs	r3, #1
 8006056:	9a06      	ldr	r2, [sp, #24]
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f aecd 	beq.w	8005dfe <_printf_float+0xba>
 8006064:	f10b 0b01 	add.w	fp, fp, #1
 8006068:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800606c:	ebaa 0309 	sub.w	r3, sl, r9
 8006070:	455b      	cmp	r3, fp
 8006072:	dcef      	bgt.n	8006054 <_printf_float+0x310>
 8006074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006078:	429a      	cmp	r2, r3
 800607a:	44d0      	add	r8, sl
 800607c:	db15      	blt.n	80060aa <_printf_float+0x366>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	07da      	lsls	r2, r3, #31
 8006082:	d412      	bmi.n	80060aa <_printf_float+0x366>
 8006084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006088:	eba3 020a 	sub.w	r2, r3, sl
 800608c:	eba3 0a01 	sub.w	sl, r3, r1
 8006090:	4592      	cmp	sl, r2
 8006092:	bfa8      	it	ge
 8006094:	4692      	movge	sl, r2
 8006096:	f1ba 0f00 	cmp.w	sl, #0
 800609a:	dc0e      	bgt.n	80060ba <_printf_float+0x376>
 800609c:	f04f 0800 	mov.w	r8, #0
 80060a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060a4:	f104 091a 	add.w	r9, r4, #26
 80060a8:	e019      	b.n	80060de <_printf_float+0x39a>
 80060aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d1e5      	bne.n	8006084 <_printf_float+0x340>
 80060b8:	e6a1      	b.n	8005dfe <_printf_float+0xba>
 80060ba:	4653      	mov	r3, sl
 80060bc:	4642      	mov	r2, r8
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	d1e9      	bne.n	800609c <_printf_float+0x358>
 80060c8:	e699      	b.n	8005dfe <_printf_float+0xba>
 80060ca:	2301      	movs	r3, #1
 80060cc:	464a      	mov	r2, r9
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f ae92 	beq.w	8005dfe <_printf_float+0xba>
 80060da:	f108 0801 	add.w	r8, r8, #1
 80060de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	eba3 030a 	sub.w	r3, r3, sl
 80060e8:	4543      	cmp	r3, r8
 80060ea:	dcee      	bgt.n	80060ca <_printf_float+0x386>
 80060ec:	e74a      	b.n	8005f84 <_printf_float+0x240>
 80060ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f0:	2a01      	cmp	r2, #1
 80060f2:	dc01      	bgt.n	80060f8 <_printf_float+0x3b4>
 80060f4:	07db      	lsls	r3, r3, #31
 80060f6:	d53a      	bpl.n	800616e <_printf_float+0x42a>
 80060f8:	2301      	movs	r3, #1
 80060fa:	4642      	mov	r2, r8
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	f43f ae7b 	beq.w	8005dfe <_printf_float+0xba>
 8006108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f108 0801 	add.w	r8, r8, #1
 8006118:	f43f ae71 	beq.w	8005dfe <_printf_float+0xba>
 800611c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800611e:	2200      	movs	r2, #0
 8006120:	f103 3aff 	add.w	sl, r3, #4294967295
 8006124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006128:	2300      	movs	r3, #0
 800612a:	f7fa fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800612e:	b9c8      	cbnz	r0, 8006164 <_printf_float+0x420>
 8006130:	4653      	mov	r3, sl
 8006132:	4642      	mov	r2, r8
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	d10e      	bne.n	800615c <_printf_float+0x418>
 800613e:	e65e      	b.n	8005dfe <_printf_float+0xba>
 8006140:	2301      	movs	r3, #1
 8006142:	4652      	mov	r2, sl
 8006144:	4631      	mov	r1, r6
 8006146:	4628      	mov	r0, r5
 8006148:	47b8      	blx	r7
 800614a:	3001      	adds	r0, #1
 800614c:	f43f ae57 	beq.w	8005dfe <_printf_float+0xba>
 8006150:	f108 0801 	add.w	r8, r8, #1
 8006154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006156:	3b01      	subs	r3, #1
 8006158:	4543      	cmp	r3, r8
 800615a:	dcf1      	bgt.n	8006140 <_printf_float+0x3fc>
 800615c:	464b      	mov	r3, r9
 800615e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006162:	e6de      	b.n	8005f22 <_printf_float+0x1de>
 8006164:	f04f 0800 	mov.w	r8, #0
 8006168:	f104 0a1a 	add.w	sl, r4, #26
 800616c:	e7f2      	b.n	8006154 <_printf_float+0x410>
 800616e:	2301      	movs	r3, #1
 8006170:	e7df      	b.n	8006132 <_printf_float+0x3ee>
 8006172:	2301      	movs	r3, #1
 8006174:	464a      	mov	r2, r9
 8006176:	4631      	mov	r1, r6
 8006178:	4628      	mov	r0, r5
 800617a:	47b8      	blx	r7
 800617c:	3001      	adds	r0, #1
 800617e:	f43f ae3e 	beq.w	8005dfe <_printf_float+0xba>
 8006182:	f108 0801 	add.w	r8, r8, #1
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	4543      	cmp	r3, r8
 800618e:	dcf0      	bgt.n	8006172 <_printf_float+0x42e>
 8006190:	e6fc      	b.n	8005f8c <_printf_float+0x248>
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	f104 0919 	add.w	r9, r4, #25
 800619a:	e7f4      	b.n	8006186 <_printf_float+0x442>
 800619c:	2900      	cmp	r1, #0
 800619e:	f43f ae8b 	beq.w	8005eb8 <_printf_float+0x174>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80061a8:	ab09      	add	r3, sp, #36	; 0x24
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	ec49 8b10 	vmov	d0, r8, r9
 80061b0:	6022      	str	r2, [r4, #0]
 80061b2:	f8cd a004 	str.w	sl, [sp, #4]
 80061b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061ba:	4628      	mov	r0, r5
 80061bc:	f7ff fd2d 	bl	8005c1a <__cvt>
 80061c0:	4680      	mov	r8, r0
 80061c2:	e648      	b.n	8005e56 <_printf_float+0x112>

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4691      	mov	r9, r2
 80061ca:	461f      	mov	r7, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	f8c9 3000 	str.w	r3, [r9]
 80061de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e2:	4606      	mov	r6, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	b112      	cbz	r2, 80061ee <_printf_common+0x2a>
 80061e8:	3301      	adds	r3, #1
 80061ea:	f8c9 3000 	str.w	r3, [r9]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	0699      	lsls	r1, r3, #26
 80061f2:	bf42      	ittt	mi
 80061f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061f8:	3302      	addmi	r3, #2
 80061fa:	f8c9 3000 	strmi.w	r3, [r9]
 80061fe:	6825      	ldr	r5, [r4, #0]
 8006200:	f015 0506 	ands.w	r5, r5, #6
 8006204:	d107      	bne.n	8006216 <_printf_common+0x52>
 8006206:	f104 0a19 	add.w	sl, r4, #25
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	f8d9 2000 	ldr.w	r2, [r9]
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	42ab      	cmp	r3, r5
 8006214:	dc28      	bgt.n	8006268 <_printf_common+0xa4>
 8006216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	3300      	adds	r3, #0
 800621e:	bf18      	it	ne
 8006220:	2301      	movne	r3, #1
 8006222:	0692      	lsls	r2, r2, #26
 8006224:	d42d      	bmi.n	8006282 <_printf_common+0xbe>
 8006226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800622a:	4639      	mov	r1, r7
 800622c:	4630      	mov	r0, r6
 800622e:	47c0      	blx	r8
 8006230:	3001      	adds	r0, #1
 8006232:	d020      	beq.n	8006276 <_printf_common+0xb2>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	68e5      	ldr	r5, [r4, #12]
 8006238:	f8d9 2000 	ldr.w	r2, [r9]
 800623c:	f003 0306 	and.w	r3, r3, #6
 8006240:	2b04      	cmp	r3, #4
 8006242:	bf08      	it	eq
 8006244:	1aad      	subeq	r5, r5, r2
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	6922      	ldr	r2, [r4, #16]
 800624a:	bf0c      	ite	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	2500      	movne	r5, #0
 8006252:	4293      	cmp	r3, r2
 8006254:	bfc4      	itt	gt
 8006256:	1a9b      	subgt	r3, r3, r2
 8006258:	18ed      	addgt	r5, r5, r3
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	341a      	adds	r4, #26
 8006260:	454d      	cmp	r5, r9
 8006262:	d11a      	bne.n	800629a <_printf_common+0xd6>
 8006264:	2000      	movs	r0, #0
 8006266:	e008      	b.n	800627a <_printf_common+0xb6>
 8006268:	2301      	movs	r3, #1
 800626a:	4652      	mov	r2, sl
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	47c0      	blx	r8
 8006272:	3001      	adds	r0, #1
 8006274:	d103      	bne.n	800627e <_printf_common+0xba>
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627e:	3501      	adds	r5, #1
 8006280:	e7c3      	b.n	800620a <_printf_common+0x46>
 8006282:	18e1      	adds	r1, r4, r3
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	2030      	movs	r0, #48	; 0x30
 8006288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800628c:	4422      	add	r2, r4
 800628e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006296:	3302      	adds	r3, #2
 8006298:	e7c5      	b.n	8006226 <_printf_common+0x62>
 800629a:	2301      	movs	r3, #1
 800629c:	4622      	mov	r2, r4
 800629e:	4639      	mov	r1, r7
 80062a0:	4630      	mov	r0, r6
 80062a2:	47c0      	blx	r8
 80062a4:	3001      	adds	r0, #1
 80062a6:	d0e6      	beq.n	8006276 <_printf_common+0xb2>
 80062a8:	f109 0901 	add.w	r9, r9, #1
 80062ac:	e7d8      	b.n	8006260 <_printf_common+0x9c>
	...

080062b0 <_printf_i>:
 80062b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062b8:	460c      	mov	r4, r1
 80062ba:	7e09      	ldrb	r1, [r1, #24]
 80062bc:	b085      	sub	sp, #20
 80062be:	296e      	cmp	r1, #110	; 0x6e
 80062c0:	4617      	mov	r7, r2
 80062c2:	4606      	mov	r6, r0
 80062c4:	4698      	mov	r8, r3
 80062c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062c8:	f000 80b3 	beq.w	8006432 <_printf_i+0x182>
 80062cc:	d822      	bhi.n	8006314 <_printf_i+0x64>
 80062ce:	2963      	cmp	r1, #99	; 0x63
 80062d0:	d036      	beq.n	8006340 <_printf_i+0x90>
 80062d2:	d80a      	bhi.n	80062ea <_printf_i+0x3a>
 80062d4:	2900      	cmp	r1, #0
 80062d6:	f000 80b9 	beq.w	800644c <_printf_i+0x19c>
 80062da:	2958      	cmp	r1, #88	; 0x58
 80062dc:	f000 8083 	beq.w	80063e6 <_printf_i+0x136>
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062e8:	e032      	b.n	8006350 <_printf_i+0xa0>
 80062ea:	2964      	cmp	r1, #100	; 0x64
 80062ec:	d001      	beq.n	80062f2 <_printf_i+0x42>
 80062ee:	2969      	cmp	r1, #105	; 0x69
 80062f0:	d1f6      	bne.n	80062e0 <_printf_i+0x30>
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	6813      	ldr	r3, [r2, #0]
 80062f6:	0605      	lsls	r5, r0, #24
 80062f8:	f103 0104 	add.w	r1, r3, #4
 80062fc:	d52a      	bpl.n	8006354 <_printf_i+0xa4>
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	da03      	bge.n	800630e <_printf_i+0x5e>
 8006306:	222d      	movs	r2, #45	; 0x2d
 8006308:	425b      	negs	r3, r3
 800630a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800630e:	486f      	ldr	r0, [pc, #444]	; (80064cc <_printf_i+0x21c>)
 8006310:	220a      	movs	r2, #10
 8006312:	e039      	b.n	8006388 <_printf_i+0xd8>
 8006314:	2973      	cmp	r1, #115	; 0x73
 8006316:	f000 809d 	beq.w	8006454 <_printf_i+0x1a4>
 800631a:	d808      	bhi.n	800632e <_printf_i+0x7e>
 800631c:	296f      	cmp	r1, #111	; 0x6f
 800631e:	d020      	beq.n	8006362 <_printf_i+0xb2>
 8006320:	2970      	cmp	r1, #112	; 0x70
 8006322:	d1dd      	bne.n	80062e0 <_printf_i+0x30>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	f043 0320 	orr.w	r3, r3, #32
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	e003      	b.n	8006336 <_printf_i+0x86>
 800632e:	2975      	cmp	r1, #117	; 0x75
 8006330:	d017      	beq.n	8006362 <_printf_i+0xb2>
 8006332:	2978      	cmp	r1, #120	; 0x78
 8006334:	d1d4      	bne.n	80062e0 <_printf_i+0x30>
 8006336:	2378      	movs	r3, #120	; 0x78
 8006338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800633c:	4864      	ldr	r0, [pc, #400]	; (80064d0 <_printf_i+0x220>)
 800633e:	e055      	b.n	80063ec <_printf_i+0x13c>
 8006340:	6813      	ldr	r3, [r2, #0]
 8006342:	1d19      	adds	r1, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6011      	str	r1, [r2, #0]
 8006348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006350:	2301      	movs	r3, #1
 8006352:	e08c      	b.n	800646e <_printf_i+0x1be>
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6011      	str	r1, [r2, #0]
 8006358:	f010 0f40 	tst.w	r0, #64	; 0x40
 800635c:	bf18      	it	ne
 800635e:	b21b      	sxthne	r3, r3
 8006360:	e7cf      	b.n	8006302 <_printf_i+0x52>
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	6825      	ldr	r5, [r4, #0]
 8006366:	1d18      	adds	r0, r3, #4
 8006368:	6010      	str	r0, [r2, #0]
 800636a:	0628      	lsls	r0, r5, #24
 800636c:	d501      	bpl.n	8006372 <_printf_i+0xc2>
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0xc8>
 8006372:	0668      	lsls	r0, r5, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0xbe>
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	4854      	ldr	r0, [pc, #336]	; (80064cc <_printf_i+0x21c>)
 800637a:	296f      	cmp	r1, #111	; 0x6f
 800637c:	bf14      	ite	ne
 800637e:	220a      	movne	r2, #10
 8006380:	2208      	moveq	r2, #8
 8006382:	2100      	movs	r1, #0
 8006384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006388:	6865      	ldr	r5, [r4, #4]
 800638a:	60a5      	str	r5, [r4, #8]
 800638c:	2d00      	cmp	r5, #0
 800638e:	f2c0 8095 	blt.w	80064bc <_printf_i+0x20c>
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	f021 0104 	bic.w	r1, r1, #4
 8006398:	6021      	str	r1, [r4, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d13d      	bne.n	800641a <_printf_i+0x16a>
 800639e:	2d00      	cmp	r5, #0
 80063a0:	f040 808e 	bne.w	80064c0 <_printf_i+0x210>
 80063a4:	4665      	mov	r5, ip
 80063a6:	2a08      	cmp	r2, #8
 80063a8:	d10b      	bne.n	80063c2 <_printf_i+0x112>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	07db      	lsls	r3, r3, #31
 80063ae:	d508      	bpl.n	80063c2 <_printf_i+0x112>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bfde      	ittt	le
 80063b8:	2330      	movle	r3, #48	; 0x30
 80063ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063c2:	ebac 0305 	sub.w	r3, ip, r5
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	f8cd 8000 	str.w	r8, [sp]
 80063cc:	463b      	mov	r3, r7
 80063ce:	aa03      	add	r2, sp, #12
 80063d0:	4621      	mov	r1, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff fef6 	bl	80061c4 <_printf_common>
 80063d8:	3001      	adds	r0, #1
 80063da:	d14d      	bne.n	8006478 <_printf_i+0x1c8>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	b005      	add	sp, #20
 80063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e6:	4839      	ldr	r0, [pc, #228]	; (80064cc <_printf_i+0x21c>)
 80063e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	6821      	ldr	r1, [r4, #0]
 80063f0:	1d1d      	adds	r5, r3, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6015      	str	r5, [r2, #0]
 80063f6:	060a      	lsls	r2, r1, #24
 80063f8:	d50b      	bpl.n	8006412 <_printf_i+0x162>
 80063fa:	07ca      	lsls	r2, r1, #31
 80063fc:	bf44      	itt	mi
 80063fe:	f041 0120 	orrmi.w	r1, r1, #32
 8006402:	6021      	strmi	r1, [r4, #0]
 8006404:	b91b      	cbnz	r3, 800640e <_printf_i+0x15e>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	f022 0220 	bic.w	r2, r2, #32
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	e7b7      	b.n	8006382 <_printf_i+0xd2>
 8006412:	064d      	lsls	r5, r1, #25
 8006414:	bf48      	it	mi
 8006416:	b29b      	uxthmi	r3, r3
 8006418:	e7ef      	b.n	80063fa <_printf_i+0x14a>
 800641a:	4665      	mov	r5, ip
 800641c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006420:	fb02 3311 	mls	r3, r2, r1, r3
 8006424:	5cc3      	ldrb	r3, [r0, r3]
 8006426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800642a:	460b      	mov	r3, r1
 800642c:	2900      	cmp	r1, #0
 800642e:	d1f5      	bne.n	800641c <_printf_i+0x16c>
 8006430:	e7b9      	b.n	80063a6 <_printf_i+0xf6>
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	6961      	ldr	r1, [r4, #20]
 8006438:	1d18      	adds	r0, r3, #4
 800643a:	6010      	str	r0, [r2, #0]
 800643c:	0628      	lsls	r0, r5, #24
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	d501      	bpl.n	8006446 <_printf_i+0x196>
 8006442:	6019      	str	r1, [r3, #0]
 8006444:	e002      	b.n	800644c <_printf_i+0x19c>
 8006446:	066a      	lsls	r2, r5, #25
 8006448:	d5fb      	bpl.n	8006442 <_printf_i+0x192>
 800644a:	8019      	strh	r1, [r3, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	4665      	mov	r5, ip
 8006452:	e7b9      	b.n	80063c8 <_printf_i+0x118>
 8006454:	6813      	ldr	r3, [r2, #0]
 8006456:	1d19      	adds	r1, r3, #4
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	681d      	ldr	r5, [r3, #0]
 800645c:	6862      	ldr	r2, [r4, #4]
 800645e:	2100      	movs	r1, #0
 8006460:	4628      	mov	r0, r5
 8006462:	f7f9 febd 	bl	80001e0 <memchr>
 8006466:	b108      	cbz	r0, 800646c <_printf_i+0x1bc>
 8006468:	1b40      	subs	r0, r0, r5
 800646a:	6060      	str	r0, [r4, #4]
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	2300      	movs	r3, #0
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	e7a7      	b.n	80063c8 <_printf_i+0x118>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	462a      	mov	r2, r5
 800647c:	4639      	mov	r1, r7
 800647e:	4630      	mov	r0, r6
 8006480:	47c0      	blx	r8
 8006482:	3001      	adds	r0, #1
 8006484:	d0aa      	beq.n	80063dc <_printf_i+0x12c>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	079b      	lsls	r3, r3, #30
 800648a:	d413      	bmi.n	80064b4 <_printf_i+0x204>
 800648c:	68e0      	ldr	r0, [r4, #12]
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	4298      	cmp	r0, r3
 8006492:	bfb8      	it	lt
 8006494:	4618      	movlt	r0, r3
 8006496:	e7a3      	b.n	80063e0 <_printf_i+0x130>
 8006498:	2301      	movs	r3, #1
 800649a:	464a      	mov	r2, r9
 800649c:	4639      	mov	r1, r7
 800649e:	4630      	mov	r0, r6
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d09a      	beq.n	80063dc <_printf_i+0x12c>
 80064a6:	3501      	adds	r5, #1
 80064a8:	68e3      	ldr	r3, [r4, #12]
 80064aa:	9a03      	ldr	r2, [sp, #12]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	42ab      	cmp	r3, r5
 80064b0:	dcf2      	bgt.n	8006498 <_printf_i+0x1e8>
 80064b2:	e7eb      	b.n	800648c <_printf_i+0x1dc>
 80064b4:	2500      	movs	r5, #0
 80064b6:	f104 0919 	add.w	r9, r4, #25
 80064ba:	e7f5      	b.n	80064a8 <_printf_i+0x1f8>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ac      	bne.n	800641a <_printf_i+0x16a>
 80064c0:	7803      	ldrb	r3, [r0, #0]
 80064c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ca:	e76c      	b.n	80063a6 <_printf_i+0xf6>
 80064cc:	08009726 	.word	0x08009726
 80064d0:	08009737 	.word	0x08009737

080064d4 <_scanf_float>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	469a      	mov	sl, r3
 80064da:	688b      	ldr	r3, [r1, #8]
 80064dc:	4616      	mov	r6, r2
 80064de:	1e5a      	subs	r2, r3, #1
 80064e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064e4:	b087      	sub	sp, #28
 80064e6:	bf83      	ittte	hi
 80064e8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80064ec:	189b      	addhi	r3, r3, r2
 80064ee:	9301      	strhi	r3, [sp, #4]
 80064f0:	2300      	movls	r3, #0
 80064f2:	bf86      	itte	hi
 80064f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064f8:	608b      	strhi	r3, [r1, #8]
 80064fa:	9301      	strls	r3, [sp, #4]
 80064fc:	680b      	ldr	r3, [r1, #0]
 80064fe:	4688      	mov	r8, r1
 8006500:	f04f 0b00 	mov.w	fp, #0
 8006504:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006508:	f848 3b1c 	str.w	r3, [r8], #28
 800650c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006510:	4607      	mov	r7, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4645      	mov	r5, r8
 8006516:	465a      	mov	r2, fp
 8006518:	46d9      	mov	r9, fp
 800651a:	f8cd b008 	str.w	fp, [sp, #8]
 800651e:	68a1      	ldr	r1, [r4, #8]
 8006520:	b181      	cbz	r1, 8006544 <_scanf_float+0x70>
 8006522:	6833      	ldr	r3, [r6, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b49      	cmp	r3, #73	; 0x49
 8006528:	d071      	beq.n	800660e <_scanf_float+0x13a>
 800652a:	d84d      	bhi.n	80065c8 <_scanf_float+0xf4>
 800652c:	2b39      	cmp	r3, #57	; 0x39
 800652e:	d840      	bhi.n	80065b2 <_scanf_float+0xde>
 8006530:	2b31      	cmp	r3, #49	; 0x31
 8006532:	f080 8088 	bcs.w	8006646 <_scanf_float+0x172>
 8006536:	2b2d      	cmp	r3, #45	; 0x2d
 8006538:	f000 8090 	beq.w	800665c <_scanf_float+0x188>
 800653c:	d815      	bhi.n	800656a <_scanf_float+0x96>
 800653e:	2b2b      	cmp	r3, #43	; 0x2b
 8006540:	f000 808c 	beq.w	800665c <_scanf_float+0x188>
 8006544:	f1b9 0f00 	cmp.w	r9, #0
 8006548:	d003      	beq.n	8006552 <_scanf_float+0x7e>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	3a01      	subs	r2, #1
 8006554:	2a01      	cmp	r2, #1
 8006556:	f200 80ea 	bhi.w	800672e <_scanf_float+0x25a>
 800655a:	4545      	cmp	r5, r8
 800655c:	f200 80dc 	bhi.w	8006718 <_scanf_float+0x244>
 8006560:	2601      	movs	r6, #1
 8006562:	4630      	mov	r0, r6
 8006564:	b007      	add	sp, #28
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	2b2e      	cmp	r3, #46	; 0x2e
 800656c:	f000 809f 	beq.w	80066ae <_scanf_float+0x1da>
 8006570:	2b30      	cmp	r3, #48	; 0x30
 8006572:	d1e7      	bne.n	8006544 <_scanf_float+0x70>
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	f410 7f80 	tst.w	r0, #256	; 0x100
 800657a:	d064      	beq.n	8006646 <_scanf_float+0x172>
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	f109 0901 	add.w	r9, r9, #1
 8006588:	b11b      	cbz	r3, 8006592 <_scanf_float+0xbe>
 800658a:	3b01      	subs	r3, #1
 800658c:	3101      	adds	r1, #1
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	60a1      	str	r1, [r4, #8]
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	3b01      	subs	r3, #1
 8006596:	60a3      	str	r3, [r4, #8]
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	6873      	ldr	r3, [r6, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	6073      	str	r3, [r6, #4]
 80065a6:	f340 80ac 	ble.w	8006702 <_scanf_float+0x22e>
 80065aa:	6833      	ldr	r3, [r6, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	e7b5      	b.n	800651e <_scanf_float+0x4a>
 80065b2:	2b45      	cmp	r3, #69	; 0x45
 80065b4:	f000 8085 	beq.w	80066c2 <_scanf_float+0x1ee>
 80065b8:	2b46      	cmp	r3, #70	; 0x46
 80065ba:	d06a      	beq.n	8006692 <_scanf_float+0x1be>
 80065bc:	2b41      	cmp	r3, #65	; 0x41
 80065be:	d1c1      	bne.n	8006544 <_scanf_float+0x70>
 80065c0:	2a01      	cmp	r2, #1
 80065c2:	d1bf      	bne.n	8006544 <_scanf_float+0x70>
 80065c4:	2202      	movs	r2, #2
 80065c6:	e046      	b.n	8006656 <_scanf_float+0x182>
 80065c8:	2b65      	cmp	r3, #101	; 0x65
 80065ca:	d07a      	beq.n	80066c2 <_scanf_float+0x1ee>
 80065cc:	d818      	bhi.n	8006600 <_scanf_float+0x12c>
 80065ce:	2b54      	cmp	r3, #84	; 0x54
 80065d0:	d066      	beq.n	80066a0 <_scanf_float+0x1cc>
 80065d2:	d811      	bhi.n	80065f8 <_scanf_float+0x124>
 80065d4:	2b4e      	cmp	r3, #78	; 0x4e
 80065d6:	d1b5      	bne.n	8006544 <_scanf_float+0x70>
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d146      	bne.n	800666a <_scanf_float+0x196>
 80065dc:	f1b9 0f00 	cmp.w	r9, #0
 80065e0:	d145      	bne.n	800666e <_scanf_float+0x19a>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80065e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80065ec:	d13f      	bne.n	800666e <_scanf_float+0x19a>
 80065ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80065f2:	6021      	str	r1, [r4, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	e02e      	b.n	8006656 <_scanf_float+0x182>
 80065f8:	2b59      	cmp	r3, #89	; 0x59
 80065fa:	d01e      	beq.n	800663a <_scanf_float+0x166>
 80065fc:	2b61      	cmp	r3, #97	; 0x61
 80065fe:	e7de      	b.n	80065be <_scanf_float+0xea>
 8006600:	2b6e      	cmp	r3, #110	; 0x6e
 8006602:	d0e9      	beq.n	80065d8 <_scanf_float+0x104>
 8006604:	d815      	bhi.n	8006632 <_scanf_float+0x15e>
 8006606:	2b66      	cmp	r3, #102	; 0x66
 8006608:	d043      	beq.n	8006692 <_scanf_float+0x1be>
 800660a:	2b69      	cmp	r3, #105	; 0x69
 800660c:	d19a      	bne.n	8006544 <_scanf_float+0x70>
 800660e:	f1bb 0f00 	cmp.w	fp, #0
 8006612:	d138      	bne.n	8006686 <_scanf_float+0x1b2>
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	d197      	bne.n	800654a <_scanf_float+0x76>
 800661a:	6821      	ldr	r1, [r4, #0]
 800661c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006620:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006624:	d195      	bne.n	8006552 <_scanf_float+0x7e>
 8006626:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800662a:	6021      	str	r1, [r4, #0]
 800662c:	f04f 0b01 	mov.w	fp, #1
 8006630:	e011      	b.n	8006656 <_scanf_float+0x182>
 8006632:	2b74      	cmp	r3, #116	; 0x74
 8006634:	d034      	beq.n	80066a0 <_scanf_float+0x1cc>
 8006636:	2b79      	cmp	r3, #121	; 0x79
 8006638:	d184      	bne.n	8006544 <_scanf_float+0x70>
 800663a:	f1bb 0f07 	cmp.w	fp, #7
 800663e:	d181      	bne.n	8006544 <_scanf_float+0x70>
 8006640:	f04f 0b08 	mov.w	fp, #8
 8006644:	e007      	b.n	8006656 <_scanf_float+0x182>
 8006646:	eb12 0f0b 	cmn.w	r2, fp
 800664a:	f47f af7b 	bne.w	8006544 <_scanf_float+0x70>
 800664e:	6821      	ldr	r1, [r4, #0]
 8006650:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006654:	6021      	str	r1, [r4, #0]
 8006656:	702b      	strb	r3, [r5, #0]
 8006658:	3501      	adds	r5, #1
 800665a:	e79a      	b.n	8006592 <_scanf_float+0xbe>
 800665c:	6821      	ldr	r1, [r4, #0]
 800665e:	0608      	lsls	r0, r1, #24
 8006660:	f57f af70 	bpl.w	8006544 <_scanf_float+0x70>
 8006664:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006668:	e7f4      	b.n	8006654 <_scanf_float+0x180>
 800666a:	2a02      	cmp	r2, #2
 800666c:	d047      	beq.n	80066fe <_scanf_float+0x22a>
 800666e:	f1bb 0f01 	cmp.w	fp, #1
 8006672:	d003      	beq.n	800667c <_scanf_float+0x1a8>
 8006674:	f1bb 0f04 	cmp.w	fp, #4
 8006678:	f47f af64 	bne.w	8006544 <_scanf_float+0x70>
 800667c:	f10b 0b01 	add.w	fp, fp, #1
 8006680:	fa5f fb8b 	uxtb.w	fp, fp
 8006684:	e7e7      	b.n	8006656 <_scanf_float+0x182>
 8006686:	f1bb 0f03 	cmp.w	fp, #3
 800668a:	d0f7      	beq.n	800667c <_scanf_float+0x1a8>
 800668c:	f1bb 0f05 	cmp.w	fp, #5
 8006690:	e7f2      	b.n	8006678 <_scanf_float+0x1a4>
 8006692:	f1bb 0f02 	cmp.w	fp, #2
 8006696:	f47f af55 	bne.w	8006544 <_scanf_float+0x70>
 800669a:	f04f 0b03 	mov.w	fp, #3
 800669e:	e7da      	b.n	8006656 <_scanf_float+0x182>
 80066a0:	f1bb 0f06 	cmp.w	fp, #6
 80066a4:	f47f af4e 	bne.w	8006544 <_scanf_float+0x70>
 80066a8:	f04f 0b07 	mov.w	fp, #7
 80066ac:	e7d3      	b.n	8006656 <_scanf_float+0x182>
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	0588      	lsls	r0, r1, #22
 80066b2:	f57f af47 	bpl.w	8006544 <_scanf_float+0x70>
 80066b6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80066ba:	6021      	str	r1, [r4, #0]
 80066bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80066c0:	e7c9      	b.n	8006656 <_scanf_float+0x182>
 80066c2:	6821      	ldr	r1, [r4, #0]
 80066c4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80066c8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80066cc:	d006      	beq.n	80066dc <_scanf_float+0x208>
 80066ce:	0548      	lsls	r0, r1, #21
 80066d0:	f57f af38 	bpl.w	8006544 <_scanf_float+0x70>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	f43f af3b 	beq.w	8006552 <_scanf_float+0x7e>
 80066dc:	0588      	lsls	r0, r1, #22
 80066de:	bf58      	it	pl
 80066e0:	9802      	ldrpl	r0, [sp, #8]
 80066e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80066e6:	bf58      	it	pl
 80066e8:	eba9 0000 	subpl.w	r0, r9, r0
 80066ec:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80066f0:	bf58      	it	pl
 80066f2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80066f6:	6021      	str	r1, [r4, #0]
 80066f8:	f04f 0900 	mov.w	r9, #0
 80066fc:	e7ab      	b.n	8006656 <_scanf_float+0x182>
 80066fe:	2203      	movs	r2, #3
 8006700:	e7a9      	b.n	8006656 <_scanf_float+0x182>
 8006702:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006706:	9205      	str	r2, [sp, #20]
 8006708:	4631      	mov	r1, r6
 800670a:	4638      	mov	r0, r7
 800670c:	4798      	blx	r3
 800670e:	9a05      	ldr	r2, [sp, #20]
 8006710:	2800      	cmp	r0, #0
 8006712:	f43f af04 	beq.w	800651e <_scanf_float+0x4a>
 8006716:	e715      	b.n	8006544 <_scanf_float+0x70>
 8006718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800671c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006720:	4632      	mov	r2, r6
 8006722:	4638      	mov	r0, r7
 8006724:	4798      	blx	r3
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	e715      	b.n	800655a <_scanf_float+0x86>
 800672e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006732:	2b06      	cmp	r3, #6
 8006734:	d80a      	bhi.n	800674c <_scanf_float+0x278>
 8006736:	f1bb 0f02 	cmp.w	fp, #2
 800673a:	d968      	bls.n	800680e <_scanf_float+0x33a>
 800673c:	f1ab 0b03 	sub.w	fp, fp, #3
 8006740:	fa5f fb8b 	uxtb.w	fp, fp
 8006744:	eba5 0b0b 	sub.w	fp, r5, fp
 8006748:	455d      	cmp	r5, fp
 800674a:	d14b      	bne.n	80067e4 <_scanf_float+0x310>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	05da      	lsls	r2, r3, #23
 8006750:	d51f      	bpl.n	8006792 <_scanf_float+0x2be>
 8006752:	055b      	lsls	r3, r3, #21
 8006754:	d468      	bmi.n	8006828 <_scanf_float+0x354>
 8006756:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	2965      	cmp	r1, #101	; 0x65
 800675e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006762:	f105 3bff 	add.w	fp, r5, #4294967295
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	d00d      	beq.n	8006786 <_scanf_float+0x2b2>
 800676a:	2945      	cmp	r1, #69	; 0x45
 800676c:	d00b      	beq.n	8006786 <_scanf_float+0x2b2>
 800676e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006772:	4632      	mov	r2, r6
 8006774:	4638      	mov	r0, r7
 8006776:	4798      	blx	r3
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800677e:	3b01      	subs	r3, #1
 8006780:	f1a5 0b02 	sub.w	fp, r5, #2
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800678a:	4632      	mov	r2, r6
 800678c:	4638      	mov	r0, r7
 800678e:	4798      	blx	r3
 8006790:	465d      	mov	r5, fp
 8006792:	6826      	ldr	r6, [r4, #0]
 8006794:	f016 0610 	ands.w	r6, r6, #16
 8006798:	d17a      	bne.n	8006890 <_scanf_float+0x3bc>
 800679a:	702e      	strb	r6, [r5, #0]
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d142      	bne.n	800682e <_scanf_float+0x35a>
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	eba9 0303 	sub.w	r3, r9, r3
 80067ae:	425a      	negs	r2, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d149      	bne.n	8006848 <_scanf_float+0x374>
 80067b4:	2200      	movs	r2, #0
 80067b6:	4641      	mov	r1, r8
 80067b8:	4638      	mov	r0, r7
 80067ba:	f000 fea5 	bl	8007508 <_strtod_r>
 80067be:	6825      	ldr	r5, [r4, #0]
 80067c0:	f8da 3000 	ldr.w	r3, [sl]
 80067c4:	f015 0f02 	tst.w	r5, #2
 80067c8:	f103 0204 	add.w	r2, r3, #4
 80067cc:	ec59 8b10 	vmov	r8, r9, d0
 80067d0:	f8ca 2000 	str.w	r2, [sl]
 80067d4:	d043      	beq.n	800685e <_scanf_float+0x38a>
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	e9c3 8900 	strd	r8, r9, [r3]
 80067dc:	68e3      	ldr	r3, [r4, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60e3      	str	r3, [r4, #12]
 80067e2:	e6be      	b.n	8006562 <_scanf_float+0x8e>
 80067e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80067ec:	4632      	mov	r2, r6
 80067ee:	4638      	mov	r0, r7
 80067f0:	4798      	blx	r3
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	e7a6      	b.n	8006748 <_scanf_float+0x274>
 80067fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067fe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006802:	4632      	mov	r2, r6
 8006804:	4638      	mov	r0, r7
 8006806:	4798      	blx	r3
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	4545      	cmp	r5, r8
 8006810:	d8f3      	bhi.n	80067fa <_scanf_float+0x326>
 8006812:	e6a5      	b.n	8006560 <_scanf_float+0x8c>
 8006814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006818:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800681c:	4632      	mov	r2, r6
 800681e:	4638      	mov	r0, r7
 8006820:	4798      	blx	r3
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	4545      	cmp	r5, r8
 800682a:	d8f3      	bhi.n	8006814 <_scanf_float+0x340>
 800682c:	e698      	b.n	8006560 <_scanf_float+0x8c>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0bf      	beq.n	80067b4 <_scanf_float+0x2e0>
 8006834:	9904      	ldr	r1, [sp, #16]
 8006836:	230a      	movs	r3, #10
 8006838:	4632      	mov	r2, r6
 800683a:	3101      	adds	r1, #1
 800683c:	4638      	mov	r0, r7
 800683e:	f000 feef 	bl	8007620 <_strtol_r>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	9d04      	ldr	r5, [sp, #16]
 8006846:	1ac2      	subs	r2, r0, r3
 8006848:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800684c:	429d      	cmp	r5, r3
 800684e:	bf28      	it	cs
 8006850:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006854:	490f      	ldr	r1, [pc, #60]	; (8006894 <_scanf_float+0x3c0>)
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f824 	bl	80068a4 <siprintf>
 800685c:	e7aa      	b.n	80067b4 <_scanf_float+0x2e0>
 800685e:	f015 0504 	ands.w	r5, r5, #4
 8006862:	d1b8      	bne.n	80067d6 <_scanf_float+0x302>
 8006864:	681f      	ldr	r7, [r3, #0]
 8006866:	ee10 2a10 	vmov	r2, s0
 800686a:	464b      	mov	r3, r9
 800686c:	ee10 0a10 	vmov	r0, s0
 8006870:	4649      	mov	r1, r9
 8006872:	f7fa f95b 	bl	8000b2c <__aeabi_dcmpun>
 8006876:	b128      	cbz	r0, 8006884 <_scanf_float+0x3b0>
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f80d 	bl	8006898 <nanf>
 800687e:	ed87 0a00 	vstr	s0, [r7]
 8006882:	e7ab      	b.n	80067dc <_scanf_float+0x308>
 8006884:	4640      	mov	r0, r8
 8006886:	4649      	mov	r1, r9
 8006888:	f7fa f9ae 	bl	8000be8 <__aeabi_d2f>
 800688c:	6038      	str	r0, [r7, #0]
 800688e:	e7a5      	b.n	80067dc <_scanf_float+0x308>
 8006890:	2600      	movs	r6, #0
 8006892:	e666      	b.n	8006562 <_scanf_float+0x8e>
 8006894:	08009748 	.word	0x08009748

08006898 <nanf>:
 8006898:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068a0 <nanf+0x8>
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	7fc00000 	.word	0x7fc00000

080068a4 <siprintf>:
 80068a4:	b40e      	push	{r1, r2, r3}
 80068a6:	b500      	push	{lr}
 80068a8:	b09c      	sub	sp, #112	; 0x70
 80068aa:	ab1d      	add	r3, sp, #116	; 0x74
 80068ac:	9002      	str	r0, [sp, #8]
 80068ae:	9006      	str	r0, [sp, #24]
 80068b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068b4:	4809      	ldr	r0, [pc, #36]	; (80068dc <siprintf+0x38>)
 80068b6:	9107      	str	r1, [sp, #28]
 80068b8:	9104      	str	r1, [sp, #16]
 80068ba:	4909      	ldr	r1, [pc, #36]	; (80068e0 <siprintf+0x3c>)
 80068bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c0:	9105      	str	r1, [sp, #20]
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	a902      	add	r1, sp, #8
 80068c8:	f002 fd66 	bl	8009398 <_svfiprintf_r>
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	b01c      	add	sp, #112	; 0x70
 80068d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d8:	b003      	add	sp, #12
 80068da:	4770      	bx	lr
 80068dc:	20000010 	.word	0x20000010
 80068e0:	ffff0208 	.word	0xffff0208

080068e4 <sulp>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	ec45 4b10 	vmov	d0, r4, r5
 80068ee:	4616      	mov	r6, r2
 80068f0:	f002 fb0e 	bl	8008f10 <__ulp>
 80068f4:	ec51 0b10 	vmov	r0, r1, d0
 80068f8:	b17e      	cbz	r6, 800691a <sulp+0x36>
 80068fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd09      	ble.n	800691a <sulp+0x36>
 8006906:	051b      	lsls	r3, r3, #20
 8006908:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800690c:	2400      	movs	r4, #0
 800690e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006912:	4622      	mov	r2, r4
 8006914:	462b      	mov	r3, r5
 8006916:	f7f9 fe6f 	bl	80005f8 <__aeabi_dmul>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	0000      	movs	r0, r0
	...

08006920 <_strtod_l>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	461f      	mov	r7, r3
 8006926:	b0a1      	sub	sp, #132	; 0x84
 8006928:	2300      	movs	r3, #0
 800692a:	4681      	mov	r9, r0
 800692c:	4638      	mov	r0, r7
 800692e:	460e      	mov	r6, r1
 8006930:	9217      	str	r2, [sp, #92]	; 0x5c
 8006932:	931c      	str	r3, [sp, #112]	; 0x70
 8006934:	f001 fff5 	bl	8008922 <__localeconv_l>
 8006938:	4680      	mov	r8, r0
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	f7f9 fc48 	bl	80001d0 <strlen>
 8006940:	f04f 0a00 	mov.w	sl, #0
 8006944:	4604      	mov	r4, r0
 8006946:	f04f 0b00 	mov.w	fp, #0
 800694a:	961b      	str	r6, [sp, #108]	; 0x6c
 800694c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	2a0d      	cmp	r2, #13
 8006952:	d832      	bhi.n	80069ba <_strtod_l+0x9a>
 8006954:	2a09      	cmp	r2, #9
 8006956:	d236      	bcs.n	80069c6 <_strtod_l+0xa6>
 8006958:	2a00      	cmp	r2, #0
 800695a:	d03e      	beq.n	80069da <_strtod_l+0xba>
 800695c:	2300      	movs	r3, #0
 800695e:	930d      	str	r3, [sp, #52]	; 0x34
 8006960:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006962:	782b      	ldrb	r3, [r5, #0]
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	f040 80ac 	bne.w	8006ac2 <_strtod_l+0x1a2>
 800696a:	786b      	ldrb	r3, [r5, #1]
 800696c:	2b58      	cmp	r3, #88	; 0x58
 800696e:	d001      	beq.n	8006974 <_strtod_l+0x54>
 8006970:	2b78      	cmp	r3, #120	; 0x78
 8006972:	d167      	bne.n	8006a44 <_strtod_l+0x124>
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	ab1c      	add	r3, sp, #112	; 0x70
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	9702      	str	r7, [sp, #8]
 800697e:	ab1d      	add	r3, sp, #116	; 0x74
 8006980:	4a88      	ldr	r2, [pc, #544]	; (8006ba4 <_strtod_l+0x284>)
 8006982:	a91b      	add	r1, sp, #108	; 0x6c
 8006984:	4648      	mov	r0, r9
 8006986:	f001 fcf2 	bl	800836e <__gethex>
 800698a:	f010 0407 	ands.w	r4, r0, #7
 800698e:	4606      	mov	r6, r0
 8006990:	d005      	beq.n	800699e <_strtod_l+0x7e>
 8006992:	2c06      	cmp	r4, #6
 8006994:	d12b      	bne.n	80069ee <_strtod_l+0xce>
 8006996:	3501      	adds	r5, #1
 8006998:	2300      	movs	r3, #0
 800699a:	951b      	str	r5, [sp, #108]	; 0x6c
 800699c:	930d      	str	r3, [sp, #52]	; 0x34
 800699e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 859a 	bne.w	80074da <_strtod_l+0xbba>
 80069a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a8:	b1e3      	cbz	r3, 80069e4 <_strtod_l+0xc4>
 80069aa:	4652      	mov	r2, sl
 80069ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069b0:	ec43 2b10 	vmov	d0, r2, r3
 80069b4:	b021      	add	sp, #132	; 0x84
 80069b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ba:	2a2b      	cmp	r2, #43	; 0x2b
 80069bc:	d015      	beq.n	80069ea <_strtod_l+0xca>
 80069be:	2a2d      	cmp	r2, #45	; 0x2d
 80069c0:	d004      	beq.n	80069cc <_strtod_l+0xac>
 80069c2:	2a20      	cmp	r2, #32
 80069c4:	d1ca      	bne.n	800695c <_strtod_l+0x3c>
 80069c6:	3301      	adds	r3, #1
 80069c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80069ca:	e7bf      	b.n	800694c <_strtod_l+0x2c>
 80069cc:	2201      	movs	r2, #1
 80069ce:	920d      	str	r2, [sp, #52]	; 0x34
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1c2      	bne.n	8006960 <_strtod_l+0x40>
 80069da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 8579 	bne.w	80074d6 <_strtod_l+0xbb6>
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	e7e2      	b.n	80069b0 <_strtod_l+0x90>
 80069ea:	2200      	movs	r2, #0
 80069ec:	e7ef      	b.n	80069ce <_strtod_l+0xae>
 80069ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069f0:	b13a      	cbz	r2, 8006a02 <_strtod_l+0xe2>
 80069f2:	2135      	movs	r1, #53	; 0x35
 80069f4:	a81e      	add	r0, sp, #120	; 0x78
 80069f6:	f002 fb83 	bl	8009100 <__copybits>
 80069fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80069fc:	4648      	mov	r0, r9
 80069fe:	f001 ffef 	bl	80089e0 <_Bfree>
 8006a02:	3c01      	subs	r4, #1
 8006a04:	2c04      	cmp	r4, #4
 8006a06:	d806      	bhi.n	8006a16 <_strtod_l+0xf6>
 8006a08:	e8df f004 	tbb	[pc, r4]
 8006a0c:	1714030a 	.word	0x1714030a
 8006a10:	0a          	.byte	0x0a
 8006a11:	00          	.byte	0x00
 8006a12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006a16:	0730      	lsls	r0, r6, #28
 8006a18:	d5c1      	bpl.n	800699e <_strtod_l+0x7e>
 8006a1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006a1e:	e7be      	b.n	800699e <_strtod_l+0x7e>
 8006a20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006a24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a32:	e7f0      	b.n	8006a16 <_strtod_l+0xf6>
 8006a34:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006ba8 <_strtod_l+0x288>
 8006a38:	e7ed      	b.n	8006a16 <_strtod_l+0xf6>
 8006a3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006a42:	e7e8      	b.n	8006a16 <_strtod_l+0xf6>
 8006a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d0f9      	beq.n	8006a44 <_strtod_l+0x124>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0a4      	beq.n	800699e <_strtod_l+0x7e>
 8006a54:	2301      	movs	r3, #1
 8006a56:	2500      	movs	r5, #0
 8006a58:	9306      	str	r3, [sp, #24]
 8006a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a5c:	9308      	str	r3, [sp, #32]
 8006a5e:	9507      	str	r5, [sp, #28]
 8006a60:	9505      	str	r5, [sp, #20]
 8006a62:	220a      	movs	r2, #10
 8006a64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006a66:	7807      	ldrb	r7, [r0, #0]
 8006a68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006a6c:	b2d9      	uxtb	r1, r3
 8006a6e:	2909      	cmp	r1, #9
 8006a70:	d929      	bls.n	8006ac6 <_strtod_l+0x1a6>
 8006a72:	4622      	mov	r2, r4
 8006a74:	f8d8 1000 	ldr.w	r1, [r8]
 8006a78:	f002 fd96 	bl	80095a8 <strncmp>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d031      	beq.n	8006ae4 <_strtod_l+0x1c4>
 8006a80:	2000      	movs	r0, #0
 8006a82:	9c05      	ldr	r4, [sp, #20]
 8006a84:	9004      	str	r0, [sp, #16]
 8006a86:	463b      	mov	r3, r7
 8006a88:	4602      	mov	r2, r0
 8006a8a:	2b65      	cmp	r3, #101	; 0x65
 8006a8c:	d001      	beq.n	8006a92 <_strtod_l+0x172>
 8006a8e:	2b45      	cmp	r3, #69	; 0x45
 8006a90:	d114      	bne.n	8006abc <_strtod_l+0x19c>
 8006a92:	b924      	cbnz	r4, 8006a9e <_strtod_l+0x17e>
 8006a94:	b910      	cbnz	r0, 8006a9c <_strtod_l+0x17c>
 8006a96:	9b06      	ldr	r3, [sp, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d09e      	beq.n	80069da <_strtod_l+0xba>
 8006a9c:	2400      	movs	r4, #0
 8006a9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006aa0:	1c73      	adds	r3, r6, #1
 8006aa2:	931b      	str	r3, [sp, #108]	; 0x6c
 8006aa4:	7873      	ldrb	r3, [r6, #1]
 8006aa6:	2b2b      	cmp	r3, #43	; 0x2b
 8006aa8:	d078      	beq.n	8006b9c <_strtod_l+0x27c>
 8006aaa:	2b2d      	cmp	r3, #45	; 0x2d
 8006aac:	d070      	beq.n	8006b90 <_strtod_l+0x270>
 8006aae:	f04f 0c00 	mov.w	ip, #0
 8006ab2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006ab6:	2f09      	cmp	r7, #9
 8006ab8:	d97c      	bls.n	8006bb4 <_strtod_l+0x294>
 8006aba:	961b      	str	r6, [sp, #108]	; 0x6c
 8006abc:	f04f 0e00 	mov.w	lr, #0
 8006ac0:	e09a      	b.n	8006bf8 <_strtod_l+0x2d8>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e7c7      	b.n	8006a56 <_strtod_l+0x136>
 8006ac6:	9905      	ldr	r1, [sp, #20]
 8006ac8:	2908      	cmp	r1, #8
 8006aca:	bfdd      	ittte	le
 8006acc:	9907      	ldrle	r1, [sp, #28]
 8006ace:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ad2:	9307      	strle	r3, [sp, #28]
 8006ad4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006ad8:	9b05      	ldr	r3, [sp, #20]
 8006ada:	3001      	adds	r0, #1
 8006adc:	3301      	adds	r3, #1
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ae2:	e7bf      	b.n	8006a64 <_strtod_l+0x144>
 8006ae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ae6:	191a      	adds	r2, r3, r4
 8006ae8:	921b      	str	r2, [sp, #108]	; 0x6c
 8006aea:	9a05      	ldr	r2, [sp, #20]
 8006aec:	5d1b      	ldrb	r3, [r3, r4]
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d037      	beq.n	8006b62 <_strtod_l+0x242>
 8006af2:	9c05      	ldr	r4, [sp, #20]
 8006af4:	4602      	mov	r2, r0
 8006af6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006afa:	2909      	cmp	r1, #9
 8006afc:	d913      	bls.n	8006b26 <_strtod_l+0x206>
 8006afe:	2101      	movs	r1, #1
 8006b00:	9104      	str	r1, [sp, #16]
 8006b02:	e7c2      	b.n	8006a8a <_strtod_l+0x16a>
 8006b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	2b30      	cmp	r3, #48	; 0x30
 8006b10:	d0f8      	beq.n	8006b04 <_strtod_l+0x1e4>
 8006b12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006b16:	2a08      	cmp	r2, #8
 8006b18:	f200 84e4 	bhi.w	80074e4 <_strtod_l+0xbc4>
 8006b1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b1e:	9208      	str	r2, [sp, #32]
 8006b20:	4602      	mov	r2, r0
 8006b22:	2000      	movs	r0, #0
 8006b24:	4604      	mov	r4, r0
 8006b26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006b2a:	f100 0101 	add.w	r1, r0, #1
 8006b2e:	d012      	beq.n	8006b56 <_strtod_l+0x236>
 8006b30:	440a      	add	r2, r1
 8006b32:	eb00 0c04 	add.w	ip, r0, r4
 8006b36:	4621      	mov	r1, r4
 8006b38:	270a      	movs	r7, #10
 8006b3a:	458c      	cmp	ip, r1
 8006b3c:	d113      	bne.n	8006b66 <_strtod_l+0x246>
 8006b3e:	1821      	adds	r1, r4, r0
 8006b40:	2908      	cmp	r1, #8
 8006b42:	f104 0401 	add.w	r4, r4, #1
 8006b46:	4404      	add	r4, r0
 8006b48:	dc19      	bgt.n	8006b7e <_strtod_l+0x25e>
 8006b4a:	9b07      	ldr	r3, [sp, #28]
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	fb01 e303 	mla	r3, r1, r3, lr
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	2100      	movs	r1, #0
 8006b56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b58:	1c58      	adds	r0, r3, #1
 8006b5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	4608      	mov	r0, r1
 8006b60:	e7c9      	b.n	8006af6 <_strtod_l+0x1d6>
 8006b62:	9805      	ldr	r0, [sp, #20]
 8006b64:	e7d3      	b.n	8006b0e <_strtod_l+0x1ee>
 8006b66:	2908      	cmp	r1, #8
 8006b68:	f101 0101 	add.w	r1, r1, #1
 8006b6c:	dc03      	bgt.n	8006b76 <_strtod_l+0x256>
 8006b6e:	9b07      	ldr	r3, [sp, #28]
 8006b70:	437b      	muls	r3, r7
 8006b72:	9307      	str	r3, [sp, #28]
 8006b74:	e7e1      	b.n	8006b3a <_strtod_l+0x21a>
 8006b76:	2910      	cmp	r1, #16
 8006b78:	bfd8      	it	le
 8006b7a:	437d      	mulle	r5, r7
 8006b7c:	e7dd      	b.n	8006b3a <_strtod_l+0x21a>
 8006b7e:	2c10      	cmp	r4, #16
 8006b80:	bfdc      	itt	le
 8006b82:	210a      	movle	r1, #10
 8006b84:	fb01 e505 	mlale	r5, r1, r5, lr
 8006b88:	e7e4      	b.n	8006b54 <_strtod_l+0x234>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	e781      	b.n	8006a94 <_strtod_l+0x174>
 8006b90:	f04f 0c01 	mov.w	ip, #1
 8006b94:	1cb3      	adds	r3, r6, #2
 8006b96:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b98:	78b3      	ldrb	r3, [r6, #2]
 8006b9a:	e78a      	b.n	8006ab2 <_strtod_l+0x192>
 8006b9c:	f04f 0c00 	mov.w	ip, #0
 8006ba0:	e7f8      	b.n	8006b94 <_strtod_l+0x274>
 8006ba2:	bf00      	nop
 8006ba4:	08009750 	.word	0x08009750
 8006ba8:	7ff00000 	.word	0x7ff00000
 8006bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bae:	1c5f      	adds	r7, r3, #1
 8006bb0:	971b      	str	r7, [sp, #108]	; 0x6c
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d0f9      	beq.n	8006bac <_strtod_l+0x28c>
 8006bb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006bbc:	2f08      	cmp	r7, #8
 8006bbe:	f63f af7d 	bhi.w	8006abc <_strtod_l+0x19c>
 8006bc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bcc:	1c5f      	adds	r7, r3, #1
 8006bce:	971b      	str	r7, [sp, #108]	; 0x6c
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006bd6:	f1b8 0f09 	cmp.w	r8, #9
 8006bda:	d937      	bls.n	8006c4c <_strtod_l+0x32c>
 8006bdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bde:	1a7f      	subs	r7, r7, r1
 8006be0:	2f08      	cmp	r7, #8
 8006be2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006be6:	dc37      	bgt.n	8006c58 <_strtod_l+0x338>
 8006be8:	45be      	cmp	lr, r7
 8006bea:	bfa8      	it	ge
 8006bec:	46be      	movge	lr, r7
 8006bee:	f1bc 0f00 	cmp.w	ip, #0
 8006bf2:	d001      	beq.n	8006bf8 <_strtod_l+0x2d8>
 8006bf4:	f1ce 0e00 	rsb	lr, lr, #0
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	d151      	bne.n	8006ca0 <_strtod_l+0x380>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f47f aece 	bne.w	800699e <_strtod_l+0x7e>
 8006c02:	9a06      	ldr	r2, [sp, #24]
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	f47f aeca 	bne.w	800699e <_strtod_l+0x7e>
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	f47f aee4 	bne.w	80069da <_strtod_l+0xba>
 8006c12:	2b4e      	cmp	r3, #78	; 0x4e
 8006c14:	d027      	beq.n	8006c66 <_strtod_l+0x346>
 8006c16:	dc21      	bgt.n	8006c5c <_strtod_l+0x33c>
 8006c18:	2b49      	cmp	r3, #73	; 0x49
 8006c1a:	f47f aede 	bne.w	80069da <_strtod_l+0xba>
 8006c1e:	49a0      	ldr	r1, [pc, #640]	; (8006ea0 <_strtod_l+0x580>)
 8006c20:	a81b      	add	r0, sp, #108	; 0x6c
 8006c22:	f001 fdd7 	bl	80087d4 <__match>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f aed7 	beq.w	80069da <_strtod_l+0xba>
 8006c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c2e:	499d      	ldr	r1, [pc, #628]	; (8006ea4 <_strtod_l+0x584>)
 8006c30:	3b01      	subs	r3, #1
 8006c32:	a81b      	add	r0, sp, #108	; 0x6c
 8006c34:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c36:	f001 fdcd 	bl	80087d4 <__match>
 8006c3a:	b910      	cbnz	r0, 8006c42 <_strtod_l+0x322>
 8006c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c3e:	3301      	adds	r3, #1
 8006c40:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c42:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006eb8 <_strtod_l+0x598>
 8006c46:	f04f 0a00 	mov.w	sl, #0
 8006c4a:	e6a8      	b.n	800699e <_strtod_l+0x7e>
 8006c4c:	210a      	movs	r1, #10
 8006c4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006c52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c56:	e7b8      	b.n	8006bca <_strtod_l+0x2aa>
 8006c58:	46be      	mov	lr, r7
 8006c5a:	e7c8      	b.n	8006bee <_strtod_l+0x2ce>
 8006c5c:	2b69      	cmp	r3, #105	; 0x69
 8006c5e:	d0de      	beq.n	8006c1e <_strtod_l+0x2fe>
 8006c60:	2b6e      	cmp	r3, #110	; 0x6e
 8006c62:	f47f aeba 	bne.w	80069da <_strtod_l+0xba>
 8006c66:	4990      	ldr	r1, [pc, #576]	; (8006ea8 <_strtod_l+0x588>)
 8006c68:	a81b      	add	r0, sp, #108	; 0x6c
 8006c6a:	f001 fdb3 	bl	80087d4 <__match>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f aeb3 	beq.w	80069da <_strtod_l+0xba>
 8006c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b28      	cmp	r3, #40	; 0x28
 8006c7a:	d10e      	bne.n	8006c9a <_strtod_l+0x37a>
 8006c7c:	aa1e      	add	r2, sp, #120	; 0x78
 8006c7e:	498b      	ldr	r1, [pc, #556]	; (8006eac <_strtod_l+0x58c>)
 8006c80:	a81b      	add	r0, sp, #108	; 0x6c
 8006c82:	f001 fdbb 	bl	80087fc <__hexnan>
 8006c86:	2805      	cmp	r0, #5
 8006c88:	d107      	bne.n	8006c9a <_strtod_l+0x37a>
 8006c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006c90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c98:	e681      	b.n	800699e <_strtod_l+0x7e>
 8006c9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006ec0 <_strtod_l+0x5a0>
 8006c9e:	e7d2      	b.n	8006c46 <_strtod_l+0x326>
 8006ca0:	ebae 0302 	sub.w	r3, lr, r2
 8006ca4:	9306      	str	r3, [sp, #24]
 8006ca6:	9b05      	ldr	r3, [sp, #20]
 8006ca8:	9807      	ldr	r0, [sp, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bf08      	it	eq
 8006cae:	4623      	moveq	r3, r4
 8006cb0:	2c10      	cmp	r4, #16
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	46a0      	mov	r8, r4
 8006cb6:	bfa8      	it	ge
 8006cb8:	f04f 0810 	movge.w	r8, #16
 8006cbc:	f7f9 fc22 	bl	8000504 <__aeabi_ui2d>
 8006cc0:	2c09      	cmp	r4, #9
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	468b      	mov	fp, r1
 8006cc6:	dc13      	bgt.n	8006cf0 <_strtod_l+0x3d0>
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f43f ae67 	beq.w	800699e <_strtod_l+0x7e>
 8006cd0:	9b06      	ldr	r3, [sp, #24]
 8006cd2:	dd7a      	ble.n	8006dca <_strtod_l+0x4aa>
 8006cd4:	2b16      	cmp	r3, #22
 8006cd6:	dc61      	bgt.n	8006d9c <_strtod_l+0x47c>
 8006cd8:	4a75      	ldr	r2, [pc, #468]	; (8006eb0 <_strtod_l+0x590>)
 8006cda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006cde:	e9de 0100 	ldrd	r0, r1, [lr]
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	465b      	mov	r3, fp
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	4682      	mov	sl, r0
 8006cec:	468b      	mov	fp, r1
 8006cee:	e656      	b.n	800699e <_strtod_l+0x7e>
 8006cf0:	4b6f      	ldr	r3, [pc, #444]	; (8006eb0 <_strtod_l+0x590>)
 8006cf2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	4628      	mov	r0, r5
 8006d02:	460f      	mov	r7, r1
 8006d04:	f7f9 fbfe 	bl	8000504 <__aeabi_ui2d>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	2c0f      	cmp	r4, #15
 8006d16:	4682      	mov	sl, r0
 8006d18:	468b      	mov	fp, r1
 8006d1a:	ddd5      	ble.n	8006cc8 <_strtod_l+0x3a8>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	eba4 0808 	sub.w	r8, r4, r8
 8006d22:	4498      	add	r8, r3
 8006d24:	f1b8 0f00 	cmp.w	r8, #0
 8006d28:	f340 8096 	ble.w	8006e58 <_strtod_l+0x538>
 8006d2c:	f018 030f 	ands.w	r3, r8, #15
 8006d30:	d00a      	beq.n	8006d48 <_strtod_l+0x428>
 8006d32:	495f      	ldr	r1, [pc, #380]	; (8006eb0 <_strtod_l+0x590>)
 8006d34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d38:	4652      	mov	r2, sl
 8006d3a:	465b      	mov	r3, fp
 8006d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4682      	mov	sl, r0
 8006d46:	468b      	mov	fp, r1
 8006d48:	f038 080f 	bics.w	r8, r8, #15
 8006d4c:	d073      	beq.n	8006e36 <_strtod_l+0x516>
 8006d4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d52:	dd47      	ble.n	8006de4 <_strtod_l+0x4c4>
 8006d54:	2400      	movs	r4, #0
 8006d56:	46a0      	mov	r8, r4
 8006d58:	9407      	str	r4, [sp, #28]
 8006d5a:	9405      	str	r4, [sp, #20]
 8006d5c:	2322      	movs	r3, #34	; 0x22
 8006d5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006eb8 <_strtod_l+0x598>
 8006d62:	f8c9 3000 	str.w	r3, [r9]
 8006d66:	f04f 0a00 	mov.w	sl, #0
 8006d6a:	9b07      	ldr	r3, [sp, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f43f ae16 	beq.w	800699e <_strtod_l+0x7e>
 8006d72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d74:	4648      	mov	r0, r9
 8006d76:	f001 fe33 	bl	80089e0 <_Bfree>
 8006d7a:	9905      	ldr	r1, [sp, #20]
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f001 fe2f 	bl	80089e0 <_Bfree>
 8006d82:	4641      	mov	r1, r8
 8006d84:	4648      	mov	r0, r9
 8006d86:	f001 fe2b 	bl	80089e0 <_Bfree>
 8006d8a:	9907      	ldr	r1, [sp, #28]
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f001 fe27 	bl	80089e0 <_Bfree>
 8006d92:	4621      	mov	r1, r4
 8006d94:	4648      	mov	r0, r9
 8006d96:	f001 fe23 	bl	80089e0 <_Bfree>
 8006d9a:	e600      	b.n	800699e <_strtod_l+0x7e>
 8006d9c:	9a06      	ldr	r2, [sp, #24]
 8006d9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006da2:	4293      	cmp	r3, r2
 8006da4:	dbba      	blt.n	8006d1c <_strtod_l+0x3fc>
 8006da6:	4d42      	ldr	r5, [pc, #264]	; (8006eb0 <_strtod_l+0x590>)
 8006da8:	f1c4 040f 	rsb	r4, r4, #15
 8006dac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	1b1c      	subs	r4, r3, r4
 8006dc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006dc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dc8:	e78d      	b.n	8006ce6 <_strtod_l+0x3c6>
 8006dca:	f113 0f16 	cmn.w	r3, #22
 8006dce:	dba5      	blt.n	8006d1c <_strtod_l+0x3fc>
 8006dd0:	4a37      	ldr	r2, [pc, #220]	; (8006eb0 <_strtod_l+0x590>)
 8006dd2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006dd6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006dda:	4650      	mov	r0, sl
 8006ddc:	4659      	mov	r1, fp
 8006dde:	f7f9 fd35 	bl	800084c <__aeabi_ddiv>
 8006de2:	e782      	b.n	8006cea <_strtod_l+0x3ca>
 8006de4:	2300      	movs	r3, #0
 8006de6:	4e33      	ldr	r6, [pc, #204]	; (8006eb4 <_strtod_l+0x594>)
 8006de8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006dec:	4650      	mov	r0, sl
 8006dee:	4659      	mov	r1, fp
 8006df0:	461d      	mov	r5, r3
 8006df2:	f1b8 0f01 	cmp.w	r8, #1
 8006df6:	dc21      	bgt.n	8006e3c <_strtod_l+0x51c>
 8006df8:	b10b      	cbz	r3, 8006dfe <_strtod_l+0x4de>
 8006dfa:	4682      	mov	sl, r0
 8006dfc:	468b      	mov	fp, r1
 8006dfe:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <_strtod_l+0x594>)
 8006e00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006e04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e10:	f7f9 fbf2 	bl	80005f8 <__aeabi_dmul>
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <_strtod_l+0x598>)
 8006e16:	460a      	mov	r2, r1
 8006e18:	400b      	ands	r3, r1
 8006e1a:	4928      	ldr	r1, [pc, #160]	; (8006ebc <_strtod_l+0x59c>)
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	4682      	mov	sl, r0
 8006e20:	d898      	bhi.n	8006d54 <_strtod_l+0x434>
 8006e22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006e26:	428b      	cmp	r3, r1
 8006e28:	bf86      	itte	hi
 8006e2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006ec4 <_strtod_l+0x5a4>
 8006e2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e36:	2300      	movs	r3, #0
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	e077      	b.n	8006f2c <_strtod_l+0x60c>
 8006e3c:	f018 0f01 	tst.w	r8, #1
 8006e40:	d006      	beq.n	8006e50 <_strtod_l+0x530>
 8006e42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fbd5 	bl	80005f8 <__aeabi_dmul>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	3501      	adds	r5, #1
 8006e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e56:	e7cc      	b.n	8006df2 <_strtod_l+0x4d2>
 8006e58:	d0ed      	beq.n	8006e36 <_strtod_l+0x516>
 8006e5a:	f1c8 0800 	rsb	r8, r8, #0
 8006e5e:	f018 020f 	ands.w	r2, r8, #15
 8006e62:	d00a      	beq.n	8006e7a <_strtod_l+0x55a>
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <_strtod_l+0x590>)
 8006e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 fceb 	bl	800084c <__aeabi_ddiv>
 8006e76:	4682      	mov	sl, r0
 8006e78:	468b      	mov	fp, r1
 8006e7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e7e:	d0da      	beq.n	8006e36 <_strtod_l+0x516>
 8006e80:	f1b8 0f1f 	cmp.w	r8, #31
 8006e84:	dd20      	ble.n	8006ec8 <_strtod_l+0x5a8>
 8006e86:	2400      	movs	r4, #0
 8006e88:	46a0      	mov	r8, r4
 8006e8a:	9407      	str	r4, [sp, #28]
 8006e8c:	9405      	str	r4, [sp, #20]
 8006e8e:	2322      	movs	r3, #34	; 0x22
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	f04f 0b00 	mov.w	fp, #0
 8006e98:	f8c9 3000 	str.w	r3, [r9]
 8006e9c:	e765      	b.n	8006d6a <_strtod_l+0x44a>
 8006e9e:	bf00      	nop
 8006ea0:	08009719 	.word	0x08009719
 8006ea4:	080097a3 	.word	0x080097a3
 8006ea8:	08009721 	.word	0x08009721
 8006eac:	08009764 	.word	0x08009764
 8006eb0:	080097e0 	.word	0x080097e0
 8006eb4:	080097b8 	.word	0x080097b8
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	7ca00000 	.word	0x7ca00000
 8006ec0:	fff80000 	.word	0xfff80000
 8006ec4:	7fefffff 	.word	0x7fefffff
 8006ec8:	f018 0310 	ands.w	r3, r8, #16
 8006ecc:	bf18      	it	ne
 8006ece:	236a      	movne	r3, #106	; 0x6a
 8006ed0:	4da0      	ldr	r5, [pc, #640]	; (8007154 <_strtod_l+0x834>)
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	4659      	mov	r1, fp
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f1b8 0f00 	cmp.w	r8, #0
 8006ede:	f300 810a 	bgt.w	80070f6 <_strtod_l+0x7d6>
 8006ee2:	b10b      	cbz	r3, 8006ee8 <_strtod_l+0x5c8>
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	9b04      	ldr	r3, [sp, #16]
 8006eea:	b1bb      	cbz	r3, 8006f1c <_strtod_l+0x5fc>
 8006eec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ef0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	dd10      	ble.n	8006f1c <_strtod_l+0x5fc>
 8006efa:	2b1f      	cmp	r3, #31
 8006efc:	f340 8107 	ble.w	800710e <_strtod_l+0x7ee>
 8006f00:	2b34      	cmp	r3, #52	; 0x34
 8006f02:	bfde      	ittt	le
 8006f04:	3b20      	suble	r3, #32
 8006f06:	f04f 32ff 	movle.w	r2, #4294967295
 8006f0a:	fa02 f303 	lslle.w	r3, r2, r3
 8006f0e:	f04f 0a00 	mov.w	sl, #0
 8006f12:	bfcc      	ite	gt
 8006f14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f18:	ea03 0b01 	andle.w	fp, r3, r1
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1ac      	bne.n	8006e86 <_strtod_l+0x566>
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	9a05      	ldr	r2, [sp, #20]
 8006f32:	9908      	ldr	r1, [sp, #32]
 8006f34:	4623      	mov	r3, r4
 8006f36:	4648      	mov	r0, r9
 8006f38:	f001 fda4 	bl	8008a84 <__s2b>
 8006f3c:	9007      	str	r0, [sp, #28]
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f43f af08 	beq.w	8006d54 <_strtod_l+0x434>
 8006f44:	9a06      	ldr	r2, [sp, #24]
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	f1c3 0300 	rsb	r3, r3, #0
 8006f4e:	bfa8      	it	ge
 8006f50:	2300      	movge	r3, #0
 8006f52:	930e      	str	r3, [sp, #56]	; 0x38
 8006f54:	2400      	movs	r4, #0
 8006f56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f5a:	9316      	str	r3, [sp, #88]	; 0x58
 8006f5c:	46a0      	mov	r8, r4
 8006f5e:	9b07      	ldr	r3, [sp, #28]
 8006f60:	4648      	mov	r0, r9
 8006f62:	6859      	ldr	r1, [r3, #4]
 8006f64:	f001 fd08 	bl	8008978 <_Balloc>
 8006f68:	9005      	str	r0, [sp, #20]
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f43f aef6 	beq.w	8006d5c <_strtod_l+0x43c>
 8006f70:	9b07      	ldr	r3, [sp, #28]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	3202      	adds	r2, #2
 8006f76:	f103 010c 	add.w	r1, r3, #12
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	300c      	adds	r0, #12
 8006f7e:	f7fe fe39 	bl	8005bf4 <memcpy>
 8006f82:	aa1e      	add	r2, sp, #120	; 0x78
 8006f84:	a91d      	add	r1, sp, #116	; 0x74
 8006f86:	ec4b ab10 	vmov	d0, sl, fp
 8006f8a:	4648      	mov	r0, r9
 8006f8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006f90:	f002 f834 	bl	8008ffc <__d2b>
 8006f94:	901c      	str	r0, [sp, #112]	; 0x70
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f aee0 	beq.w	8006d5c <_strtod_l+0x43c>
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f001 fdfc 	bl	8008b9c <__i2b>
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f aed8 	beq.w	8006d5c <_strtod_l+0x43c>
 8006fac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006fae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	bfab      	itete	ge
 8006fb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006fb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006fb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006fba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006fbc:	bfac      	ite	ge
 8006fbe:	18f7      	addge	r7, r6, r3
 8006fc0:	1b9d      	sublt	r5, r3, r6
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	1af6      	subs	r6, r6, r3
 8006fc6:	4416      	add	r6, r2
 8006fc8:	4b63      	ldr	r3, [pc, #396]	; (8007158 <_strtod_l+0x838>)
 8006fca:	3e01      	subs	r6, #1
 8006fcc:	429e      	cmp	r6, r3
 8006fce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fd2:	f280 80af 	bge.w	8007134 <_strtod_l+0x814>
 8006fd6:	1b9b      	subs	r3, r3, r6
 8006fd8:	2b1f      	cmp	r3, #31
 8006fda:	eba2 0203 	sub.w	r2, r2, r3
 8006fde:	f04f 0101 	mov.w	r1, #1
 8006fe2:	f300 809b 	bgt.w	800711c <_strtod_l+0x7fc>
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fec:	2300      	movs	r3, #0
 8006fee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff0:	18be      	adds	r6, r7, r2
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	42b7      	cmp	r7, r6
 8006ff6:	4415      	add	r5, r2
 8006ff8:	441d      	add	r5, r3
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	bfa8      	it	ge
 8006ffe:	4633      	movge	r3, r6
 8007000:	42ab      	cmp	r3, r5
 8007002:	bfa8      	it	ge
 8007004:	462b      	movge	r3, r5
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfc2      	ittt	gt
 800700a:	1af6      	subgt	r6, r6, r3
 800700c:	1aed      	subgt	r5, r5, r3
 800700e:	1aff      	subgt	r7, r7, r3
 8007010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007012:	b1bb      	cbz	r3, 8007044 <_strtod_l+0x724>
 8007014:	4641      	mov	r1, r8
 8007016:	461a      	mov	r2, r3
 8007018:	4648      	mov	r0, r9
 800701a:	f001 fe5f 	bl	8008cdc <__pow5mult>
 800701e:	4680      	mov	r8, r0
 8007020:	2800      	cmp	r0, #0
 8007022:	f43f ae9b 	beq.w	8006d5c <_strtod_l+0x43c>
 8007026:	4601      	mov	r1, r0
 8007028:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800702a:	4648      	mov	r0, r9
 800702c:	f001 fdbf 	bl	8008bae <__multiply>
 8007030:	900c      	str	r0, [sp, #48]	; 0x30
 8007032:	2800      	cmp	r0, #0
 8007034:	f43f ae92 	beq.w	8006d5c <_strtod_l+0x43c>
 8007038:	991c      	ldr	r1, [sp, #112]	; 0x70
 800703a:	4648      	mov	r0, r9
 800703c:	f001 fcd0 	bl	80089e0 <_Bfree>
 8007040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007042:	931c      	str	r3, [sp, #112]	; 0x70
 8007044:	2e00      	cmp	r6, #0
 8007046:	dc7a      	bgt.n	800713e <_strtod_l+0x81e>
 8007048:	9b06      	ldr	r3, [sp, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	dd08      	ble.n	8007060 <_strtod_l+0x740>
 800704e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007050:	9905      	ldr	r1, [sp, #20]
 8007052:	4648      	mov	r0, r9
 8007054:	f001 fe42 	bl	8008cdc <__pow5mult>
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f ae7e 	beq.w	8006d5c <_strtod_l+0x43c>
 8007060:	2d00      	cmp	r5, #0
 8007062:	dd08      	ble.n	8007076 <_strtod_l+0x756>
 8007064:	462a      	mov	r2, r5
 8007066:	9905      	ldr	r1, [sp, #20]
 8007068:	4648      	mov	r0, r9
 800706a:	f001 fe85 	bl	8008d78 <__lshift>
 800706e:	9005      	str	r0, [sp, #20]
 8007070:	2800      	cmp	r0, #0
 8007072:	f43f ae73 	beq.w	8006d5c <_strtod_l+0x43c>
 8007076:	2f00      	cmp	r7, #0
 8007078:	dd08      	ble.n	800708c <_strtod_l+0x76c>
 800707a:	4641      	mov	r1, r8
 800707c:	463a      	mov	r2, r7
 800707e:	4648      	mov	r0, r9
 8007080:	f001 fe7a 	bl	8008d78 <__lshift>
 8007084:	4680      	mov	r8, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	f43f ae68 	beq.w	8006d5c <_strtod_l+0x43c>
 800708c:	9a05      	ldr	r2, [sp, #20]
 800708e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007090:	4648      	mov	r0, r9
 8007092:	f001 fedf 	bl	8008e54 <__mdiff>
 8007096:	4604      	mov	r4, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	f43f ae5f 	beq.w	8006d5c <_strtod_l+0x43c>
 800709e:	68c3      	ldr	r3, [r0, #12]
 80070a0:	930c      	str	r3, [sp, #48]	; 0x30
 80070a2:	2300      	movs	r3, #0
 80070a4:	60c3      	str	r3, [r0, #12]
 80070a6:	4641      	mov	r1, r8
 80070a8:	f001 feba 	bl	8008e20 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	da55      	bge.n	800715c <_strtod_l+0x83c>
 80070b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070b2:	b9e3      	cbnz	r3, 80070ee <_strtod_l+0x7ce>
 80070b4:	f1ba 0f00 	cmp.w	sl, #0
 80070b8:	d119      	bne.n	80070ee <_strtod_l+0x7ce>
 80070ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070be:	b9b3      	cbnz	r3, 80070ee <_strtod_l+0x7ce>
 80070c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070c4:	0d1b      	lsrs	r3, r3, #20
 80070c6:	051b      	lsls	r3, r3, #20
 80070c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070cc:	d90f      	bls.n	80070ee <_strtod_l+0x7ce>
 80070ce:	6963      	ldr	r3, [r4, #20]
 80070d0:	b913      	cbnz	r3, 80070d8 <_strtod_l+0x7b8>
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	dd0a      	ble.n	80070ee <_strtod_l+0x7ce>
 80070d8:	4621      	mov	r1, r4
 80070da:	2201      	movs	r2, #1
 80070dc:	4648      	mov	r0, r9
 80070de:	f001 fe4b 	bl	8008d78 <__lshift>
 80070e2:	4641      	mov	r1, r8
 80070e4:	4604      	mov	r4, r0
 80070e6:	f001 fe9b 	bl	8008e20 <__mcmp>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	dc67      	bgt.n	80071be <_strtod_l+0x89e>
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d171      	bne.n	80071d8 <_strtod_l+0x8b8>
 80070f4:	e63d      	b.n	8006d72 <_strtod_l+0x452>
 80070f6:	f018 0f01 	tst.w	r8, #1
 80070fa:	d004      	beq.n	8007106 <_strtod_l+0x7e6>
 80070fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007100:	f7f9 fa7a 	bl	80005f8 <__aeabi_dmul>
 8007104:	2301      	movs	r3, #1
 8007106:	ea4f 0868 	mov.w	r8, r8, asr #1
 800710a:	3508      	adds	r5, #8
 800710c:	e6e5      	b.n	8006eda <_strtod_l+0x5ba>
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	fa02 f303 	lsl.w	r3, r2, r3
 8007116:	ea03 0a0a 	and.w	sl, r3, sl
 800711a:	e6ff      	b.n	8006f1c <_strtod_l+0x5fc>
 800711c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007120:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007124:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007128:	36e2      	adds	r6, #226	; 0xe2
 800712a:	fa01 f306 	lsl.w	r3, r1, r6
 800712e:	930a      	str	r3, [sp, #40]	; 0x28
 8007130:	910f      	str	r1, [sp, #60]	; 0x3c
 8007132:	e75d      	b.n	8006ff0 <_strtod_l+0x6d0>
 8007134:	2300      	movs	r3, #0
 8007136:	930a      	str	r3, [sp, #40]	; 0x28
 8007138:	2301      	movs	r3, #1
 800713a:	930f      	str	r3, [sp, #60]	; 0x3c
 800713c:	e758      	b.n	8006ff0 <_strtod_l+0x6d0>
 800713e:	4632      	mov	r2, r6
 8007140:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007142:	4648      	mov	r0, r9
 8007144:	f001 fe18 	bl	8008d78 <__lshift>
 8007148:	901c      	str	r0, [sp, #112]	; 0x70
 800714a:	2800      	cmp	r0, #0
 800714c:	f47f af7c 	bne.w	8007048 <_strtod_l+0x728>
 8007150:	e604      	b.n	8006d5c <_strtod_l+0x43c>
 8007152:	bf00      	nop
 8007154:	08009778 	.word	0x08009778
 8007158:	fffffc02 	.word	0xfffffc02
 800715c:	465d      	mov	r5, fp
 800715e:	f040 8086 	bne.w	800726e <_strtod_l+0x94e>
 8007162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007168:	b32a      	cbz	r2, 80071b6 <_strtod_l+0x896>
 800716a:	4aaf      	ldr	r2, [pc, #700]	; (8007428 <_strtod_l+0xb08>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d153      	bne.n	8007218 <_strtod_l+0x8f8>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	4650      	mov	r0, sl
 8007174:	b1d3      	cbz	r3, 80071ac <_strtod_l+0x88c>
 8007176:	4aad      	ldr	r2, [pc, #692]	; (800742c <_strtod_l+0xb0c>)
 8007178:	402a      	ands	r2, r5
 800717a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800717e:	f04f 31ff 	mov.w	r1, #4294967295
 8007182:	d816      	bhi.n	80071b2 <_strtod_l+0x892>
 8007184:	0d12      	lsrs	r2, r2, #20
 8007186:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800718a:	fa01 f303 	lsl.w	r3, r1, r3
 800718e:	4298      	cmp	r0, r3
 8007190:	d142      	bne.n	8007218 <_strtod_l+0x8f8>
 8007192:	4ba7      	ldr	r3, [pc, #668]	; (8007430 <_strtod_l+0xb10>)
 8007194:	429d      	cmp	r5, r3
 8007196:	d102      	bne.n	800719e <_strtod_l+0x87e>
 8007198:	3001      	adds	r0, #1
 800719a:	f43f addf 	beq.w	8006d5c <_strtod_l+0x43c>
 800719e:	4ba3      	ldr	r3, [pc, #652]	; (800742c <_strtod_l+0xb0c>)
 80071a0:	402b      	ands	r3, r5
 80071a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	e7a0      	b.n	80070ee <_strtod_l+0x7ce>
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
 80071b0:	e7ed      	b.n	800718e <_strtod_l+0x86e>
 80071b2:	460b      	mov	r3, r1
 80071b4:	e7eb      	b.n	800718e <_strtod_l+0x86e>
 80071b6:	bb7b      	cbnz	r3, 8007218 <_strtod_l+0x8f8>
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	d12c      	bne.n	8007218 <_strtod_l+0x8f8>
 80071be:	9904      	ldr	r1, [sp, #16]
 80071c0:	4a9a      	ldr	r2, [pc, #616]	; (800742c <_strtod_l+0xb0c>)
 80071c2:	465b      	mov	r3, fp
 80071c4:	b1f1      	cbz	r1, 8007204 <_strtod_l+0x8e4>
 80071c6:	ea02 010b 	and.w	r1, r2, fp
 80071ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80071ce:	dc19      	bgt.n	8007204 <_strtod_l+0x8e4>
 80071d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071d4:	f77f ae5b 	ble.w	8006e8e <_strtod_l+0x56e>
 80071d8:	4a96      	ldr	r2, [pc, #600]	; (8007434 <_strtod_l+0xb14>)
 80071da:	2300      	movs	r3, #0
 80071dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80071e0:	4650      	mov	r0, sl
 80071e2:	4659      	mov	r1, fp
 80071e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071e8:	f7f9 fa06 	bl	80005f8 <__aeabi_dmul>
 80071ec:	4682      	mov	sl, r0
 80071ee:	468b      	mov	fp, r1
 80071f0:	2900      	cmp	r1, #0
 80071f2:	f47f adbe 	bne.w	8006d72 <_strtod_l+0x452>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f47f adbb 	bne.w	8006d72 <_strtod_l+0x452>
 80071fc:	2322      	movs	r3, #34	; 0x22
 80071fe:	f8c9 3000 	str.w	r3, [r9]
 8007202:	e5b6      	b.n	8006d72 <_strtod_l+0x452>
 8007204:	4013      	ands	r3, r2
 8007206:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800720a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800720e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007212:	f04f 3aff 	mov.w	sl, #4294967295
 8007216:	e76a      	b.n	80070ee <_strtod_l+0x7ce>
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	b193      	cbz	r3, 8007242 <_strtod_l+0x922>
 800721c:	422b      	tst	r3, r5
 800721e:	f43f af66 	beq.w	80070ee <_strtod_l+0x7ce>
 8007222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	4650      	mov	r0, sl
 8007228:	4659      	mov	r1, fp
 800722a:	b173      	cbz	r3, 800724a <_strtod_l+0x92a>
 800722c:	f7ff fb5a 	bl	80068e4 <sulp>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007238:	f7f9 f828 	bl	800028c <__adddf3>
 800723c:	4682      	mov	sl, r0
 800723e:	468b      	mov	fp, r1
 8007240:	e755      	b.n	80070ee <_strtod_l+0x7ce>
 8007242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007244:	ea13 0f0a 	tst.w	r3, sl
 8007248:	e7e9      	b.n	800721e <_strtod_l+0x8fe>
 800724a:	f7ff fb4b 	bl	80068e4 <sulp>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007256:	f7f9 f817 	bl	8000288 <__aeabi_dsub>
 800725a:	2200      	movs	r2, #0
 800725c:	2300      	movs	r3, #0
 800725e:	4682      	mov	sl, r0
 8007260:	468b      	mov	fp, r1
 8007262:	f7f9 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007266:	2800      	cmp	r0, #0
 8007268:	f47f ae11 	bne.w	8006e8e <_strtod_l+0x56e>
 800726c:	e73f      	b.n	80070ee <_strtod_l+0x7ce>
 800726e:	4641      	mov	r1, r8
 8007270:	4620      	mov	r0, r4
 8007272:	f001 ff12 	bl	800909a <__ratio>
 8007276:	ec57 6b10 	vmov	r6, r7, d0
 800727a:	2200      	movs	r2, #0
 800727c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007280:	ee10 0a10 	vmov	r0, s0
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 fc33 	bl	8000af0 <__aeabi_dcmple>
 800728a:	2800      	cmp	r0, #0
 800728c:	d077      	beq.n	800737e <_strtod_l+0xa5e>
 800728e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	d04a      	beq.n	800732a <_strtod_l+0xa0a>
 8007294:	4b68      	ldr	r3, [pc, #416]	; (8007438 <_strtod_l+0xb18>)
 8007296:	2200      	movs	r2, #0
 8007298:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800729c:	4f66      	ldr	r7, [pc, #408]	; (8007438 <_strtod_l+0xb18>)
 800729e:	2600      	movs	r6, #0
 80072a0:	4b62      	ldr	r3, [pc, #392]	; (800742c <_strtod_l+0xb0c>)
 80072a2:	402b      	ands	r3, r5
 80072a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80072a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072a8:	4b64      	ldr	r3, [pc, #400]	; (800743c <_strtod_l+0xb1c>)
 80072aa:	429a      	cmp	r2, r3
 80072ac:	f040 80ce 	bne.w	800744c <_strtod_l+0xb2c>
 80072b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80072bc:	ec4b ab10 	vmov	d0, sl, fp
 80072c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80072c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072c8:	f001 fe22 	bl	8008f10 <__ulp>
 80072cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072d0:	ec53 2b10 	vmov	r2, r3, d0
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4652      	mov	r2, sl
 80072da:	465b      	mov	r3, fp
 80072dc:	f7f8 ffd6 	bl	800028c <__adddf3>
 80072e0:	460b      	mov	r3, r1
 80072e2:	4952      	ldr	r1, [pc, #328]	; (800742c <_strtod_l+0xb0c>)
 80072e4:	4a56      	ldr	r2, [pc, #344]	; (8007440 <_strtod_l+0xb20>)
 80072e6:	4019      	ands	r1, r3
 80072e8:	4291      	cmp	r1, r2
 80072ea:	4682      	mov	sl, r0
 80072ec:	d95b      	bls.n	80073a6 <_strtod_l+0xa86>
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d103      	bne.n	8007300 <_strtod_l+0x9e0>
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	3301      	adds	r3, #1
 80072fc:	f43f ad2e 	beq.w	8006d5c <_strtod_l+0x43c>
 8007300:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007430 <_strtod_l+0xb10>
 8007304:	f04f 3aff 	mov.w	sl, #4294967295
 8007308:	991c      	ldr	r1, [sp, #112]	; 0x70
 800730a:	4648      	mov	r0, r9
 800730c:	f001 fb68 	bl	80089e0 <_Bfree>
 8007310:	9905      	ldr	r1, [sp, #20]
 8007312:	4648      	mov	r0, r9
 8007314:	f001 fb64 	bl	80089e0 <_Bfree>
 8007318:	4641      	mov	r1, r8
 800731a:	4648      	mov	r0, r9
 800731c:	f001 fb60 	bl	80089e0 <_Bfree>
 8007320:	4621      	mov	r1, r4
 8007322:	4648      	mov	r0, r9
 8007324:	f001 fb5c 	bl	80089e0 <_Bfree>
 8007328:	e619      	b.n	8006f5e <_strtod_l+0x63e>
 800732a:	f1ba 0f00 	cmp.w	sl, #0
 800732e:	d11a      	bne.n	8007366 <_strtod_l+0xa46>
 8007330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007334:	b9eb      	cbnz	r3, 8007372 <_strtod_l+0xa52>
 8007336:	2200      	movs	r2, #0
 8007338:	4b3f      	ldr	r3, [pc, #252]	; (8007438 <_strtod_l+0xb18>)
 800733a:	4630      	mov	r0, r6
 800733c:	4639      	mov	r1, r7
 800733e:	f7f9 fbcd 	bl	8000adc <__aeabi_dcmplt>
 8007342:	b9c8      	cbnz	r0, 8007378 <_strtod_l+0xa58>
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	2200      	movs	r2, #0
 800734a:	4b3e      	ldr	r3, [pc, #248]	; (8007444 <_strtod_l+0xb24>)
 800734c:	f7f9 f954 	bl	80005f8 <__aeabi_dmul>
 8007350:	4606      	mov	r6, r0
 8007352:	460f      	mov	r7, r1
 8007354:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007358:	9618      	str	r6, [sp, #96]	; 0x60
 800735a:	9319      	str	r3, [sp, #100]	; 0x64
 800735c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007360:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007364:	e79c      	b.n	80072a0 <_strtod_l+0x980>
 8007366:	f1ba 0f01 	cmp.w	sl, #1
 800736a:	d102      	bne.n	8007372 <_strtod_l+0xa52>
 800736c:	2d00      	cmp	r5, #0
 800736e:	f43f ad8e 	beq.w	8006e8e <_strtod_l+0x56e>
 8007372:	2200      	movs	r2, #0
 8007374:	4b34      	ldr	r3, [pc, #208]	; (8007448 <_strtod_l+0xb28>)
 8007376:	e78f      	b.n	8007298 <_strtod_l+0x978>
 8007378:	2600      	movs	r6, #0
 800737a:	4f32      	ldr	r7, [pc, #200]	; (8007444 <_strtod_l+0xb24>)
 800737c:	e7ea      	b.n	8007354 <_strtod_l+0xa34>
 800737e:	4b31      	ldr	r3, [pc, #196]	; (8007444 <_strtod_l+0xb24>)
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	2200      	movs	r2, #0
 8007386:	f7f9 f937 	bl	80005f8 <__aeabi_dmul>
 800738a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	b933      	cbnz	r3, 80073a0 <_strtod_l+0xa80>
 8007392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007396:	9010      	str	r0, [sp, #64]	; 0x40
 8007398:	9311      	str	r3, [sp, #68]	; 0x44
 800739a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800739e:	e7df      	b.n	8007360 <_strtod_l+0xa40>
 80073a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80073a4:	e7f9      	b.n	800739a <_strtod_l+0xa7a>
 80073a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ab      	bne.n	8007308 <_strtod_l+0x9e8>
 80073b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073b4:	0d1b      	lsrs	r3, r3, #20
 80073b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073b8:	051b      	lsls	r3, r3, #20
 80073ba:	429a      	cmp	r2, r3
 80073bc:	465d      	mov	r5, fp
 80073be:	d1a3      	bne.n	8007308 <_strtod_l+0x9e8>
 80073c0:	4639      	mov	r1, r7
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7f9 fbc8 	bl	8000b58 <__aeabi_d2iz>
 80073c8:	f7f9 f8ac 	bl	8000524 <__aeabi_i2d>
 80073cc:	460b      	mov	r3, r1
 80073ce:	4602      	mov	r2, r0
 80073d0:	4639      	mov	r1, r7
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7f8 ff58 	bl	8000288 <__aeabi_dsub>
 80073d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	b933      	cbnz	r3, 80073ee <_strtod_l+0xace>
 80073e0:	f1ba 0f00 	cmp.w	sl, #0
 80073e4:	d103      	bne.n	80073ee <_strtod_l+0xace>
 80073e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	d06d      	beq.n	80074ca <_strtod_l+0xbaa>
 80073ee:	a30a      	add	r3, pc, #40	; (adr r3, 8007418 <_strtod_l+0xaf8>)
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 fb70 	bl	8000adc <__aeabi_dcmplt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f47f acb8 	bne.w	8006d72 <_strtod_l+0x452>
 8007402:	a307      	add	r3, pc, #28	; (adr r3, 8007420 <_strtod_l+0xb00>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f9 fb84 	bl	8000b18 <__aeabi_dcmpgt>
 8007410:	2800      	cmp	r0, #0
 8007412:	f43f af79 	beq.w	8007308 <_strtod_l+0x9e8>
 8007416:	e4ac      	b.n	8006d72 <_strtod_l+0x452>
 8007418:	94a03595 	.word	0x94a03595
 800741c:	3fdfffff 	.word	0x3fdfffff
 8007420:	35afe535 	.word	0x35afe535
 8007424:	3fe00000 	.word	0x3fe00000
 8007428:	000fffff 	.word	0x000fffff
 800742c:	7ff00000 	.word	0x7ff00000
 8007430:	7fefffff 	.word	0x7fefffff
 8007434:	39500000 	.word	0x39500000
 8007438:	3ff00000 	.word	0x3ff00000
 800743c:	7fe00000 	.word	0x7fe00000
 8007440:	7c9fffff 	.word	0x7c9fffff
 8007444:	3fe00000 	.word	0x3fe00000
 8007448:	bff00000 	.word	0xbff00000
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	b333      	cbz	r3, 800749e <_strtod_l+0xb7e>
 8007450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007452:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007456:	d822      	bhi.n	800749e <_strtod_l+0xb7e>
 8007458:	a327      	add	r3, pc, #156	; (adr r3, 80074f8 <_strtod_l+0xbd8>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4630      	mov	r0, r6
 8007460:	4639      	mov	r1, r7
 8007462:	f7f9 fb45 	bl	8000af0 <__aeabi_dcmple>
 8007466:	b1a0      	cbz	r0, 8007492 <_strtod_l+0xb72>
 8007468:	4639      	mov	r1, r7
 800746a:	4630      	mov	r0, r6
 800746c:	f7f9 fb9c 	bl	8000ba8 <__aeabi_d2uiz>
 8007470:	2800      	cmp	r0, #0
 8007472:	bf08      	it	eq
 8007474:	2001      	moveq	r0, #1
 8007476:	f7f9 f845 	bl	8000504 <__aeabi_ui2d>
 800747a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800747c:	4606      	mov	r6, r0
 800747e:	460f      	mov	r7, r1
 8007480:	bb03      	cbnz	r3, 80074c4 <_strtod_l+0xba4>
 8007482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007486:	9012      	str	r0, [sp, #72]	; 0x48
 8007488:	9313      	str	r3, [sp, #76]	; 0x4c
 800748a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800748e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007496:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	930b      	str	r3, [sp, #44]	; 0x2c
 800749e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80074a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80074a6:	f001 fd33 	bl	8008f10 <__ulp>
 80074aa:	4650      	mov	r0, sl
 80074ac:	ec53 2b10 	vmov	r2, r3, d0
 80074b0:	4659      	mov	r1, fp
 80074b2:	f7f9 f8a1 	bl	80005f8 <__aeabi_dmul>
 80074b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4682      	mov	sl, r0
 80074c0:	468b      	mov	fp, r1
 80074c2:	e772      	b.n	80073aa <_strtod_l+0xa8a>
 80074c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80074c8:	e7df      	b.n	800748a <_strtod_l+0xb6a>
 80074ca:	a30d      	add	r3, pc, #52	; (adr r3, 8007500 <_strtod_l+0xbe0>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 fb04 	bl	8000adc <__aeabi_dcmplt>
 80074d4:	e79c      	b.n	8007410 <_strtod_l+0xaf0>
 80074d6:	2300      	movs	r3, #0
 80074d8:	930d      	str	r3, [sp, #52]	; 0x34
 80074da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	f7ff ba61 	b.w	80069a6 <_strtod_l+0x86>
 80074e4:	2b65      	cmp	r3, #101	; 0x65
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f43f ab4e 	beq.w	8006b8a <_strtod_l+0x26a>
 80074ee:	2101      	movs	r1, #1
 80074f0:	4614      	mov	r4, r2
 80074f2:	9104      	str	r1, [sp, #16]
 80074f4:	f7ff bacb 	b.w	8006a8e <_strtod_l+0x16e>
 80074f8:	ffc00000 	.word	0xffc00000
 80074fc:	41dfffff 	.word	0x41dfffff
 8007500:	94a03595 	.word	0x94a03595
 8007504:	3fcfffff 	.word	0x3fcfffff

08007508 <_strtod_r>:
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <_strtod_r+0x18>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b410      	push	{r4}
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	4c04      	ldr	r4, [pc, #16]	; (8007524 <_strtod_r+0x1c>)
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf08      	it	eq
 8007516:	4623      	moveq	r3, r4
 8007518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751c:	f7ff ba00 	b.w	8006920 <_strtod_l>
 8007520:	20000010 	.word	0x20000010
 8007524:	20000074 	.word	0x20000074

08007528 <_strtol_l.isra.0>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	4680      	mov	r8, r0
 800752e:	4689      	mov	r9, r1
 8007530:	4692      	mov	sl, r2
 8007532:	461e      	mov	r6, r3
 8007534:	460f      	mov	r7, r1
 8007536:	463d      	mov	r5, r7
 8007538:	9808      	ldr	r0, [sp, #32]
 800753a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800753e:	f001 f9ed 	bl	800891c <__locale_ctype_ptr_l>
 8007542:	4420      	add	r0, r4
 8007544:	7843      	ldrb	r3, [r0, #1]
 8007546:	f013 0308 	ands.w	r3, r3, #8
 800754a:	d132      	bne.n	80075b2 <_strtol_l.isra.0+0x8a>
 800754c:	2c2d      	cmp	r4, #45	; 0x2d
 800754e:	d132      	bne.n	80075b6 <_strtol_l.isra.0+0x8e>
 8007550:	787c      	ldrb	r4, [r7, #1]
 8007552:	1cbd      	adds	r5, r7, #2
 8007554:	2201      	movs	r2, #1
 8007556:	2e00      	cmp	r6, #0
 8007558:	d05d      	beq.n	8007616 <_strtol_l.isra.0+0xee>
 800755a:	2e10      	cmp	r6, #16
 800755c:	d109      	bne.n	8007572 <_strtol_l.isra.0+0x4a>
 800755e:	2c30      	cmp	r4, #48	; 0x30
 8007560:	d107      	bne.n	8007572 <_strtol_l.isra.0+0x4a>
 8007562:	782b      	ldrb	r3, [r5, #0]
 8007564:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007568:	2b58      	cmp	r3, #88	; 0x58
 800756a:	d14f      	bne.n	800760c <_strtol_l.isra.0+0xe4>
 800756c:	786c      	ldrb	r4, [r5, #1]
 800756e:	2610      	movs	r6, #16
 8007570:	3502      	adds	r5, #2
 8007572:	2a00      	cmp	r2, #0
 8007574:	bf14      	ite	ne
 8007576:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800757a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800757e:	2700      	movs	r7, #0
 8007580:	fbb1 fcf6 	udiv	ip, r1, r6
 8007584:	4638      	mov	r0, r7
 8007586:	fb06 1e1c 	mls	lr, r6, ip, r1
 800758a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800758e:	2b09      	cmp	r3, #9
 8007590:	d817      	bhi.n	80075c2 <_strtol_l.isra.0+0x9a>
 8007592:	461c      	mov	r4, r3
 8007594:	42a6      	cmp	r6, r4
 8007596:	dd23      	ble.n	80075e0 <_strtol_l.isra.0+0xb8>
 8007598:	1c7b      	adds	r3, r7, #1
 800759a:	d007      	beq.n	80075ac <_strtol_l.isra.0+0x84>
 800759c:	4584      	cmp	ip, r0
 800759e:	d31c      	bcc.n	80075da <_strtol_l.isra.0+0xb2>
 80075a0:	d101      	bne.n	80075a6 <_strtol_l.isra.0+0x7e>
 80075a2:	45a6      	cmp	lr, r4
 80075a4:	db19      	blt.n	80075da <_strtol_l.isra.0+0xb2>
 80075a6:	fb00 4006 	mla	r0, r0, r6, r4
 80075aa:	2701      	movs	r7, #1
 80075ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b0:	e7eb      	b.n	800758a <_strtol_l.isra.0+0x62>
 80075b2:	462f      	mov	r7, r5
 80075b4:	e7bf      	b.n	8007536 <_strtol_l.isra.0+0xe>
 80075b6:	2c2b      	cmp	r4, #43	; 0x2b
 80075b8:	bf04      	itt	eq
 80075ba:	1cbd      	addeq	r5, r7, #2
 80075bc:	787c      	ldrbeq	r4, [r7, #1]
 80075be:	461a      	mov	r2, r3
 80075c0:	e7c9      	b.n	8007556 <_strtol_l.isra.0+0x2e>
 80075c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80075c6:	2b19      	cmp	r3, #25
 80075c8:	d801      	bhi.n	80075ce <_strtol_l.isra.0+0xa6>
 80075ca:	3c37      	subs	r4, #55	; 0x37
 80075cc:	e7e2      	b.n	8007594 <_strtol_l.isra.0+0x6c>
 80075ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80075d2:	2b19      	cmp	r3, #25
 80075d4:	d804      	bhi.n	80075e0 <_strtol_l.isra.0+0xb8>
 80075d6:	3c57      	subs	r4, #87	; 0x57
 80075d8:	e7dc      	b.n	8007594 <_strtol_l.isra.0+0x6c>
 80075da:	f04f 37ff 	mov.w	r7, #4294967295
 80075de:	e7e5      	b.n	80075ac <_strtol_l.isra.0+0x84>
 80075e0:	1c7b      	adds	r3, r7, #1
 80075e2:	d108      	bne.n	80075f6 <_strtol_l.isra.0+0xce>
 80075e4:	2322      	movs	r3, #34	; 0x22
 80075e6:	f8c8 3000 	str.w	r3, [r8]
 80075ea:	4608      	mov	r0, r1
 80075ec:	f1ba 0f00 	cmp.w	sl, #0
 80075f0:	d107      	bne.n	8007602 <_strtol_l.isra.0+0xda>
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	b102      	cbz	r2, 80075fa <_strtol_l.isra.0+0xd2>
 80075f8:	4240      	negs	r0, r0
 80075fa:	f1ba 0f00 	cmp.w	sl, #0
 80075fe:	d0f8      	beq.n	80075f2 <_strtol_l.isra.0+0xca>
 8007600:	b10f      	cbz	r7, 8007606 <_strtol_l.isra.0+0xde>
 8007602:	f105 39ff 	add.w	r9, r5, #4294967295
 8007606:	f8ca 9000 	str.w	r9, [sl]
 800760a:	e7f2      	b.n	80075f2 <_strtol_l.isra.0+0xca>
 800760c:	2430      	movs	r4, #48	; 0x30
 800760e:	2e00      	cmp	r6, #0
 8007610:	d1af      	bne.n	8007572 <_strtol_l.isra.0+0x4a>
 8007612:	2608      	movs	r6, #8
 8007614:	e7ad      	b.n	8007572 <_strtol_l.isra.0+0x4a>
 8007616:	2c30      	cmp	r4, #48	; 0x30
 8007618:	d0a3      	beq.n	8007562 <_strtol_l.isra.0+0x3a>
 800761a:	260a      	movs	r6, #10
 800761c:	e7a9      	b.n	8007572 <_strtol_l.isra.0+0x4a>
	...

08007620 <_strtol_r>:
 8007620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007622:	4c06      	ldr	r4, [pc, #24]	; (800763c <_strtol_r+0x1c>)
 8007624:	4d06      	ldr	r5, [pc, #24]	; (8007640 <_strtol_r+0x20>)
 8007626:	6824      	ldr	r4, [r4, #0]
 8007628:	6a24      	ldr	r4, [r4, #32]
 800762a:	2c00      	cmp	r4, #0
 800762c:	bf08      	it	eq
 800762e:	462c      	moveq	r4, r5
 8007630:	9400      	str	r4, [sp, #0]
 8007632:	f7ff ff79 	bl	8007528 <_strtol_l.isra.0>
 8007636:	b003      	add	sp, #12
 8007638:	bd30      	pop	{r4, r5, pc}
 800763a:	bf00      	nop
 800763c:	20000010 	.word	0x20000010
 8007640:	20000074 	.word	0x20000074

08007644 <quorem>:
 8007644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	6903      	ldr	r3, [r0, #16]
 800764a:	690c      	ldr	r4, [r1, #16]
 800764c:	42a3      	cmp	r3, r4
 800764e:	4680      	mov	r8, r0
 8007650:	f2c0 8082 	blt.w	8007758 <quorem+0x114>
 8007654:	3c01      	subs	r4, #1
 8007656:	f101 0714 	add.w	r7, r1, #20
 800765a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800765e:	f100 0614 	add.w	r6, r0, #20
 8007662:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007666:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800766a:	eb06 030c 	add.w	r3, r6, ip
 800766e:	3501      	adds	r5, #1
 8007670:	eb07 090c 	add.w	r9, r7, ip
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	fbb0 f5f5 	udiv	r5, r0, r5
 800767a:	b395      	cbz	r5, 80076e2 <quorem+0x9e>
 800767c:	f04f 0a00 	mov.w	sl, #0
 8007680:	4638      	mov	r0, r7
 8007682:	46b6      	mov	lr, r6
 8007684:	46d3      	mov	fp, sl
 8007686:	f850 2b04 	ldr.w	r2, [r0], #4
 800768a:	b293      	uxth	r3, r2
 800768c:	fb05 a303 	mla	r3, r5, r3, sl
 8007690:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007694:	b29b      	uxth	r3, r3
 8007696:	ebab 0303 	sub.w	r3, fp, r3
 800769a:	0c12      	lsrs	r2, r2, #16
 800769c:	f8de b000 	ldr.w	fp, [lr]
 80076a0:	fb05 a202 	mla	r2, r5, r2, sl
 80076a4:	fa13 f38b 	uxtah	r3, r3, fp
 80076a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80076ac:	fa1f fb82 	uxth.w	fp, r2
 80076b0:	f8de 2000 	ldr.w	r2, [lr]
 80076b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80076b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076bc:	b29b      	uxth	r3, r3
 80076be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c2:	4581      	cmp	r9, r0
 80076c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80076c8:	f84e 3b04 	str.w	r3, [lr], #4
 80076cc:	d2db      	bcs.n	8007686 <quorem+0x42>
 80076ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80076d2:	b933      	cbnz	r3, 80076e2 <quorem+0x9e>
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	3b04      	subs	r3, #4
 80076d8:	429e      	cmp	r6, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	d330      	bcc.n	8007740 <quorem+0xfc>
 80076de:	f8c8 4010 	str.w	r4, [r8, #16]
 80076e2:	4640      	mov	r0, r8
 80076e4:	f001 fb9c 	bl	8008e20 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	db25      	blt.n	8007738 <quorem+0xf4>
 80076ec:	3501      	adds	r5, #1
 80076ee:	4630      	mov	r0, r6
 80076f0:	f04f 0c00 	mov.w	ip, #0
 80076f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80076f8:	f8d0 e000 	ldr.w	lr, [r0]
 80076fc:	b293      	uxth	r3, r2
 80076fe:	ebac 0303 	sub.w	r3, ip, r3
 8007702:	0c12      	lsrs	r2, r2, #16
 8007704:	fa13 f38e 	uxtah	r3, r3, lr
 8007708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800770c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007716:	45b9      	cmp	r9, r7
 8007718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800771c:	f840 3b04 	str.w	r3, [r0], #4
 8007720:	d2e8      	bcs.n	80076f4 <quorem+0xb0>
 8007722:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007726:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800772a:	b92a      	cbnz	r2, 8007738 <quorem+0xf4>
 800772c:	3b04      	subs	r3, #4
 800772e:	429e      	cmp	r6, r3
 8007730:	461a      	mov	r2, r3
 8007732:	d30b      	bcc.n	800774c <quorem+0x108>
 8007734:	f8c8 4010 	str.w	r4, [r8, #16]
 8007738:	4628      	mov	r0, r5
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	3b04      	subs	r3, #4
 8007744:	2a00      	cmp	r2, #0
 8007746:	d1ca      	bne.n	80076de <quorem+0x9a>
 8007748:	3c01      	subs	r4, #1
 800774a:	e7c5      	b.n	80076d8 <quorem+0x94>
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	3b04      	subs	r3, #4
 8007750:	2a00      	cmp	r2, #0
 8007752:	d1ef      	bne.n	8007734 <quorem+0xf0>
 8007754:	3c01      	subs	r4, #1
 8007756:	e7ea      	b.n	800772e <quorem+0xea>
 8007758:	2000      	movs	r0, #0
 800775a:	e7ee      	b.n	800773a <quorem+0xf6>
 800775c:	0000      	movs	r0, r0
	...

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	ec57 6b10 	vmov	r6, r7, d0
 8007768:	b097      	sub	sp, #92	; 0x5c
 800776a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800776c:	9106      	str	r1, [sp, #24]
 800776e:	4604      	mov	r4, r0
 8007770:	920b      	str	r2, [sp, #44]	; 0x2c
 8007772:	9312      	str	r3, [sp, #72]	; 0x48
 8007774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007778:	e9cd 6700 	strd	r6, r7, [sp]
 800777c:	b93d      	cbnz	r5, 800778e <_dtoa_r+0x2e>
 800777e:	2010      	movs	r0, #16
 8007780:	f001 f8e0 	bl	8008944 <malloc>
 8007784:	6260      	str	r0, [r4, #36]	; 0x24
 8007786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800778a:	6005      	str	r5, [r0, #0]
 800778c:	60c5      	str	r5, [r0, #12]
 800778e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	b151      	cbz	r1, 80077aa <_dtoa_r+0x4a>
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	604a      	str	r2, [r1, #4]
 8007798:	2301      	movs	r3, #1
 800779a:	4093      	lsls	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 f91e 	bl	80089e0 <_Bfree>
 80077a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a6:	2200      	movs	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	1e3b      	subs	r3, r7, #0
 80077ac:	bfbb      	ittet	lt
 80077ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077b2:	9301      	strlt	r3, [sp, #4]
 80077b4:	2300      	movge	r3, #0
 80077b6:	2201      	movlt	r2, #1
 80077b8:	bfac      	ite	ge
 80077ba:	f8c8 3000 	strge.w	r3, [r8]
 80077be:	f8c8 2000 	strlt.w	r2, [r8]
 80077c2:	4baf      	ldr	r3, [pc, #700]	; (8007a80 <_dtoa_r+0x320>)
 80077c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077c8:	ea33 0308 	bics.w	r3, r3, r8
 80077cc:	d114      	bne.n	80077f8 <_dtoa_r+0x98>
 80077ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	b923      	cbnz	r3, 80077e4 <_dtoa_r+0x84>
 80077da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80077de:	2800      	cmp	r0, #0
 80077e0:	f000 8542 	beq.w	8008268 <_dtoa_r+0xb08>
 80077e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007a94 <_dtoa_r+0x334>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8544 	beq.w	8008278 <_dtoa_r+0xb18>
 80077f0:	f10b 0303 	add.w	r3, fp, #3
 80077f4:	f000 bd3e 	b.w	8008274 <_dtoa_r+0xb14>
 80077f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8007808:	4681      	mov	r9, r0
 800780a:	b168      	cbz	r0, 8007828 <_dtoa_r+0xc8>
 800780c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800780e:	2301      	movs	r3, #1
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8524 	beq.w	8008262 <_dtoa_r+0xb02>
 800781a:	4b9a      	ldr	r3, [pc, #616]	; (8007a84 <_dtoa_r+0x324>)
 800781c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800781e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	f000 bd28 	b.w	8008278 <_dtoa_r+0xb18>
 8007828:	aa14      	add	r2, sp, #80	; 0x50
 800782a:	a915      	add	r1, sp, #84	; 0x54
 800782c:	ec47 6b10 	vmov	d0, r6, r7
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fbe3 	bl	8008ffc <__d2b>
 8007836:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800783a:	9004      	str	r0, [sp, #16]
 800783c:	2d00      	cmp	r5, #0
 800783e:	d07c      	beq.n	800793a <_dtoa_r+0x1da>
 8007840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007844:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007848:	46b2      	mov	sl, r6
 800784a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800784e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007852:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007856:	2200      	movs	r2, #0
 8007858:	4b8b      	ldr	r3, [pc, #556]	; (8007a88 <_dtoa_r+0x328>)
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	f7f8 fd13 	bl	8000288 <__aeabi_dsub>
 8007862:	a381      	add	r3, pc, #516	; (adr r3, 8007a68 <_dtoa_r+0x308>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fec6 	bl	80005f8 <__aeabi_dmul>
 800786c:	a380      	add	r3, pc, #512	; (adr r3, 8007a70 <_dtoa_r+0x310>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 fd0b 	bl	800028c <__adddf3>
 8007876:	4606      	mov	r6, r0
 8007878:	4628      	mov	r0, r5
 800787a:	460f      	mov	r7, r1
 800787c:	f7f8 fe52 	bl	8000524 <__aeabi_i2d>
 8007880:	a37d      	add	r3, pc, #500	; (adr r3, 8007a78 <_dtoa_r+0x318>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4630      	mov	r0, r6
 8007890:	4639      	mov	r1, r7
 8007892:	f7f8 fcfb 	bl	800028c <__adddf3>
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	f7f9 f95d 	bl	8000b58 <__aeabi_d2iz>
 800789e:	2200      	movs	r2, #0
 80078a0:	4682      	mov	sl, r0
 80078a2:	2300      	movs	r3, #0
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f9 f918 	bl	8000adc <__aeabi_dcmplt>
 80078ac:	b148      	cbz	r0, 80078c2 <_dtoa_r+0x162>
 80078ae:	4650      	mov	r0, sl
 80078b0:	f7f8 fe38 	bl	8000524 <__aeabi_i2d>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	f7f9 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80078bc:	b908      	cbnz	r0, 80078c2 <_dtoa_r+0x162>
 80078be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c2:	f1ba 0f16 	cmp.w	sl, #22
 80078c6:	d859      	bhi.n	800797c <_dtoa_r+0x21c>
 80078c8:	4970      	ldr	r1, [pc, #448]	; (8007a8c <_dtoa_r+0x32c>)
 80078ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80078ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d6:	f7f9 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d050      	beq.n	8007980 <_dtoa_r+0x220>
 80078de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e2:	2300      	movs	r3, #0
 80078e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078e8:	1b5d      	subs	r5, r3, r5
 80078ea:	f1b5 0801 	subs.w	r8, r5, #1
 80078ee:	bf49      	itett	mi
 80078f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80078f4:	2300      	movpl	r3, #0
 80078f6:	9305      	strmi	r3, [sp, #20]
 80078f8:	f04f 0800 	movmi.w	r8, #0
 80078fc:	bf58      	it	pl
 80078fe:	9305      	strpl	r3, [sp, #20]
 8007900:	f1ba 0f00 	cmp.w	sl, #0
 8007904:	db3e      	blt.n	8007984 <_dtoa_r+0x224>
 8007906:	2300      	movs	r3, #0
 8007908:	44d0      	add	r8, sl
 800790a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800790e:	9307      	str	r3, [sp, #28]
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	2b09      	cmp	r3, #9
 8007914:	f200 8090 	bhi.w	8007a38 <_dtoa_r+0x2d8>
 8007918:	2b05      	cmp	r3, #5
 800791a:	bfc4      	itt	gt
 800791c:	3b04      	subgt	r3, #4
 800791e:	9306      	strgt	r3, [sp, #24]
 8007920:	9b06      	ldr	r3, [sp, #24]
 8007922:	f1a3 0302 	sub.w	r3, r3, #2
 8007926:	bfcc      	ite	gt
 8007928:	2500      	movgt	r5, #0
 800792a:	2501      	movle	r5, #1
 800792c:	2b03      	cmp	r3, #3
 800792e:	f200 808f 	bhi.w	8007a50 <_dtoa_r+0x2f0>
 8007932:	e8df f003 	tbb	[pc, r3]
 8007936:	7f7d      	.short	0x7f7d
 8007938:	7131      	.short	0x7131
 800793a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800793e:	441d      	add	r5, r3
 8007940:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007944:	2820      	cmp	r0, #32
 8007946:	dd13      	ble.n	8007970 <_dtoa_r+0x210>
 8007948:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	fa08 f800 	lsl.w	r8, r8, r0
 8007952:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007956:	fa23 f000 	lsr.w	r0, r3, r0
 800795a:	ea48 0000 	orr.w	r0, r8, r0
 800795e:	f7f8 fdd1 	bl	8000504 <__aeabi_ui2d>
 8007962:	2301      	movs	r3, #1
 8007964:	4682      	mov	sl, r0
 8007966:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800796a:	3d01      	subs	r5, #1
 800796c:	9313      	str	r3, [sp, #76]	; 0x4c
 800796e:	e772      	b.n	8007856 <_dtoa_r+0xf6>
 8007970:	9b00      	ldr	r3, [sp, #0]
 8007972:	f1c0 0020 	rsb	r0, r0, #32
 8007976:	fa03 f000 	lsl.w	r0, r3, r0
 800797a:	e7f0      	b.n	800795e <_dtoa_r+0x1fe>
 800797c:	2301      	movs	r3, #1
 800797e:	e7b1      	b.n	80078e4 <_dtoa_r+0x184>
 8007980:	900f      	str	r0, [sp, #60]	; 0x3c
 8007982:	e7b0      	b.n	80078e6 <_dtoa_r+0x186>
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	eba3 030a 	sub.w	r3, r3, sl
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	f1ca 0300 	rsb	r3, sl, #0
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	2300      	movs	r3, #0
 8007994:	930e      	str	r3, [sp, #56]	; 0x38
 8007996:	e7bb      	b.n	8007910 <_dtoa_r+0x1b0>
 8007998:	2301      	movs	r3, #1
 800799a:	930a      	str	r3, [sp, #40]	; 0x28
 800799c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dd59      	ble.n	8007a56 <_dtoa_r+0x2f6>
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	4699      	mov	r9, r3
 80079a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079a8:	2200      	movs	r2, #0
 80079aa:	6072      	str	r2, [r6, #4]
 80079ac:	2204      	movs	r2, #4
 80079ae:	f102 0014 	add.w	r0, r2, #20
 80079b2:	4298      	cmp	r0, r3
 80079b4:	6871      	ldr	r1, [r6, #4]
 80079b6:	d953      	bls.n	8007a60 <_dtoa_r+0x300>
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 ffdd 	bl	8008978 <_Balloc>
 80079be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c0:	6030      	str	r0, [r6, #0]
 80079c2:	f1b9 0f0e 	cmp.w	r9, #14
 80079c6:	f8d3 b000 	ldr.w	fp, [r3]
 80079ca:	f200 80e6 	bhi.w	8007b9a <_dtoa_r+0x43a>
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	f000 80e3 	beq.w	8007b9a <_dtoa_r+0x43a>
 80079d4:	ed9d 7b00 	vldr	d7, [sp]
 80079d8:	f1ba 0f00 	cmp.w	sl, #0
 80079dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80079e0:	dd74      	ble.n	8007acc <_dtoa_r+0x36c>
 80079e2:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <_dtoa_r+0x32c>)
 80079e4:	f00a 030f 	and.w	r3, sl, #15
 80079e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079ec:	ed93 7b00 	vldr	d7, [r3]
 80079f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80079f4:	06f0      	lsls	r0, r6, #27
 80079f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80079fa:	d565      	bpl.n	8007ac8 <_dtoa_r+0x368>
 80079fc:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <_dtoa_r+0x330>)
 80079fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a06:	f7f8 ff21 	bl	800084c <__aeabi_ddiv>
 8007a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a0e:	f006 060f 	and.w	r6, r6, #15
 8007a12:	2503      	movs	r5, #3
 8007a14:	4f1e      	ldr	r7, [pc, #120]	; (8007a90 <_dtoa_r+0x330>)
 8007a16:	e04c      	b.n	8007ab2 <_dtoa_r+0x352>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1e:	4453      	add	r3, sl
 8007a20:	f103 0901 	add.w	r9, r3, #1
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	464b      	mov	r3, r9
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	bfb8      	it	lt
 8007a2c:	2301      	movlt	r3, #1
 8007a2e:	e7ba      	b.n	80079a6 <_dtoa_r+0x246>
 8007a30:	2300      	movs	r3, #0
 8007a32:	e7b2      	b.n	800799a <_dtoa_r+0x23a>
 8007a34:	2300      	movs	r3, #0
 8007a36:	e7f0      	b.n	8007a1a <_dtoa_r+0x2ba>
 8007a38:	2501      	movs	r5, #1
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9306      	str	r3, [sp, #24]
 8007a3e:	950a      	str	r5, [sp, #40]	; 0x28
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	9302      	str	r3, [sp, #8]
 8007a46:	4699      	mov	r9, r3
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2312      	movs	r3, #18
 8007a4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a4e:	e7aa      	b.n	80079a6 <_dtoa_r+0x246>
 8007a50:	2301      	movs	r3, #1
 8007a52:	930a      	str	r3, [sp, #40]	; 0x28
 8007a54:	e7f4      	b.n	8007a40 <_dtoa_r+0x2e0>
 8007a56:	2301      	movs	r3, #1
 8007a58:	9302      	str	r3, [sp, #8]
 8007a5a:	4699      	mov	r9, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	e7f5      	b.n	8007a4c <_dtoa_r+0x2ec>
 8007a60:	3101      	adds	r1, #1
 8007a62:	6071      	str	r1, [r6, #4]
 8007a64:	0052      	lsls	r2, r2, #1
 8007a66:	e7a2      	b.n	80079ae <_dtoa_r+0x24e>
 8007a68:	636f4361 	.word	0x636f4361
 8007a6c:	3fd287a7 	.word	0x3fd287a7
 8007a70:	8b60c8b3 	.word	0x8b60c8b3
 8007a74:	3fc68a28 	.word	0x3fc68a28
 8007a78:	509f79fb 	.word	0x509f79fb
 8007a7c:	3fd34413 	.word	0x3fd34413
 8007a80:	7ff00000 	.word	0x7ff00000
 8007a84:	08009725 	.word	0x08009725
 8007a88:	3ff80000 	.word	0x3ff80000
 8007a8c:	080097e0 	.word	0x080097e0
 8007a90:	080097b8 	.word	0x080097b8
 8007a94:	080097a9 	.word	0x080097a9
 8007a98:	07f1      	lsls	r1, r6, #31
 8007a9a:	d508      	bpl.n	8007aae <_dtoa_r+0x34e>
 8007a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007aac:	3501      	adds	r5, #1
 8007aae:	1076      	asrs	r6, r6, #1
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d1f0      	bne.n	8007a98 <_dtoa_r+0x338>
 8007ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007abe:	f7f8 fec5 	bl	800084c <__aeabi_ddiv>
 8007ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ac6:	e01a      	b.n	8007afe <_dtoa_r+0x39e>
 8007ac8:	2502      	movs	r5, #2
 8007aca:	e7a3      	b.n	8007a14 <_dtoa_r+0x2b4>
 8007acc:	f000 80a0 	beq.w	8007c10 <_dtoa_r+0x4b0>
 8007ad0:	f1ca 0600 	rsb	r6, sl, #0
 8007ad4:	4b9f      	ldr	r3, [pc, #636]	; (8007d54 <_dtoa_r+0x5f4>)
 8007ad6:	4fa0      	ldr	r7, [pc, #640]	; (8007d58 <_dtoa_r+0x5f8>)
 8007ad8:	f006 020f 	and.w	r2, r6, #15
 8007adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ae8:	f7f8 fd86 	bl	80005f8 <__aeabi_dmul>
 8007aec:	e9cd 0100 	strd	r0, r1, [sp]
 8007af0:	1136      	asrs	r6, r6, #4
 8007af2:	2300      	movs	r3, #0
 8007af4:	2502      	movs	r5, #2
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d17f      	bne.n	8007bfa <_dtoa_r+0x49a>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e1      	bne.n	8007ac2 <_dtoa_r+0x362>
 8007afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8087 	beq.w	8007c14 <_dtoa_r+0x4b4>
 8007b06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4b93      	ldr	r3, [pc, #588]	; (8007d5c <_dtoa_r+0x5fc>)
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d07c      	beq.n	8007c14 <_dtoa_r+0x4b4>
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	d079      	beq.n	8007c14 <_dtoa_r+0x4b4>
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dd35      	ble.n	8007b92 <_dtoa_r+0x432>
 8007b26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b2a:	9308      	str	r3, [sp, #32]
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b8b      	ldr	r3, [pc, #556]	; (8007d60 <_dtoa_r+0x600>)
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	e9cd 0100 	strd	r0, r1, [sp]
 8007b3c:	9f02      	ldr	r7, [sp, #8]
 8007b3e:	3501      	adds	r5, #1
 8007b40:	4628      	mov	r0, r5
 8007b42:	f7f8 fcef 	bl	8000524 <__aeabi_i2d>
 8007b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b4a:	f7f8 fd55 	bl	80005f8 <__aeabi_dmul>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4b84      	ldr	r3, [pc, #528]	; (8007d64 <_dtoa_r+0x604>)
 8007b52:	f7f8 fb9b 	bl	800028c <__adddf3>
 8007b56:	4605      	mov	r5, r0
 8007b58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	d15d      	bne.n	8007c1c <_dtoa_r+0x4bc>
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b81      	ldr	r3, [pc, #516]	; (8007d68 <_dtoa_r+0x608>)
 8007b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b68:	f7f8 fb8e 	bl	8000288 <__aeabi_dsub>
 8007b6c:	462a      	mov	r2, r5
 8007b6e:	4633      	mov	r3, r6
 8007b70:	e9cd 0100 	strd	r0, r1, [sp]
 8007b74:	f7f8 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f040 8288 	bne.w	800808e <_dtoa_r+0x92e>
 8007b7e:	462a      	mov	r2, r5
 8007b80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b88:	f7f8 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 827c 	bne.w	800808a <_dtoa_r+0x92a>
 8007b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b96:	e9cd 2300 	strd	r2, r3, [sp]
 8007b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f2c0 8150 	blt.w	8007e42 <_dtoa_r+0x6e2>
 8007ba2:	f1ba 0f0e 	cmp.w	sl, #14
 8007ba6:	f300 814c 	bgt.w	8007e42 <_dtoa_r+0x6e2>
 8007baa:	4b6a      	ldr	r3, [pc, #424]	; (8007d54 <_dtoa_r+0x5f4>)
 8007bac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bb0:	ed93 7b00 	vldr	d7, [r3]
 8007bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bbc:	f280 80d8 	bge.w	8007d70 <_dtoa_r+0x610>
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	f300 80d4 	bgt.w	8007d70 <_dtoa_r+0x610>
 8007bc8:	f040 825e 	bne.w	8008088 <_dtoa_r+0x928>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4b66      	ldr	r3, [pc, #408]	; (8007d68 <_dtoa_r+0x608>)
 8007bd0:	ec51 0b17 	vmov	r0, r1, d7
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bdc:	f7f8 ff92 	bl	8000b04 <__aeabi_dcmpge>
 8007be0:	464f      	mov	r7, r9
 8007be2:	464e      	mov	r6, r9
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 8234 	bne.w	8008052 <_dtoa_r+0x8f2>
 8007bea:	2331      	movs	r3, #49	; 0x31
 8007bec:	f10b 0501 	add.w	r5, fp, #1
 8007bf0:	f88b 3000 	strb.w	r3, [fp]
 8007bf4:	f10a 0a01 	add.w	sl, sl, #1
 8007bf8:	e22f      	b.n	800805a <_dtoa_r+0x8fa>
 8007bfa:	07f2      	lsls	r2, r6, #31
 8007bfc:	d505      	bpl.n	8007c0a <_dtoa_r+0x4aa>
 8007bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c02:	f7f8 fcf9 	bl	80005f8 <__aeabi_dmul>
 8007c06:	3501      	adds	r5, #1
 8007c08:	2301      	movs	r3, #1
 8007c0a:	1076      	asrs	r6, r6, #1
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	e772      	b.n	8007af6 <_dtoa_r+0x396>
 8007c10:	2502      	movs	r5, #2
 8007c12:	e774      	b.n	8007afe <_dtoa_r+0x39e>
 8007c14:	f8cd a020 	str.w	sl, [sp, #32]
 8007c18:	464f      	mov	r7, r9
 8007c1a:	e791      	b.n	8007b40 <_dtoa_r+0x3e0>
 8007c1c:	4b4d      	ldr	r3, [pc, #308]	; (8007d54 <_dtoa_r+0x5f4>)
 8007c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d047      	beq.n	8007cbc <_dtoa_r+0x55c>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	2000      	movs	r0, #0
 8007c32:	494e      	ldr	r1, [pc, #312]	; (8007d6c <_dtoa_r+0x60c>)
 8007c34:	f7f8 fe0a 	bl	800084c <__aeabi_ddiv>
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4633      	mov	r3, r6
 8007c3c:	f7f8 fb24 	bl	8000288 <__aeabi_dsub>
 8007c40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c44:	465d      	mov	r5, fp
 8007c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c4a:	f7f8 ff85 	bl	8000b58 <__aeabi_d2iz>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	f7f8 fc68 	bl	8000524 <__aeabi_i2d>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c5c:	f7f8 fb14 	bl	8000288 <__aeabi_dsub>
 8007c60:	3630      	adds	r6, #48	; 0x30
 8007c62:	f805 6b01 	strb.w	r6, [r5], #1
 8007c66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c6e:	f7f8 ff35 	bl	8000adc <__aeabi_dcmplt>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d163      	bne.n	8007d3e <_dtoa_r+0x5de>
 8007c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	4937      	ldr	r1, [pc, #220]	; (8007d5c <_dtoa_r+0x5fc>)
 8007c7e:	f7f8 fb03 	bl	8000288 <__aeabi_dsub>
 8007c82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c86:	f7f8 ff29 	bl	8000adc <__aeabi_dcmplt>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f040 80b7 	bne.w	8007dfe <_dtoa_r+0x69e>
 8007c90:	eba5 030b 	sub.w	r3, r5, fp
 8007c94:	429f      	cmp	r7, r3
 8007c96:	f77f af7c 	ble.w	8007b92 <_dtoa_r+0x432>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b30      	ldr	r3, [pc, #192]	; (8007d60 <_dtoa_r+0x600>)
 8007c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ca2:	f7f8 fca9 	bl	80005f8 <__aeabi_dmul>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cac:	4b2c      	ldr	r3, [pc, #176]	; (8007d60 <_dtoa_r+0x600>)
 8007cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cba:	e7c4      	b.n	8007c46 <_dtoa_r+0x4e6>
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	4633      	mov	r3, r6
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cc8:	eb0b 0507 	add.w	r5, fp, r7
 8007ccc:	465e      	mov	r6, fp
 8007cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd2:	f7f8 ff41 	bl	8000b58 <__aeabi_d2iz>
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	f7f8 fc24 	bl	8000524 <__aeabi_i2d>
 8007cdc:	3730      	adds	r7, #48	; 0x30
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce6:	f7f8 facf 	bl	8000288 <__aeabi_dsub>
 8007cea:	f806 7b01 	strb.w	r7, [r6], #1
 8007cee:	42ae      	cmp	r6, r5
 8007cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	d126      	bne.n	8007d48 <_dtoa_r+0x5e8>
 8007cfa:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <_dtoa_r+0x60c>)
 8007cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d00:	f7f8 fac4 	bl	800028c <__adddf3>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0c:	f7f8 ff04 	bl	8000b18 <__aeabi_dcmpgt>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d174      	bne.n	8007dfe <_dtoa_r+0x69e>
 8007d14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d18:	2000      	movs	r0, #0
 8007d1a:	4914      	ldr	r1, [pc, #80]	; (8007d6c <_dtoa_r+0x60c>)
 8007d1c:	f7f8 fab4 	bl	8000288 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d28:	f7f8 fed8 	bl	8000adc <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f43f af30 	beq.w	8007b92 <_dtoa_r+0x432>
 8007d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d36:	2b30      	cmp	r3, #48	; 0x30
 8007d38:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d3c:	d002      	beq.n	8007d44 <_dtoa_r+0x5e4>
 8007d3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d42:	e04a      	b.n	8007dda <_dtoa_r+0x67a>
 8007d44:	4615      	mov	r5, r2
 8007d46:	e7f4      	b.n	8007d32 <_dtoa_r+0x5d2>
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <_dtoa_r+0x600>)
 8007d4a:	f7f8 fc55 	bl	80005f8 <__aeabi_dmul>
 8007d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8007d52:	e7bc      	b.n	8007cce <_dtoa_r+0x56e>
 8007d54:	080097e0 	.word	0x080097e0
 8007d58:	080097b8 	.word	0x080097b8
 8007d5c:	3ff00000 	.word	0x3ff00000
 8007d60:	40240000 	.word	0x40240000
 8007d64:	401c0000 	.word	0x401c0000
 8007d68:	40140000 	.word	0x40140000
 8007d6c:	3fe00000 	.word	0x3fe00000
 8007d70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d74:	465d      	mov	r5, fp
 8007d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 fd65 	bl	800084c <__aeabi_ddiv>
 8007d82:	f7f8 fee9 	bl	8000b58 <__aeabi_d2iz>
 8007d86:	4680      	mov	r8, r0
 8007d88:	f7f8 fbcc 	bl	8000524 <__aeabi_i2d>
 8007d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d90:	f7f8 fc32 	bl	80005f8 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	f805 6b01 	strb.w	r6, [r5], #1
 8007da8:	eba5 060b 	sub.w	r6, r5, fp
 8007dac:	45b1      	cmp	r9, r6
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	d139      	bne.n	8007e28 <_dtoa_r+0x6c8>
 8007db4:	f7f8 fa6a 	bl	800028c <__adddf3>
 8007db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	f7f8 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 8007dc4:	b9c8      	cbnz	r0, 8007dfa <_dtoa_r+0x69a>
 8007dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dd2:	b110      	cbz	r0, 8007dda <_dtoa_r+0x67a>
 8007dd4:	f018 0f01 	tst.w	r8, #1
 8007dd8:	d10f      	bne.n	8007dfa <_dtoa_r+0x69a>
 8007dda:	9904      	ldr	r1, [sp, #16]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fdff 	bl	80089e0 <_Bfree>
 8007de2:	2300      	movs	r3, #0
 8007de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de6:	702b      	strb	r3, [r5, #0]
 8007de8:	f10a 0301 	add.w	r3, sl, #1
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8241 	beq.w	8008278 <_dtoa_r+0xb18>
 8007df6:	601d      	str	r5, [r3, #0]
 8007df8:	e23e      	b.n	8008278 <_dtoa_r+0xb18>
 8007dfa:	f8cd a020 	str.w	sl, [sp, #32]
 8007dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e02:	2a39      	cmp	r2, #57	; 0x39
 8007e04:	f105 33ff 	add.w	r3, r5, #4294967295
 8007e08:	d108      	bne.n	8007e1c <_dtoa_r+0x6bc>
 8007e0a:	459b      	cmp	fp, r3
 8007e0c:	d10a      	bne.n	8007e24 <_dtoa_r+0x6c4>
 8007e0e:	9b08      	ldr	r3, [sp, #32]
 8007e10:	3301      	adds	r3, #1
 8007e12:	9308      	str	r3, [sp, #32]
 8007e14:	2330      	movs	r3, #48	; 0x30
 8007e16:	f88b 3000 	strb.w	r3, [fp]
 8007e1a:	465b      	mov	r3, fp
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	3201      	adds	r2, #1
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	e78c      	b.n	8007d3e <_dtoa_r+0x5de>
 8007e24:	461d      	mov	r5, r3
 8007e26:	e7ea      	b.n	8007dfe <_dtoa_r+0x69e>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4b9b      	ldr	r3, [pc, #620]	; (8008098 <_dtoa_r+0x938>)
 8007e2c:	f7f8 fbe4 	bl	80005f8 <__aeabi_dmul>
 8007e30:	2200      	movs	r2, #0
 8007e32:	2300      	movs	r3, #0
 8007e34:	4606      	mov	r6, r0
 8007e36:	460f      	mov	r7, r1
 8007e38:	f7f8 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d09a      	beq.n	8007d76 <_dtoa_r+0x616>
 8007e40:	e7cb      	b.n	8007dda <_dtoa_r+0x67a>
 8007e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	f000 808b 	beq.w	8007f60 <_dtoa_r+0x800>
 8007e4a:	9a06      	ldr	r2, [sp, #24]
 8007e4c:	2a01      	cmp	r2, #1
 8007e4e:	dc6e      	bgt.n	8007f2e <_dtoa_r+0x7ce>
 8007e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	d067      	beq.n	8007f26 <_dtoa_r+0x7c6>
 8007e56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e5a:	9f07      	ldr	r7, [sp, #28]
 8007e5c:	9d05      	ldr	r5, [sp, #20]
 8007e5e:	9a05      	ldr	r2, [sp, #20]
 8007e60:	2101      	movs	r1, #1
 8007e62:	441a      	add	r2, r3
 8007e64:	4620      	mov	r0, r4
 8007e66:	9205      	str	r2, [sp, #20]
 8007e68:	4498      	add	r8, r3
 8007e6a:	f000 fe97 	bl	8008b9c <__i2b>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	dd0c      	ble.n	8007e8e <_dtoa_r+0x72e>
 8007e74:	f1b8 0f00 	cmp.w	r8, #0
 8007e78:	dd09      	ble.n	8007e8e <_dtoa_r+0x72e>
 8007e7a:	4545      	cmp	r5, r8
 8007e7c:	9a05      	ldr	r2, [sp, #20]
 8007e7e:	462b      	mov	r3, r5
 8007e80:	bfa8      	it	ge
 8007e82:	4643      	movge	r3, r8
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	9205      	str	r2, [sp, #20]
 8007e88:	1aed      	subs	r5, r5, r3
 8007e8a:	eba8 0803 	sub.w	r8, r8, r3
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	b1eb      	cbz	r3, 8007ece <_dtoa_r+0x76e>
 8007e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d067      	beq.n	8007f68 <_dtoa_r+0x808>
 8007e98:	b18f      	cbz	r7, 8007ebe <_dtoa_r+0x75e>
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 ff1c 	bl	8008cdc <__pow5mult>
 8007ea4:	9a04      	ldr	r2, [sp, #16]
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fe7f 	bl	8008bae <__multiply>
 8007eb0:	9904      	ldr	r1, [sp, #16]
 8007eb2:	9008      	str	r0, [sp, #32]
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fd93 	bl	80089e0 <_Bfree>
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	1bda      	subs	r2, r3, r7
 8007ec2:	d004      	beq.n	8007ece <_dtoa_r+0x76e>
 8007ec4:	9904      	ldr	r1, [sp, #16]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 ff08 	bl	8008cdc <__pow5mult>
 8007ecc:	9004      	str	r0, [sp, #16]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fe63 	bl	8008b9c <__i2b>
 8007ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed8:	4607      	mov	r7, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 81d0 	beq.w	8008280 <_dtoa_r+0xb20>
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fef9 	bl	8008cdc <__pow5mult>
 8007eea:	9b06      	ldr	r3, [sp, #24]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	4607      	mov	r7, r0
 8007ef0:	dc40      	bgt.n	8007f74 <_dtoa_r+0x814>
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d139      	bne.n	8007f6c <_dtoa_r+0x80c>
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d136      	bne.n	8007f70 <_dtoa_r+0x810>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f08:	0d1b      	lsrs	r3, r3, #20
 8007f0a:	051b      	lsls	r3, r3, #20
 8007f0c:	b12b      	cbz	r3, 8007f1a <_dtoa_r+0x7ba>
 8007f0e:	9b05      	ldr	r3, [sp, #20]
 8007f10:	3301      	adds	r3, #1
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	f108 0801 	add.w	r8, r8, #1
 8007f18:	2301      	movs	r3, #1
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d12a      	bne.n	8007f78 <_dtoa_r+0x818>
 8007f22:	2001      	movs	r0, #1
 8007f24:	e030      	b.n	8007f88 <_dtoa_r+0x828>
 8007f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f2c:	e795      	b.n	8007e5a <_dtoa_r+0x6fa>
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	f109 37ff 	add.w	r7, r9, #4294967295
 8007f34:	42bb      	cmp	r3, r7
 8007f36:	bfbf      	itttt	lt
 8007f38:	9b07      	ldrlt	r3, [sp, #28]
 8007f3a:	9707      	strlt	r7, [sp, #28]
 8007f3c:	1afa      	sublt	r2, r7, r3
 8007f3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f40:	bfbb      	ittet	lt
 8007f42:	189b      	addlt	r3, r3, r2
 8007f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f46:	1bdf      	subge	r7, r3, r7
 8007f48:	2700      	movlt	r7, #0
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	bfb5      	itete	lt
 8007f50:	9b05      	ldrlt	r3, [sp, #20]
 8007f52:	9d05      	ldrge	r5, [sp, #20]
 8007f54:	eba3 0509 	sublt.w	r5, r3, r9
 8007f58:	464b      	movge	r3, r9
 8007f5a:	bfb8      	it	lt
 8007f5c:	2300      	movlt	r3, #0
 8007f5e:	e77e      	b.n	8007e5e <_dtoa_r+0x6fe>
 8007f60:	9f07      	ldr	r7, [sp, #28]
 8007f62:	9d05      	ldr	r5, [sp, #20]
 8007f64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f66:	e783      	b.n	8007e70 <_dtoa_r+0x710>
 8007f68:	9a07      	ldr	r2, [sp, #28]
 8007f6a:	e7ab      	b.n	8007ec4 <_dtoa_r+0x764>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e7d4      	b.n	8007f1a <_dtoa_r+0x7ba>
 8007f70:	9b00      	ldr	r3, [sp, #0]
 8007f72:	e7d2      	b.n	8007f1a <_dtoa_r+0x7ba>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9307      	str	r3, [sp, #28]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007f7e:	6918      	ldr	r0, [r3, #16]
 8007f80:	f000 fdbe 	bl	8008b00 <__hi0bits>
 8007f84:	f1c0 0020 	rsb	r0, r0, #32
 8007f88:	4440      	add	r0, r8
 8007f8a:	f010 001f 	ands.w	r0, r0, #31
 8007f8e:	d047      	beq.n	8008020 <_dtoa_r+0x8c0>
 8007f90:	f1c0 0320 	rsb	r3, r0, #32
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	dd3b      	ble.n	8008010 <_dtoa_r+0x8b0>
 8007f98:	9b05      	ldr	r3, [sp, #20]
 8007f9a:	f1c0 001c 	rsb	r0, r0, #28
 8007f9e:	4403      	add	r3, r0
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	4405      	add	r5, r0
 8007fa4:	4480      	add	r8, r0
 8007fa6:	9b05      	ldr	r3, [sp, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dd05      	ble.n	8007fb8 <_dtoa_r+0x858>
 8007fac:	461a      	mov	r2, r3
 8007fae:	9904      	ldr	r1, [sp, #16]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fee1 	bl	8008d78 <__lshift>
 8007fb6:	9004      	str	r0, [sp, #16]
 8007fb8:	f1b8 0f00 	cmp.w	r8, #0
 8007fbc:	dd05      	ble.n	8007fca <_dtoa_r+0x86a>
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fed8 	bl	8008d78 <__lshift>
 8007fc8:	4607      	mov	r7, r0
 8007fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fcc:	b353      	cbz	r3, 8008024 <_dtoa_r+0x8c4>
 8007fce:	4639      	mov	r1, r7
 8007fd0:	9804      	ldr	r0, [sp, #16]
 8007fd2:	f000 ff25 	bl	8008e20 <__mcmp>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	da24      	bge.n	8008024 <_dtoa_r+0x8c4>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	220a      	movs	r2, #10
 8007fde:	9904      	ldr	r1, [sp, #16]
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fd14 	bl	8008a0e <__multadd>
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	9004      	str	r0, [sp, #16]
 8007fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 814d 	beq.w	800828e <_dtoa_r+0xb2e>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fd07 	bl	8008a0e <__multadd>
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	4606      	mov	r6, r0
 8008006:	dc4f      	bgt.n	80080a8 <_dtoa_r+0x948>
 8008008:	9b06      	ldr	r3, [sp, #24]
 800800a:	2b02      	cmp	r3, #2
 800800c:	dd4c      	ble.n	80080a8 <_dtoa_r+0x948>
 800800e:	e011      	b.n	8008034 <_dtoa_r+0x8d4>
 8008010:	d0c9      	beq.n	8007fa6 <_dtoa_r+0x846>
 8008012:	9a05      	ldr	r2, [sp, #20]
 8008014:	331c      	adds	r3, #28
 8008016:	441a      	add	r2, r3
 8008018:	9205      	str	r2, [sp, #20]
 800801a:	441d      	add	r5, r3
 800801c:	4498      	add	r8, r3
 800801e:	e7c2      	b.n	8007fa6 <_dtoa_r+0x846>
 8008020:	4603      	mov	r3, r0
 8008022:	e7f6      	b.n	8008012 <_dtoa_r+0x8b2>
 8008024:	f1b9 0f00 	cmp.w	r9, #0
 8008028:	dc38      	bgt.n	800809c <_dtoa_r+0x93c>
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	2b02      	cmp	r3, #2
 800802e:	dd35      	ble.n	800809c <_dtoa_r+0x93c>
 8008030:	f8cd 9008 	str.w	r9, [sp, #8]
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	b963      	cbnz	r3, 8008052 <_dtoa_r+0x8f2>
 8008038:	4639      	mov	r1, r7
 800803a:	2205      	movs	r2, #5
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fce6 	bl	8008a0e <__multadd>
 8008042:	4601      	mov	r1, r0
 8008044:	4607      	mov	r7, r0
 8008046:	9804      	ldr	r0, [sp, #16]
 8008048:	f000 feea 	bl	8008e20 <__mcmp>
 800804c:	2800      	cmp	r0, #0
 800804e:	f73f adcc 	bgt.w	8007bea <_dtoa_r+0x48a>
 8008052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008054:	465d      	mov	r5, fp
 8008056:	ea6f 0a03 	mvn.w	sl, r3
 800805a:	f04f 0900 	mov.w	r9, #0
 800805e:	4639      	mov	r1, r7
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fcbd 	bl	80089e0 <_Bfree>
 8008066:	2e00      	cmp	r6, #0
 8008068:	f43f aeb7 	beq.w	8007dda <_dtoa_r+0x67a>
 800806c:	f1b9 0f00 	cmp.w	r9, #0
 8008070:	d005      	beq.n	800807e <_dtoa_r+0x91e>
 8008072:	45b1      	cmp	r9, r6
 8008074:	d003      	beq.n	800807e <_dtoa_r+0x91e>
 8008076:	4649      	mov	r1, r9
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fcb1 	bl	80089e0 <_Bfree>
 800807e:	4631      	mov	r1, r6
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fcad 	bl	80089e0 <_Bfree>
 8008086:	e6a8      	b.n	8007dda <_dtoa_r+0x67a>
 8008088:	2700      	movs	r7, #0
 800808a:	463e      	mov	r6, r7
 800808c:	e7e1      	b.n	8008052 <_dtoa_r+0x8f2>
 800808e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008092:	463e      	mov	r6, r7
 8008094:	e5a9      	b.n	8007bea <_dtoa_r+0x48a>
 8008096:	bf00      	nop
 8008098:	40240000 	.word	0x40240000
 800809c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809e:	f8cd 9008 	str.w	r9, [sp, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80fa 	beq.w	800829c <_dtoa_r+0xb3c>
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	dd05      	ble.n	80080b8 <_dtoa_r+0x958>
 80080ac:	4631      	mov	r1, r6
 80080ae:	462a      	mov	r2, r5
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fe61 	bl	8008d78 <__lshift>
 80080b6:	4606      	mov	r6, r0
 80080b8:	9b07      	ldr	r3, [sp, #28]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d04c      	beq.n	8008158 <_dtoa_r+0x9f8>
 80080be:	6871      	ldr	r1, [r6, #4]
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fc59 	bl	8008978 <_Balloc>
 80080c6:	6932      	ldr	r2, [r6, #16]
 80080c8:	3202      	adds	r2, #2
 80080ca:	4605      	mov	r5, r0
 80080cc:	0092      	lsls	r2, r2, #2
 80080ce:	f106 010c 	add.w	r1, r6, #12
 80080d2:	300c      	adds	r0, #12
 80080d4:	f7fd fd8e 	bl	8005bf4 <memcpy>
 80080d8:	2201      	movs	r2, #1
 80080da:	4629      	mov	r1, r5
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fe4b 	bl	8008d78 <__lshift>
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	f8cd b014 	str.w	fp, [sp, #20]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	46b1      	mov	r9, r6
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	4606      	mov	r6, r0
 80080f2:	4639      	mov	r1, r7
 80080f4:	9804      	ldr	r0, [sp, #16]
 80080f6:	f7ff faa5 	bl	8007644 <quorem>
 80080fa:	4649      	mov	r1, r9
 80080fc:	4605      	mov	r5, r0
 80080fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008102:	9804      	ldr	r0, [sp, #16]
 8008104:	f000 fe8c 	bl	8008e20 <__mcmp>
 8008108:	4632      	mov	r2, r6
 800810a:	9000      	str	r0, [sp, #0]
 800810c:	4639      	mov	r1, r7
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fea0 	bl	8008e54 <__mdiff>
 8008114:	68c3      	ldr	r3, [r0, #12]
 8008116:	4602      	mov	r2, r0
 8008118:	bb03      	cbnz	r3, 800815c <_dtoa_r+0x9fc>
 800811a:	4601      	mov	r1, r0
 800811c:	9008      	str	r0, [sp, #32]
 800811e:	9804      	ldr	r0, [sp, #16]
 8008120:	f000 fe7e 	bl	8008e20 <__mcmp>
 8008124:	9a08      	ldr	r2, [sp, #32]
 8008126:	4603      	mov	r3, r0
 8008128:	4611      	mov	r1, r2
 800812a:	4620      	mov	r0, r4
 800812c:	9308      	str	r3, [sp, #32]
 800812e:	f000 fc57 	bl	80089e0 <_Bfree>
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	b9a3      	cbnz	r3, 8008160 <_dtoa_r+0xa00>
 8008136:	9a06      	ldr	r2, [sp, #24]
 8008138:	b992      	cbnz	r2, 8008160 <_dtoa_r+0xa00>
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	b982      	cbnz	r2, 8008160 <_dtoa_r+0xa00>
 800813e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008142:	d029      	beq.n	8008198 <_dtoa_r+0xa38>
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd01      	ble.n	800814e <_dtoa_r+0x9ee>
 800814a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800814e:	9b05      	ldr	r3, [sp, #20]
 8008150:	1c5d      	adds	r5, r3, #1
 8008152:	f883 8000 	strb.w	r8, [r3]
 8008156:	e782      	b.n	800805e <_dtoa_r+0x8fe>
 8008158:	4630      	mov	r0, r6
 800815a:	e7c2      	b.n	80080e2 <_dtoa_r+0x982>
 800815c:	2301      	movs	r3, #1
 800815e:	e7e3      	b.n	8008128 <_dtoa_r+0x9c8>
 8008160:	9a00      	ldr	r2, [sp, #0]
 8008162:	2a00      	cmp	r2, #0
 8008164:	db04      	blt.n	8008170 <_dtoa_r+0xa10>
 8008166:	d125      	bne.n	80081b4 <_dtoa_r+0xa54>
 8008168:	9a06      	ldr	r2, [sp, #24]
 800816a:	bb1a      	cbnz	r2, 80081b4 <_dtoa_r+0xa54>
 800816c:	9a07      	ldr	r2, [sp, #28]
 800816e:	bb0a      	cbnz	r2, 80081b4 <_dtoa_r+0xa54>
 8008170:	2b00      	cmp	r3, #0
 8008172:	ddec      	ble.n	800814e <_dtoa_r+0x9ee>
 8008174:	2201      	movs	r2, #1
 8008176:	9904      	ldr	r1, [sp, #16]
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fdfd 	bl	8008d78 <__lshift>
 800817e:	4639      	mov	r1, r7
 8008180:	9004      	str	r0, [sp, #16]
 8008182:	f000 fe4d 	bl	8008e20 <__mcmp>
 8008186:	2800      	cmp	r0, #0
 8008188:	dc03      	bgt.n	8008192 <_dtoa_r+0xa32>
 800818a:	d1e0      	bne.n	800814e <_dtoa_r+0x9ee>
 800818c:	f018 0f01 	tst.w	r8, #1
 8008190:	d0dd      	beq.n	800814e <_dtoa_r+0x9ee>
 8008192:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008196:	d1d8      	bne.n	800814a <_dtoa_r+0x9ea>
 8008198:	9b05      	ldr	r3, [sp, #20]
 800819a:	9a05      	ldr	r2, [sp, #20]
 800819c:	1c5d      	adds	r5, r3, #1
 800819e:	2339      	movs	r3, #57	; 0x39
 80081a0:	7013      	strb	r3, [r2, #0]
 80081a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081a6:	2b39      	cmp	r3, #57	; 0x39
 80081a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80081ac:	d04f      	beq.n	800824e <_dtoa_r+0xaee>
 80081ae:	3301      	adds	r3, #1
 80081b0:	7013      	strb	r3, [r2, #0]
 80081b2:	e754      	b.n	800805e <_dtoa_r+0x8fe>
 80081b4:	9a05      	ldr	r2, [sp, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f102 0501 	add.w	r5, r2, #1
 80081bc:	dd06      	ble.n	80081cc <_dtoa_r+0xa6c>
 80081be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081c2:	d0e9      	beq.n	8008198 <_dtoa_r+0xa38>
 80081c4:	f108 0801 	add.w	r8, r8, #1
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	e7c2      	b.n	8008152 <_dtoa_r+0x9f2>
 80081cc:	9a02      	ldr	r2, [sp, #8]
 80081ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80081d2:	eba5 030b 	sub.w	r3, r5, fp
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d021      	beq.n	800821e <_dtoa_r+0xabe>
 80081da:	2300      	movs	r3, #0
 80081dc:	220a      	movs	r2, #10
 80081de:	9904      	ldr	r1, [sp, #16]
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fc14 	bl	8008a0e <__multadd>
 80081e6:	45b1      	cmp	r9, r6
 80081e8:	9004      	str	r0, [sp, #16]
 80081ea:	f04f 0300 	mov.w	r3, #0
 80081ee:	f04f 020a 	mov.w	r2, #10
 80081f2:	4649      	mov	r1, r9
 80081f4:	4620      	mov	r0, r4
 80081f6:	d105      	bne.n	8008204 <_dtoa_r+0xaa4>
 80081f8:	f000 fc09 	bl	8008a0e <__multadd>
 80081fc:	4681      	mov	r9, r0
 80081fe:	4606      	mov	r6, r0
 8008200:	9505      	str	r5, [sp, #20]
 8008202:	e776      	b.n	80080f2 <_dtoa_r+0x992>
 8008204:	f000 fc03 	bl	8008a0e <__multadd>
 8008208:	4631      	mov	r1, r6
 800820a:	4681      	mov	r9, r0
 800820c:	2300      	movs	r3, #0
 800820e:	220a      	movs	r2, #10
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fbfc 	bl	8008a0e <__multadd>
 8008216:	4606      	mov	r6, r0
 8008218:	e7f2      	b.n	8008200 <_dtoa_r+0xaa0>
 800821a:	f04f 0900 	mov.w	r9, #0
 800821e:	2201      	movs	r2, #1
 8008220:	9904      	ldr	r1, [sp, #16]
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fda8 	bl	8008d78 <__lshift>
 8008228:	4639      	mov	r1, r7
 800822a:	9004      	str	r0, [sp, #16]
 800822c:	f000 fdf8 	bl	8008e20 <__mcmp>
 8008230:	2800      	cmp	r0, #0
 8008232:	dcb6      	bgt.n	80081a2 <_dtoa_r+0xa42>
 8008234:	d102      	bne.n	800823c <_dtoa_r+0xadc>
 8008236:	f018 0f01 	tst.w	r8, #1
 800823a:	d1b2      	bne.n	80081a2 <_dtoa_r+0xa42>
 800823c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008240:	2b30      	cmp	r3, #48	; 0x30
 8008242:	f105 32ff 	add.w	r2, r5, #4294967295
 8008246:	f47f af0a 	bne.w	800805e <_dtoa_r+0x8fe>
 800824a:	4615      	mov	r5, r2
 800824c:	e7f6      	b.n	800823c <_dtoa_r+0xadc>
 800824e:	4593      	cmp	fp, r2
 8008250:	d105      	bne.n	800825e <_dtoa_r+0xafe>
 8008252:	2331      	movs	r3, #49	; 0x31
 8008254:	f10a 0a01 	add.w	sl, sl, #1
 8008258:	f88b 3000 	strb.w	r3, [fp]
 800825c:	e6ff      	b.n	800805e <_dtoa_r+0x8fe>
 800825e:	4615      	mov	r5, r2
 8008260:	e79f      	b.n	80081a2 <_dtoa_r+0xa42>
 8008262:	f8df b064 	ldr.w	fp, [pc, #100]	; 80082c8 <_dtoa_r+0xb68>
 8008266:	e007      	b.n	8008278 <_dtoa_r+0xb18>
 8008268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80082cc <_dtoa_r+0xb6c>
 800826e:	b11b      	cbz	r3, 8008278 <_dtoa_r+0xb18>
 8008270:	f10b 0308 	add.w	r3, fp, #8
 8008274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4658      	mov	r0, fp
 800827a:	b017      	add	sp, #92	; 0x5c
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	9b06      	ldr	r3, [sp, #24]
 8008282:	2b01      	cmp	r3, #1
 8008284:	f77f ae35 	ble.w	8007ef2 <_dtoa_r+0x792>
 8008288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800828a:	9307      	str	r3, [sp, #28]
 800828c:	e649      	b.n	8007f22 <_dtoa_r+0x7c2>
 800828e:	9b02      	ldr	r3, [sp, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc03      	bgt.n	800829c <_dtoa_r+0xb3c>
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	2b02      	cmp	r3, #2
 8008298:	f73f aecc 	bgt.w	8008034 <_dtoa_r+0x8d4>
 800829c:	465d      	mov	r5, fp
 800829e:	4639      	mov	r1, r7
 80082a0:	9804      	ldr	r0, [sp, #16]
 80082a2:	f7ff f9cf 	bl	8007644 <quorem>
 80082a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082aa:	f805 8b01 	strb.w	r8, [r5], #1
 80082ae:	9a02      	ldr	r2, [sp, #8]
 80082b0:	eba5 030b 	sub.w	r3, r5, fp
 80082b4:	429a      	cmp	r2, r3
 80082b6:	ddb0      	ble.n	800821a <_dtoa_r+0xaba>
 80082b8:	2300      	movs	r3, #0
 80082ba:	220a      	movs	r2, #10
 80082bc:	9904      	ldr	r1, [sp, #16]
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 fba5 	bl	8008a0e <__multadd>
 80082c4:	9004      	str	r0, [sp, #16]
 80082c6:	e7ea      	b.n	800829e <_dtoa_r+0xb3e>
 80082c8:	08009724 	.word	0x08009724
 80082cc:	080097a0 	.word	0x080097a0

080082d0 <rshift>:
 80082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d2:	6906      	ldr	r6, [r0, #16]
 80082d4:	114b      	asrs	r3, r1, #5
 80082d6:	429e      	cmp	r6, r3
 80082d8:	f100 0414 	add.w	r4, r0, #20
 80082dc:	dd30      	ble.n	8008340 <rshift+0x70>
 80082de:	f011 011f 	ands.w	r1, r1, #31
 80082e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80082e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80082ea:	d108      	bne.n	80082fe <rshift+0x2e>
 80082ec:	4621      	mov	r1, r4
 80082ee:	42b2      	cmp	r2, r6
 80082f0:	460b      	mov	r3, r1
 80082f2:	d211      	bcs.n	8008318 <rshift+0x48>
 80082f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80082f8:	f841 3b04 	str.w	r3, [r1], #4
 80082fc:	e7f7      	b.n	80082ee <rshift+0x1e>
 80082fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008302:	f1c1 0c20 	rsb	ip, r1, #32
 8008306:	40cd      	lsrs	r5, r1
 8008308:	3204      	adds	r2, #4
 800830a:	4623      	mov	r3, r4
 800830c:	42b2      	cmp	r2, r6
 800830e:	4617      	mov	r7, r2
 8008310:	d30c      	bcc.n	800832c <rshift+0x5c>
 8008312:	601d      	str	r5, [r3, #0]
 8008314:	b105      	cbz	r5, 8008318 <rshift+0x48>
 8008316:	3304      	adds	r3, #4
 8008318:	1b1a      	subs	r2, r3, r4
 800831a:	42a3      	cmp	r3, r4
 800831c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008320:	bf08      	it	eq
 8008322:	2300      	moveq	r3, #0
 8008324:	6102      	str	r2, [r0, #16]
 8008326:	bf08      	it	eq
 8008328:	6143      	streq	r3, [r0, #20]
 800832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832c:	683f      	ldr	r7, [r7, #0]
 800832e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008332:	433d      	orrs	r5, r7
 8008334:	f843 5b04 	str.w	r5, [r3], #4
 8008338:	f852 5b04 	ldr.w	r5, [r2], #4
 800833c:	40cd      	lsrs	r5, r1
 800833e:	e7e5      	b.n	800830c <rshift+0x3c>
 8008340:	4623      	mov	r3, r4
 8008342:	e7e9      	b.n	8008318 <rshift+0x48>

08008344 <__hexdig_fun>:
 8008344:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008348:	2b09      	cmp	r3, #9
 800834a:	d802      	bhi.n	8008352 <__hexdig_fun+0xe>
 800834c:	3820      	subs	r0, #32
 800834e:	b2c0      	uxtb	r0, r0
 8008350:	4770      	bx	lr
 8008352:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008356:	2b05      	cmp	r3, #5
 8008358:	d801      	bhi.n	800835e <__hexdig_fun+0x1a>
 800835a:	3847      	subs	r0, #71	; 0x47
 800835c:	e7f7      	b.n	800834e <__hexdig_fun+0xa>
 800835e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008362:	2b05      	cmp	r3, #5
 8008364:	d801      	bhi.n	800836a <__hexdig_fun+0x26>
 8008366:	3827      	subs	r0, #39	; 0x27
 8008368:	e7f1      	b.n	800834e <__hexdig_fun+0xa>
 800836a:	2000      	movs	r0, #0
 800836c:	4770      	bx	lr

0800836e <__gethex>:
 800836e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	468a      	mov	sl, r1
 8008376:	9002      	str	r0, [sp, #8]
 8008378:	9816      	ldr	r0, [sp, #88]	; 0x58
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	4690      	mov	r8, r2
 800837e:	f000 fad0 	bl	8008922 <__localeconv_l>
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	4618      	mov	r0, r3
 8008388:	f7f7 ff22 	bl	80001d0 <strlen>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	9001      	str	r0, [sp, #4]
 8008390:	4403      	add	r3, r0
 8008392:	f04f 0b00 	mov.w	fp, #0
 8008396:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f8da 3000 	ldr.w	r3, [sl]
 80083a0:	3302      	adds	r3, #2
 80083a2:	461f      	mov	r7, r3
 80083a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083a8:	2830      	cmp	r0, #48	; 0x30
 80083aa:	d06c      	beq.n	8008486 <__gethex+0x118>
 80083ac:	f7ff ffca 	bl	8008344 <__hexdig_fun>
 80083b0:	4604      	mov	r4, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d16a      	bne.n	800848c <__gethex+0x11e>
 80083b6:	9a01      	ldr	r2, [sp, #4]
 80083b8:	9903      	ldr	r1, [sp, #12]
 80083ba:	4638      	mov	r0, r7
 80083bc:	f001 f8f4 	bl	80095a8 <strncmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d166      	bne.n	8008492 <__gethex+0x124>
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	5cf8      	ldrb	r0, [r7, r3]
 80083c8:	18fe      	adds	r6, r7, r3
 80083ca:	f7ff ffbb 	bl	8008344 <__hexdig_fun>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d062      	beq.n	8008498 <__gethex+0x12a>
 80083d2:	4633      	mov	r3, r6
 80083d4:	7818      	ldrb	r0, [r3, #0]
 80083d6:	2830      	cmp	r0, #48	; 0x30
 80083d8:	461f      	mov	r7, r3
 80083da:	f103 0301 	add.w	r3, r3, #1
 80083de:	d0f9      	beq.n	80083d4 <__gethex+0x66>
 80083e0:	f7ff ffb0 	bl	8008344 <__hexdig_fun>
 80083e4:	fab0 f580 	clz	r5, r0
 80083e8:	096d      	lsrs	r5, r5, #5
 80083ea:	4634      	mov	r4, r6
 80083ec:	f04f 0b01 	mov.w	fp, #1
 80083f0:	463a      	mov	r2, r7
 80083f2:	4616      	mov	r6, r2
 80083f4:	3201      	adds	r2, #1
 80083f6:	7830      	ldrb	r0, [r6, #0]
 80083f8:	f7ff ffa4 	bl	8008344 <__hexdig_fun>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1f8      	bne.n	80083f2 <__gethex+0x84>
 8008400:	9a01      	ldr	r2, [sp, #4]
 8008402:	9903      	ldr	r1, [sp, #12]
 8008404:	4630      	mov	r0, r6
 8008406:	f001 f8cf 	bl	80095a8 <strncmp>
 800840a:	b950      	cbnz	r0, 8008422 <__gethex+0xb4>
 800840c:	b954      	cbnz	r4, 8008424 <__gethex+0xb6>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	18f4      	adds	r4, r6, r3
 8008412:	4622      	mov	r2, r4
 8008414:	4616      	mov	r6, r2
 8008416:	3201      	adds	r2, #1
 8008418:	7830      	ldrb	r0, [r6, #0]
 800841a:	f7ff ff93 	bl	8008344 <__hexdig_fun>
 800841e:	2800      	cmp	r0, #0
 8008420:	d1f8      	bne.n	8008414 <__gethex+0xa6>
 8008422:	b10c      	cbz	r4, 8008428 <__gethex+0xba>
 8008424:	1ba4      	subs	r4, r4, r6
 8008426:	00a4      	lsls	r4, r4, #2
 8008428:	7833      	ldrb	r3, [r6, #0]
 800842a:	2b50      	cmp	r3, #80	; 0x50
 800842c:	d001      	beq.n	8008432 <__gethex+0xc4>
 800842e:	2b70      	cmp	r3, #112	; 0x70
 8008430:	d140      	bne.n	80084b4 <__gethex+0x146>
 8008432:	7873      	ldrb	r3, [r6, #1]
 8008434:	2b2b      	cmp	r3, #43	; 0x2b
 8008436:	d031      	beq.n	800849c <__gethex+0x12e>
 8008438:	2b2d      	cmp	r3, #45	; 0x2d
 800843a:	d033      	beq.n	80084a4 <__gethex+0x136>
 800843c:	1c71      	adds	r1, r6, #1
 800843e:	f04f 0900 	mov.w	r9, #0
 8008442:	7808      	ldrb	r0, [r1, #0]
 8008444:	f7ff ff7e 	bl	8008344 <__hexdig_fun>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b18      	cmp	r3, #24
 800844e:	d831      	bhi.n	80084b4 <__gethex+0x146>
 8008450:	f1a0 0210 	sub.w	r2, r0, #16
 8008454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008458:	f7ff ff74 	bl	8008344 <__hexdig_fun>
 800845c:	1e43      	subs	r3, r0, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b18      	cmp	r3, #24
 8008462:	d922      	bls.n	80084aa <__gethex+0x13c>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	d000      	beq.n	800846c <__gethex+0xfe>
 800846a:	4252      	negs	r2, r2
 800846c:	4414      	add	r4, r2
 800846e:	f8ca 1000 	str.w	r1, [sl]
 8008472:	b30d      	cbz	r5, 80084b8 <__gethex+0x14a>
 8008474:	f1bb 0f00 	cmp.w	fp, #0
 8008478:	bf0c      	ite	eq
 800847a:	2706      	moveq	r7, #6
 800847c:	2700      	movne	r7, #0
 800847e:	4638      	mov	r0, r7
 8008480:	b00b      	add	sp, #44	; 0x2c
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	f10b 0b01 	add.w	fp, fp, #1
 800848a:	e78a      	b.n	80083a2 <__gethex+0x34>
 800848c:	2500      	movs	r5, #0
 800848e:	462c      	mov	r4, r5
 8008490:	e7ae      	b.n	80083f0 <__gethex+0x82>
 8008492:	463e      	mov	r6, r7
 8008494:	2501      	movs	r5, #1
 8008496:	e7c7      	b.n	8008428 <__gethex+0xba>
 8008498:	4604      	mov	r4, r0
 800849a:	e7fb      	b.n	8008494 <__gethex+0x126>
 800849c:	f04f 0900 	mov.w	r9, #0
 80084a0:	1cb1      	adds	r1, r6, #2
 80084a2:	e7ce      	b.n	8008442 <__gethex+0xd4>
 80084a4:	f04f 0901 	mov.w	r9, #1
 80084a8:	e7fa      	b.n	80084a0 <__gethex+0x132>
 80084aa:	230a      	movs	r3, #10
 80084ac:	fb03 0202 	mla	r2, r3, r2, r0
 80084b0:	3a10      	subs	r2, #16
 80084b2:	e7cf      	b.n	8008454 <__gethex+0xe6>
 80084b4:	4631      	mov	r1, r6
 80084b6:	e7da      	b.n	800846e <__gethex+0x100>
 80084b8:	1bf3      	subs	r3, r6, r7
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4629      	mov	r1, r5
 80084be:	2b07      	cmp	r3, #7
 80084c0:	dc49      	bgt.n	8008556 <__gethex+0x1e8>
 80084c2:	9802      	ldr	r0, [sp, #8]
 80084c4:	f000 fa58 	bl	8008978 <_Balloc>
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	f100 0914 	add.w	r9, r0, #20
 80084ce:	f04f 0b00 	mov.w	fp, #0
 80084d2:	f1c3 0301 	rsb	r3, r3, #1
 80084d6:	4605      	mov	r5, r0
 80084d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80084dc:	46da      	mov	sl, fp
 80084de:	9308      	str	r3, [sp, #32]
 80084e0:	42b7      	cmp	r7, r6
 80084e2:	d33b      	bcc.n	800855c <__gethex+0x1ee>
 80084e4:	9804      	ldr	r0, [sp, #16]
 80084e6:	f840 ab04 	str.w	sl, [r0], #4
 80084ea:	eba0 0009 	sub.w	r0, r0, r9
 80084ee:	1080      	asrs	r0, r0, #2
 80084f0:	6128      	str	r0, [r5, #16]
 80084f2:	0147      	lsls	r7, r0, #5
 80084f4:	4650      	mov	r0, sl
 80084f6:	f000 fb03 	bl	8008b00 <__hi0bits>
 80084fa:	f8d8 6000 	ldr.w	r6, [r8]
 80084fe:	1a3f      	subs	r7, r7, r0
 8008500:	42b7      	cmp	r7, r6
 8008502:	dd64      	ble.n	80085ce <__gethex+0x260>
 8008504:	1bbf      	subs	r7, r7, r6
 8008506:	4639      	mov	r1, r7
 8008508:	4628      	mov	r0, r5
 800850a:	f000 fe13 	bl	8009134 <__any_on>
 800850e:	4682      	mov	sl, r0
 8008510:	b178      	cbz	r0, 8008532 <__gethex+0x1c4>
 8008512:	1e7b      	subs	r3, r7, #1
 8008514:	1159      	asrs	r1, r3, #5
 8008516:	f003 021f 	and.w	r2, r3, #31
 800851a:	f04f 0a01 	mov.w	sl, #1
 800851e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008522:	fa0a f202 	lsl.w	r2, sl, r2
 8008526:	420a      	tst	r2, r1
 8008528:	d003      	beq.n	8008532 <__gethex+0x1c4>
 800852a:	4553      	cmp	r3, sl
 800852c:	dc46      	bgt.n	80085bc <__gethex+0x24e>
 800852e:	f04f 0a02 	mov.w	sl, #2
 8008532:	4639      	mov	r1, r7
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff fecb 	bl	80082d0 <rshift>
 800853a:	443c      	add	r4, r7
 800853c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008540:	42a3      	cmp	r3, r4
 8008542:	da52      	bge.n	80085ea <__gethex+0x27c>
 8008544:	4629      	mov	r1, r5
 8008546:	9802      	ldr	r0, [sp, #8]
 8008548:	f000 fa4a 	bl	80089e0 <_Bfree>
 800854c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800854e:	2300      	movs	r3, #0
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	27a3      	movs	r7, #163	; 0xa3
 8008554:	e793      	b.n	800847e <__gethex+0x110>
 8008556:	3101      	adds	r1, #1
 8008558:	105b      	asrs	r3, r3, #1
 800855a:	e7b0      	b.n	80084be <__gethex+0x150>
 800855c:	1e73      	subs	r3, r6, #1
 800855e:	9305      	str	r3, [sp, #20]
 8008560:	9a07      	ldr	r2, [sp, #28]
 8008562:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008566:	4293      	cmp	r3, r2
 8008568:	d018      	beq.n	800859c <__gethex+0x22e>
 800856a:	f1bb 0f20 	cmp.w	fp, #32
 800856e:	d107      	bne.n	8008580 <__gethex+0x212>
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	f8c3 a000 	str.w	sl, [r3]
 8008576:	3304      	adds	r3, #4
 8008578:	f04f 0a00 	mov.w	sl, #0
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	46d3      	mov	fp, sl
 8008580:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008584:	f7ff fede 	bl	8008344 <__hexdig_fun>
 8008588:	f000 000f 	and.w	r0, r0, #15
 800858c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008590:	ea4a 0a00 	orr.w	sl, sl, r0
 8008594:	f10b 0b04 	add.w	fp, fp, #4
 8008598:	9b05      	ldr	r3, [sp, #20]
 800859a:	e00d      	b.n	80085b8 <__gethex+0x24a>
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	9a08      	ldr	r2, [sp, #32]
 80085a0:	4413      	add	r3, r2
 80085a2:	42bb      	cmp	r3, r7
 80085a4:	d3e1      	bcc.n	800856a <__gethex+0x1fc>
 80085a6:	4618      	mov	r0, r3
 80085a8:	9a01      	ldr	r2, [sp, #4]
 80085aa:	9903      	ldr	r1, [sp, #12]
 80085ac:	9309      	str	r3, [sp, #36]	; 0x24
 80085ae:	f000 fffb 	bl	80095a8 <strncmp>
 80085b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d1d8      	bne.n	800856a <__gethex+0x1fc>
 80085b8:	461e      	mov	r6, r3
 80085ba:	e791      	b.n	80084e0 <__gethex+0x172>
 80085bc:	1eb9      	subs	r1, r7, #2
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 fdb8 	bl	8009134 <__any_on>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d0b2      	beq.n	800852e <__gethex+0x1c0>
 80085c8:	f04f 0a03 	mov.w	sl, #3
 80085cc:	e7b1      	b.n	8008532 <__gethex+0x1c4>
 80085ce:	da09      	bge.n	80085e4 <__gethex+0x276>
 80085d0:	1bf7      	subs	r7, r6, r7
 80085d2:	4629      	mov	r1, r5
 80085d4:	463a      	mov	r2, r7
 80085d6:	9802      	ldr	r0, [sp, #8]
 80085d8:	f000 fbce 	bl	8008d78 <__lshift>
 80085dc:	1be4      	subs	r4, r4, r7
 80085de:	4605      	mov	r5, r0
 80085e0:	f100 0914 	add.w	r9, r0, #20
 80085e4:	f04f 0a00 	mov.w	sl, #0
 80085e8:	e7a8      	b.n	800853c <__gethex+0x1ce>
 80085ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085ee:	42a0      	cmp	r0, r4
 80085f0:	dd6a      	ble.n	80086c8 <__gethex+0x35a>
 80085f2:	1b04      	subs	r4, r0, r4
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	dc2e      	bgt.n	8008656 <__gethex+0x2e8>
 80085f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d022      	beq.n	8008646 <__gethex+0x2d8>
 8008600:	2b03      	cmp	r3, #3
 8008602:	d024      	beq.n	800864e <__gethex+0x2e0>
 8008604:	2b01      	cmp	r3, #1
 8008606:	d115      	bne.n	8008634 <__gethex+0x2c6>
 8008608:	42a6      	cmp	r6, r4
 800860a:	d113      	bne.n	8008634 <__gethex+0x2c6>
 800860c:	2e01      	cmp	r6, #1
 800860e:	dc0b      	bgt.n	8008628 <__gethex+0x2ba>
 8008610:	9a06      	ldr	r2, [sp, #24]
 8008612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	2301      	movs	r3, #1
 800861a:	612b      	str	r3, [r5, #16]
 800861c:	f8c9 3000 	str.w	r3, [r9]
 8008620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008622:	2762      	movs	r7, #98	; 0x62
 8008624:	601d      	str	r5, [r3, #0]
 8008626:	e72a      	b.n	800847e <__gethex+0x110>
 8008628:	1e71      	subs	r1, r6, #1
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fd82 	bl	8009134 <__any_on>
 8008630:	2800      	cmp	r0, #0
 8008632:	d1ed      	bne.n	8008610 <__gethex+0x2a2>
 8008634:	4629      	mov	r1, r5
 8008636:	9802      	ldr	r0, [sp, #8]
 8008638:	f000 f9d2 	bl	80089e0 <_Bfree>
 800863c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800863e:	2300      	movs	r3, #0
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	2750      	movs	r7, #80	; 0x50
 8008644:	e71b      	b.n	800847e <__gethex+0x110>
 8008646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0e1      	beq.n	8008610 <__gethex+0x2a2>
 800864c:	e7f2      	b.n	8008634 <__gethex+0x2c6>
 800864e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1dd      	bne.n	8008610 <__gethex+0x2a2>
 8008654:	e7ee      	b.n	8008634 <__gethex+0x2c6>
 8008656:	1e67      	subs	r7, r4, #1
 8008658:	f1ba 0f00 	cmp.w	sl, #0
 800865c:	d131      	bne.n	80086c2 <__gethex+0x354>
 800865e:	b127      	cbz	r7, 800866a <__gethex+0x2fc>
 8008660:	4639      	mov	r1, r7
 8008662:	4628      	mov	r0, r5
 8008664:	f000 fd66 	bl	8009134 <__any_on>
 8008668:	4682      	mov	sl, r0
 800866a:	117a      	asrs	r2, r7, #5
 800866c:	2301      	movs	r3, #1
 800866e:	f007 071f 	and.w	r7, r7, #31
 8008672:	fa03 f707 	lsl.w	r7, r3, r7
 8008676:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800867a:	4621      	mov	r1, r4
 800867c:	421f      	tst	r7, r3
 800867e:	4628      	mov	r0, r5
 8008680:	bf18      	it	ne
 8008682:	f04a 0a02 	orrne.w	sl, sl, #2
 8008686:	1b36      	subs	r6, r6, r4
 8008688:	f7ff fe22 	bl	80082d0 <rshift>
 800868c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008690:	2702      	movs	r7, #2
 8008692:	f1ba 0f00 	cmp.w	sl, #0
 8008696:	d048      	beq.n	800872a <__gethex+0x3bc>
 8008698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d015      	beq.n	80086cc <__gethex+0x35e>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d017      	beq.n	80086d4 <__gethex+0x366>
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d109      	bne.n	80086bc <__gethex+0x34e>
 80086a8:	f01a 0f02 	tst.w	sl, #2
 80086ac:	d006      	beq.n	80086bc <__gethex+0x34e>
 80086ae:	f8d9 3000 	ldr.w	r3, [r9]
 80086b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80086b6:	f01a 0f01 	tst.w	sl, #1
 80086ba:	d10e      	bne.n	80086da <__gethex+0x36c>
 80086bc:	f047 0710 	orr.w	r7, r7, #16
 80086c0:	e033      	b.n	800872a <__gethex+0x3bc>
 80086c2:	f04f 0a01 	mov.w	sl, #1
 80086c6:	e7d0      	b.n	800866a <__gethex+0x2fc>
 80086c8:	2701      	movs	r7, #1
 80086ca:	e7e2      	b.n	8008692 <__gethex+0x324>
 80086cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ce:	f1c3 0301 	rsb	r3, r3, #1
 80086d2:	9315      	str	r3, [sp, #84]	; 0x54
 80086d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <__gethex+0x34e>
 80086da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80086de:	f105 0314 	add.w	r3, r5, #20
 80086e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80086e6:	eb03 010a 	add.w	r1, r3, sl
 80086ea:	f04f 0c00 	mov.w	ip, #0
 80086ee:	4618      	mov	r0, r3
 80086f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086f8:	d01c      	beq.n	8008734 <__gethex+0x3c6>
 80086fa:	3201      	adds	r2, #1
 80086fc:	6002      	str	r2, [r0, #0]
 80086fe:	2f02      	cmp	r7, #2
 8008700:	f105 0314 	add.w	r3, r5, #20
 8008704:	d138      	bne.n	8008778 <__gethex+0x40a>
 8008706:	f8d8 2000 	ldr.w	r2, [r8]
 800870a:	3a01      	subs	r2, #1
 800870c:	42b2      	cmp	r2, r6
 800870e:	d10a      	bne.n	8008726 <__gethex+0x3b8>
 8008710:	1171      	asrs	r1, r6, #5
 8008712:	2201      	movs	r2, #1
 8008714:	f006 061f 	and.w	r6, r6, #31
 8008718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800871c:	fa02 f606 	lsl.w	r6, r2, r6
 8008720:	421e      	tst	r6, r3
 8008722:	bf18      	it	ne
 8008724:	4617      	movne	r7, r2
 8008726:	f047 0720 	orr.w	r7, r7, #32
 800872a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800872c:	601d      	str	r5, [r3, #0]
 800872e:	9b06      	ldr	r3, [sp, #24]
 8008730:	601c      	str	r4, [r3, #0]
 8008732:	e6a4      	b.n	800847e <__gethex+0x110>
 8008734:	4299      	cmp	r1, r3
 8008736:	f843 cc04 	str.w	ip, [r3, #-4]
 800873a:	d8d8      	bhi.n	80086ee <__gethex+0x380>
 800873c:	68ab      	ldr	r3, [r5, #8]
 800873e:	4599      	cmp	r9, r3
 8008740:	db12      	blt.n	8008768 <__gethex+0x3fa>
 8008742:	6869      	ldr	r1, [r5, #4]
 8008744:	9802      	ldr	r0, [sp, #8]
 8008746:	3101      	adds	r1, #1
 8008748:	f000 f916 	bl	8008978 <_Balloc>
 800874c:	692a      	ldr	r2, [r5, #16]
 800874e:	3202      	adds	r2, #2
 8008750:	f105 010c 	add.w	r1, r5, #12
 8008754:	4683      	mov	fp, r0
 8008756:	0092      	lsls	r2, r2, #2
 8008758:	300c      	adds	r0, #12
 800875a:	f7fd fa4b 	bl	8005bf4 <memcpy>
 800875e:	4629      	mov	r1, r5
 8008760:	9802      	ldr	r0, [sp, #8]
 8008762:	f000 f93d 	bl	80089e0 <_Bfree>
 8008766:	465d      	mov	r5, fp
 8008768:	692b      	ldr	r3, [r5, #16]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008770:	612a      	str	r2, [r5, #16]
 8008772:	2201      	movs	r2, #1
 8008774:	615a      	str	r2, [r3, #20]
 8008776:	e7c2      	b.n	80086fe <__gethex+0x390>
 8008778:	692a      	ldr	r2, [r5, #16]
 800877a:	454a      	cmp	r2, r9
 800877c:	dd0b      	ble.n	8008796 <__gethex+0x428>
 800877e:	2101      	movs	r1, #1
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fda5 	bl	80082d0 <rshift>
 8008786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800878a:	3401      	adds	r4, #1
 800878c:	42a3      	cmp	r3, r4
 800878e:	f6ff aed9 	blt.w	8008544 <__gethex+0x1d6>
 8008792:	2701      	movs	r7, #1
 8008794:	e7c7      	b.n	8008726 <__gethex+0x3b8>
 8008796:	f016 061f 	ands.w	r6, r6, #31
 800879a:	d0fa      	beq.n	8008792 <__gethex+0x424>
 800879c:	449a      	add	sl, r3
 800879e:	f1c6 0620 	rsb	r6, r6, #32
 80087a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80087a6:	f000 f9ab 	bl	8008b00 <__hi0bits>
 80087aa:	42b0      	cmp	r0, r6
 80087ac:	dbe7      	blt.n	800877e <__gethex+0x410>
 80087ae:	e7f0      	b.n	8008792 <__gethex+0x424>

080087b0 <L_shift>:
 80087b0:	f1c2 0208 	rsb	r2, r2, #8
 80087b4:	0092      	lsls	r2, r2, #2
 80087b6:	b570      	push	{r4, r5, r6, lr}
 80087b8:	f1c2 0620 	rsb	r6, r2, #32
 80087bc:	6843      	ldr	r3, [r0, #4]
 80087be:	6804      	ldr	r4, [r0, #0]
 80087c0:	fa03 f506 	lsl.w	r5, r3, r6
 80087c4:	432c      	orrs	r4, r5
 80087c6:	40d3      	lsrs	r3, r2
 80087c8:	6004      	str	r4, [r0, #0]
 80087ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80087ce:	4288      	cmp	r0, r1
 80087d0:	d3f4      	bcc.n	80087bc <L_shift+0xc>
 80087d2:	bd70      	pop	{r4, r5, r6, pc}

080087d4 <__match>:
 80087d4:	b530      	push	{r4, r5, lr}
 80087d6:	6803      	ldr	r3, [r0, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087de:	b914      	cbnz	r4, 80087e6 <__match+0x12>
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	2001      	movs	r0, #1
 80087e4:	bd30      	pop	{r4, r5, pc}
 80087e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087ee:	2d19      	cmp	r5, #25
 80087f0:	bf98      	it	ls
 80087f2:	3220      	addls	r2, #32
 80087f4:	42a2      	cmp	r2, r4
 80087f6:	d0f0      	beq.n	80087da <__match+0x6>
 80087f8:	2000      	movs	r0, #0
 80087fa:	e7f3      	b.n	80087e4 <__match+0x10>

080087fc <__hexnan>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	680b      	ldr	r3, [r1, #0]
 8008802:	6801      	ldr	r1, [r0, #0]
 8008804:	115f      	asrs	r7, r3, #5
 8008806:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800880a:	f013 031f 	ands.w	r3, r3, #31
 800880e:	b087      	sub	sp, #28
 8008810:	bf18      	it	ne
 8008812:	3704      	addne	r7, #4
 8008814:	2500      	movs	r5, #0
 8008816:	1f3e      	subs	r6, r7, #4
 8008818:	4682      	mov	sl, r0
 800881a:	4690      	mov	r8, r2
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008822:	46b1      	mov	r9, r6
 8008824:	4634      	mov	r4, r6
 8008826:	9502      	str	r5, [sp, #8]
 8008828:	46ab      	mov	fp, r5
 800882a:	784a      	ldrb	r2, [r1, #1]
 800882c:	1c4b      	adds	r3, r1, #1
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	b342      	cbz	r2, 8008884 <__hexnan+0x88>
 8008832:	4610      	mov	r0, r2
 8008834:	9105      	str	r1, [sp, #20]
 8008836:	9204      	str	r2, [sp, #16]
 8008838:	f7ff fd84 	bl	8008344 <__hexdig_fun>
 800883c:	2800      	cmp	r0, #0
 800883e:	d143      	bne.n	80088c8 <__hexnan+0xcc>
 8008840:	9a04      	ldr	r2, [sp, #16]
 8008842:	9905      	ldr	r1, [sp, #20]
 8008844:	2a20      	cmp	r2, #32
 8008846:	d818      	bhi.n	800887a <__hexnan+0x7e>
 8008848:	9b02      	ldr	r3, [sp, #8]
 800884a:	459b      	cmp	fp, r3
 800884c:	dd13      	ble.n	8008876 <__hexnan+0x7a>
 800884e:	454c      	cmp	r4, r9
 8008850:	d206      	bcs.n	8008860 <__hexnan+0x64>
 8008852:	2d07      	cmp	r5, #7
 8008854:	dc04      	bgt.n	8008860 <__hexnan+0x64>
 8008856:	462a      	mov	r2, r5
 8008858:	4649      	mov	r1, r9
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff ffa8 	bl	80087b0 <L_shift>
 8008860:	4544      	cmp	r4, r8
 8008862:	d944      	bls.n	80088ee <__hexnan+0xf2>
 8008864:	2300      	movs	r3, #0
 8008866:	f1a4 0904 	sub.w	r9, r4, #4
 800886a:	f844 3c04 	str.w	r3, [r4, #-4]
 800886e:	f8cd b008 	str.w	fp, [sp, #8]
 8008872:	464c      	mov	r4, r9
 8008874:	461d      	mov	r5, r3
 8008876:	9903      	ldr	r1, [sp, #12]
 8008878:	e7d7      	b.n	800882a <__hexnan+0x2e>
 800887a:	2a29      	cmp	r2, #41	; 0x29
 800887c:	d14a      	bne.n	8008914 <__hexnan+0x118>
 800887e:	3102      	adds	r1, #2
 8008880:	f8ca 1000 	str.w	r1, [sl]
 8008884:	f1bb 0f00 	cmp.w	fp, #0
 8008888:	d044      	beq.n	8008914 <__hexnan+0x118>
 800888a:	454c      	cmp	r4, r9
 800888c:	d206      	bcs.n	800889c <__hexnan+0xa0>
 800888e:	2d07      	cmp	r5, #7
 8008890:	dc04      	bgt.n	800889c <__hexnan+0xa0>
 8008892:	462a      	mov	r2, r5
 8008894:	4649      	mov	r1, r9
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff ff8a 	bl	80087b0 <L_shift>
 800889c:	4544      	cmp	r4, r8
 800889e:	d928      	bls.n	80088f2 <__hexnan+0xf6>
 80088a0:	4643      	mov	r3, r8
 80088a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80088a6:	f843 2b04 	str.w	r2, [r3], #4
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d2f9      	bcs.n	80088a2 <__hexnan+0xa6>
 80088ae:	2200      	movs	r2, #0
 80088b0:	f843 2b04 	str.w	r2, [r3], #4
 80088b4:	429e      	cmp	r6, r3
 80088b6:	d2fb      	bcs.n	80088b0 <__hexnan+0xb4>
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	b91b      	cbnz	r3, 80088c4 <__hexnan+0xc8>
 80088bc:	4546      	cmp	r6, r8
 80088be:	d127      	bne.n	8008910 <__hexnan+0x114>
 80088c0:	2301      	movs	r3, #1
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	2005      	movs	r0, #5
 80088c6:	e026      	b.n	8008916 <__hexnan+0x11a>
 80088c8:	3501      	adds	r5, #1
 80088ca:	2d08      	cmp	r5, #8
 80088cc:	f10b 0b01 	add.w	fp, fp, #1
 80088d0:	dd06      	ble.n	80088e0 <__hexnan+0xe4>
 80088d2:	4544      	cmp	r4, r8
 80088d4:	d9cf      	bls.n	8008876 <__hexnan+0x7a>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80088dc:	2501      	movs	r5, #1
 80088de:	3c04      	subs	r4, #4
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	f000 000f 	and.w	r0, r0, #15
 80088e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	e7c3      	b.n	8008876 <__hexnan+0x7a>
 80088ee:	2508      	movs	r5, #8
 80088f0:	e7c1      	b.n	8008876 <__hexnan+0x7a>
 80088f2:	9b01      	ldr	r3, [sp, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0df      	beq.n	80088b8 <__hexnan+0xbc>
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	f1c3 0320 	rsb	r3, r3, #32
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008908:	401a      	ands	r2, r3
 800890a:	f847 2c04 	str.w	r2, [r7, #-4]
 800890e:	e7d3      	b.n	80088b8 <__hexnan+0xbc>
 8008910:	3e04      	subs	r6, #4
 8008912:	e7d1      	b.n	80088b8 <__hexnan+0xbc>
 8008914:	2004      	movs	r0, #4
 8008916:	b007      	add	sp, #28
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800891c <__locale_ctype_ptr_l>:
 800891c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008920:	4770      	bx	lr

08008922 <__localeconv_l>:
 8008922:	30f0      	adds	r0, #240	; 0xf0
 8008924:	4770      	bx	lr
	...

08008928 <_localeconv_r>:
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <_localeconv_r+0x14>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a18      	ldr	r0, [r3, #32]
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <_localeconv_r+0x18>)
 8008930:	2800      	cmp	r0, #0
 8008932:	bf08      	it	eq
 8008934:	4618      	moveq	r0, r3
 8008936:	30f0      	adds	r0, #240	; 0xf0
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20000010 	.word	0x20000010
 8008940:	20000074 	.word	0x20000074

08008944 <malloc>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <malloc+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 bc71 	b.w	8009230 <_malloc_r>
 800894e:	bf00      	nop
 8008950:	20000010 	.word	0x20000010

08008954 <__ascii_mbtowc>:
 8008954:	b082      	sub	sp, #8
 8008956:	b901      	cbnz	r1, 800895a <__ascii_mbtowc+0x6>
 8008958:	a901      	add	r1, sp, #4
 800895a:	b142      	cbz	r2, 800896e <__ascii_mbtowc+0x1a>
 800895c:	b14b      	cbz	r3, 8008972 <__ascii_mbtowc+0x1e>
 800895e:	7813      	ldrb	r3, [r2, #0]
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	1c10      	adds	r0, r2, #0
 8008966:	bf18      	it	ne
 8008968:	2001      	movne	r0, #1
 800896a:	b002      	add	sp, #8
 800896c:	4770      	bx	lr
 800896e:	4610      	mov	r0, r2
 8008970:	e7fb      	b.n	800896a <__ascii_mbtowc+0x16>
 8008972:	f06f 0001 	mvn.w	r0, #1
 8008976:	e7f8      	b.n	800896a <__ascii_mbtowc+0x16>

08008978 <_Balloc>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800897c:	4604      	mov	r4, r0
 800897e:	460e      	mov	r6, r1
 8008980:	b93d      	cbnz	r5, 8008992 <_Balloc+0x1a>
 8008982:	2010      	movs	r0, #16
 8008984:	f7ff ffde 	bl	8008944 <malloc>
 8008988:	6260      	str	r0, [r4, #36]	; 0x24
 800898a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800898e:	6005      	str	r5, [r0, #0]
 8008990:	60c5      	str	r5, [r0, #12]
 8008992:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008994:	68eb      	ldr	r3, [r5, #12]
 8008996:	b183      	cbz	r3, 80089ba <_Balloc+0x42>
 8008998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089a0:	b9b8      	cbnz	r0, 80089d2 <_Balloc+0x5a>
 80089a2:	2101      	movs	r1, #1
 80089a4:	fa01 f506 	lsl.w	r5, r1, r6
 80089a8:	1d6a      	adds	r2, r5, #5
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fbe2 	bl	8009176 <_calloc_r>
 80089b2:	b160      	cbz	r0, 80089ce <_Balloc+0x56>
 80089b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089b8:	e00e      	b.n	80089d8 <_Balloc+0x60>
 80089ba:	2221      	movs	r2, #33	; 0x21
 80089bc:	2104      	movs	r1, #4
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fbd9 	bl	8009176 <_calloc_r>
 80089c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c6:	60e8      	str	r0, [r5, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e4      	bne.n	8008998 <_Balloc+0x20>
 80089ce:	2000      	movs	r0, #0
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	6802      	ldr	r2, [r0, #0]
 80089d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089d8:	2300      	movs	r3, #0
 80089da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089de:	e7f7      	b.n	80089d0 <_Balloc+0x58>

080089e0 <_Bfree>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089e4:	4606      	mov	r6, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	b93c      	cbnz	r4, 80089fa <_Bfree+0x1a>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ffaa 	bl	8008944 <malloc>
 80089f0:	6270      	str	r0, [r6, #36]	; 0x24
 80089f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089f6:	6004      	str	r4, [r0, #0]
 80089f8:	60c4      	str	r4, [r0, #12]
 80089fa:	b13d      	cbz	r5, 8008a0c <_Bfree+0x2c>
 80089fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80089fe:	686a      	ldr	r2, [r5, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a06:	6029      	str	r1, [r5, #0]
 8008a08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}

08008a0e <__multadd>:
 8008a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a12:	690d      	ldr	r5, [r1, #16]
 8008a14:	461f      	mov	r7, r3
 8008a16:	4606      	mov	r6, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	f101 0c14 	add.w	ip, r1, #20
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f8dc 0000 	ldr.w	r0, [ip]
 8008a24:	b281      	uxth	r1, r0
 8008a26:	fb02 7101 	mla	r1, r2, r1, r7
 8008a2a:	0c0f      	lsrs	r7, r1, #16
 8008a2c:	0c00      	lsrs	r0, r0, #16
 8008a2e:	fb02 7000 	mla	r0, r2, r0, r7
 8008a32:	b289      	uxth	r1, r1
 8008a34:	3301      	adds	r3, #1
 8008a36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a40:	f84c 1b04 	str.w	r1, [ip], #4
 8008a44:	dcec      	bgt.n	8008a20 <__multadd+0x12>
 8008a46:	b1d7      	cbz	r7, 8008a7e <__multadd+0x70>
 8008a48:	68a3      	ldr	r3, [r4, #8]
 8008a4a:	42ab      	cmp	r3, r5
 8008a4c:	dc12      	bgt.n	8008a74 <__multadd+0x66>
 8008a4e:	6861      	ldr	r1, [r4, #4]
 8008a50:	4630      	mov	r0, r6
 8008a52:	3101      	adds	r1, #1
 8008a54:	f7ff ff90 	bl	8008978 <_Balloc>
 8008a58:	6922      	ldr	r2, [r4, #16]
 8008a5a:	3202      	adds	r2, #2
 8008a5c:	f104 010c 	add.w	r1, r4, #12
 8008a60:	4680      	mov	r8, r0
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	300c      	adds	r0, #12
 8008a66:	f7fd f8c5 	bl	8005bf4 <memcpy>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff ffb7 	bl	80089e0 <_Bfree>
 8008a72:	4644      	mov	r4, r8
 8008a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a78:	3501      	adds	r5, #1
 8008a7a:	615f      	str	r7, [r3, #20]
 8008a7c:	6125      	str	r5, [r4, #16]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a84 <__s2b>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	4615      	mov	r5, r2
 8008a8c:	461f      	mov	r7, r3
 8008a8e:	2209      	movs	r2, #9
 8008a90:	3308      	adds	r3, #8
 8008a92:	4606      	mov	r6, r0
 8008a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a98:	2100      	movs	r1, #0
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db20      	blt.n	8008ae2 <__s2b+0x5e>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff ff69 	bl	8008978 <_Balloc>
 8008aa6:	9b08      	ldr	r3, [sp, #32]
 8008aa8:	6143      	str	r3, [r0, #20]
 8008aaa:	2d09      	cmp	r5, #9
 8008aac:	f04f 0301 	mov.w	r3, #1
 8008ab0:	6103      	str	r3, [r0, #16]
 8008ab2:	dd19      	ble.n	8008ae8 <__s2b+0x64>
 8008ab4:	f104 0809 	add.w	r8, r4, #9
 8008ab8:	46c1      	mov	r9, r8
 8008aba:	442c      	add	r4, r5
 8008abc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	3b30      	subs	r3, #48	; 0x30
 8008ac4:	220a      	movs	r2, #10
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ffa1 	bl	8008a0e <__multadd>
 8008acc:	45a1      	cmp	r9, r4
 8008ace:	d1f5      	bne.n	8008abc <__s2b+0x38>
 8008ad0:	eb08 0405 	add.w	r4, r8, r5
 8008ad4:	3c08      	subs	r4, #8
 8008ad6:	1b2d      	subs	r5, r5, r4
 8008ad8:	1963      	adds	r3, r4, r5
 8008ada:	42bb      	cmp	r3, r7
 8008adc:	db07      	blt.n	8008aee <__s2b+0x6a>
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	0052      	lsls	r2, r2, #1
 8008ae4:	3101      	adds	r1, #1
 8008ae6:	e7d9      	b.n	8008a9c <__s2b+0x18>
 8008ae8:	340a      	adds	r4, #10
 8008aea:	2509      	movs	r5, #9
 8008aec:	e7f3      	b.n	8008ad6 <__s2b+0x52>
 8008aee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008af2:	4601      	mov	r1, r0
 8008af4:	3b30      	subs	r3, #48	; 0x30
 8008af6:	220a      	movs	r2, #10
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff ff88 	bl	8008a0e <__multadd>
 8008afe:	e7eb      	b.n	8008ad8 <__s2b+0x54>

08008b00 <__hi0bits>:
 8008b00:	0c02      	lsrs	r2, r0, #16
 8008b02:	0412      	lsls	r2, r2, #16
 8008b04:	4603      	mov	r3, r0
 8008b06:	b9b2      	cbnz	r2, 8008b36 <__hi0bits+0x36>
 8008b08:	0403      	lsls	r3, r0, #16
 8008b0a:	2010      	movs	r0, #16
 8008b0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b10:	bf04      	itt	eq
 8008b12:	021b      	lsleq	r3, r3, #8
 8008b14:	3008      	addeq	r0, #8
 8008b16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b1a:	bf04      	itt	eq
 8008b1c:	011b      	lsleq	r3, r3, #4
 8008b1e:	3004      	addeq	r0, #4
 8008b20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b24:	bf04      	itt	eq
 8008b26:	009b      	lsleq	r3, r3, #2
 8008b28:	3002      	addeq	r0, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	db06      	blt.n	8008b3c <__hi0bits+0x3c>
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	d503      	bpl.n	8008b3a <__hi0bits+0x3a>
 8008b32:	3001      	adds	r0, #1
 8008b34:	4770      	bx	lr
 8008b36:	2000      	movs	r0, #0
 8008b38:	e7e8      	b.n	8008b0c <__hi0bits+0xc>
 8008b3a:	2020      	movs	r0, #32
 8008b3c:	4770      	bx	lr

08008b3e <__lo0bits>:
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	f013 0207 	ands.w	r2, r3, #7
 8008b44:	4601      	mov	r1, r0
 8008b46:	d00b      	beq.n	8008b60 <__lo0bits+0x22>
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	d423      	bmi.n	8008b94 <__lo0bits+0x56>
 8008b4c:	0798      	lsls	r0, r3, #30
 8008b4e:	bf49      	itett	mi
 8008b50:	085b      	lsrmi	r3, r3, #1
 8008b52:	089b      	lsrpl	r3, r3, #2
 8008b54:	2001      	movmi	r0, #1
 8008b56:	600b      	strmi	r3, [r1, #0]
 8008b58:	bf5c      	itt	pl
 8008b5a:	600b      	strpl	r3, [r1, #0]
 8008b5c:	2002      	movpl	r0, #2
 8008b5e:	4770      	bx	lr
 8008b60:	b298      	uxth	r0, r3
 8008b62:	b9a8      	cbnz	r0, 8008b90 <__lo0bits+0x52>
 8008b64:	0c1b      	lsrs	r3, r3, #16
 8008b66:	2010      	movs	r0, #16
 8008b68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b6c:	bf04      	itt	eq
 8008b6e:	0a1b      	lsreq	r3, r3, #8
 8008b70:	3008      	addeq	r0, #8
 8008b72:	071a      	lsls	r2, r3, #28
 8008b74:	bf04      	itt	eq
 8008b76:	091b      	lsreq	r3, r3, #4
 8008b78:	3004      	addeq	r0, #4
 8008b7a:	079a      	lsls	r2, r3, #30
 8008b7c:	bf04      	itt	eq
 8008b7e:	089b      	lsreq	r3, r3, #2
 8008b80:	3002      	addeq	r0, #2
 8008b82:	07da      	lsls	r2, r3, #31
 8008b84:	d402      	bmi.n	8008b8c <__lo0bits+0x4e>
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	d006      	beq.n	8008b98 <__lo0bits+0x5a>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	4770      	bx	lr
 8008b90:	4610      	mov	r0, r2
 8008b92:	e7e9      	b.n	8008b68 <__lo0bits+0x2a>
 8008b94:	2000      	movs	r0, #0
 8008b96:	4770      	bx	lr
 8008b98:	2020      	movs	r0, #32
 8008b9a:	4770      	bx	lr

08008b9c <__i2b>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	f7ff fee9 	bl	8008978 <_Balloc>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	6144      	str	r4, [r0, #20]
 8008baa:	6102      	str	r2, [r0, #16]
 8008bac:	bd10      	pop	{r4, pc}

08008bae <__multiply>:
 8008bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb2:	4614      	mov	r4, r2
 8008bb4:	690a      	ldr	r2, [r1, #16]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bfb8      	it	lt
 8008bbc:	460b      	movlt	r3, r1
 8008bbe:	4688      	mov	r8, r1
 8008bc0:	bfbc      	itt	lt
 8008bc2:	46a0      	movlt	r8, r4
 8008bc4:	461c      	movlt	r4, r3
 8008bc6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bd6:	eb07 0609 	add.w	r6, r7, r9
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	bfb8      	it	lt
 8008bde:	3101      	addlt	r1, #1
 8008be0:	f7ff feca 	bl	8008978 <_Balloc>
 8008be4:	f100 0514 	add.w	r5, r0, #20
 8008be8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008bec:	462b      	mov	r3, r5
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4573      	cmp	r3, lr
 8008bf2:	d316      	bcc.n	8008c22 <__multiply+0x74>
 8008bf4:	f104 0214 	add.w	r2, r4, #20
 8008bf8:	f108 0114 	add.w	r1, r8, #20
 8008bfc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008c00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d80c      	bhi.n	8008c28 <__multiply+0x7a>
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	dd03      	ble.n	8008c1a <__multiply+0x6c>
 8008c12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d05d      	beq.n	8008cd6 <__multiply+0x128>
 8008c1a:	6106      	str	r6, [r0, #16]
 8008c1c:	b003      	add	sp, #12
 8008c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c22:	f843 2b04 	str.w	r2, [r3], #4
 8008c26:	e7e3      	b.n	8008bf0 <__multiply+0x42>
 8008c28:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c2c:	f1bb 0f00 	cmp.w	fp, #0
 8008c30:	d023      	beq.n	8008c7a <__multiply+0xcc>
 8008c32:	4689      	mov	r9, r1
 8008c34:	46ac      	mov	ip, r5
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c3e:	f8dc a000 	ldr.w	sl, [ip]
 8008c42:	b2a3      	uxth	r3, r4
 8008c44:	fa1f fa8a 	uxth.w	sl, sl
 8008c48:	fb0b a303 	mla	r3, fp, r3, sl
 8008c4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c50:	f8dc 4000 	ldr.w	r4, [ip]
 8008c54:	4443      	add	r3, r8
 8008c56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c62:	46e2      	mov	sl, ip
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c6a:	454f      	cmp	r7, r9
 8008c6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c70:	f84a 3b04 	str.w	r3, [sl], #4
 8008c74:	d82b      	bhi.n	8008cce <__multiply+0x120>
 8008c76:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c7a:	9b01      	ldr	r3, [sp, #4]
 8008c7c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c80:	3204      	adds	r2, #4
 8008c82:	f1ba 0f00 	cmp.w	sl, #0
 8008c86:	d020      	beq.n	8008cca <__multiply+0x11c>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	4689      	mov	r9, r1
 8008c8c:	46a8      	mov	r8, r5
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c9a:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c9e:	445c      	add	r4, fp
 8008ca0:	46c4      	mov	ip, r8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8008cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cb0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	fb0a b303 	mla	r3, sl, r3, fp
 8008cba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008cbe:	454f      	cmp	r7, r9
 8008cc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008cc4:	d805      	bhi.n	8008cd2 <__multiply+0x124>
 8008cc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cca:	3504      	adds	r5, #4
 8008ccc:	e79b      	b.n	8008c06 <__multiply+0x58>
 8008cce:	46d4      	mov	ip, sl
 8008cd0:	e7b3      	b.n	8008c3a <__multiply+0x8c>
 8008cd2:	46e0      	mov	r8, ip
 8008cd4:	e7dd      	b.n	8008c92 <__multiply+0xe4>
 8008cd6:	3e01      	subs	r6, #1
 8008cd8:	e799      	b.n	8008c0e <__multiply+0x60>
	...

08008cdc <__pow5mult>:
 8008cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	f012 0203 	ands.w	r2, r2, #3
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	d007      	beq.n	8008cfc <__pow5mult+0x20>
 8008cec:	3a01      	subs	r2, #1
 8008cee:	4c21      	ldr	r4, [pc, #132]	; (8008d74 <__pow5mult+0x98>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cf6:	f7ff fe8a 	bl	8008a0e <__multadd>
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	10ad      	asrs	r5, r5, #2
 8008cfe:	d035      	beq.n	8008d6c <__pow5mult+0x90>
 8008d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d02:	b93c      	cbnz	r4, 8008d14 <__pow5mult+0x38>
 8008d04:	2010      	movs	r0, #16
 8008d06:	f7ff fe1d 	bl	8008944 <malloc>
 8008d0a:	6270      	str	r0, [r6, #36]	; 0x24
 8008d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d10:	6004      	str	r4, [r0, #0]
 8008d12:	60c4      	str	r4, [r0, #12]
 8008d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d1c:	b94c      	cbnz	r4, 8008d32 <__pow5mult+0x56>
 8008d1e:	f240 2171 	movw	r1, #625	; 0x271
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ff3a 	bl	8008b9c <__i2b>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d2e:	4604      	mov	r4, r0
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	07eb      	lsls	r3, r5, #31
 8008d38:	d50a      	bpl.n	8008d50 <__pow5mult+0x74>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ff35 	bl	8008bae <__multiply>
 8008d44:	4639      	mov	r1, r7
 8008d46:	4681      	mov	r9, r0
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff fe49 	bl	80089e0 <_Bfree>
 8008d4e:	464f      	mov	r7, r9
 8008d50:	106d      	asrs	r5, r5, #1
 8008d52:	d00b      	beq.n	8008d6c <__pow5mult+0x90>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	b938      	cbnz	r0, 8008d68 <__pow5mult+0x8c>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ff26 	bl	8008bae <__multiply>
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f8c0 8000 	str.w	r8, [r0]
 8008d68:	4604      	mov	r4, r0
 8008d6a:	e7e4      	b.n	8008d36 <__pow5mult+0x5a>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d72:	bf00      	nop
 8008d74:	080098a8 	.word	0x080098a8

08008d78 <__lshift>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	6849      	ldr	r1, [r1, #4]
 8008d86:	eb0a 0903 	add.w	r9, sl, r3
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	4616      	mov	r6, r2
 8008d90:	f109 0501 	add.w	r5, r9, #1
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	db32      	blt.n	8008dfe <__lshift+0x86>
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff fded 	bl	8008978 <_Balloc>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4680      	mov	r8, r0
 8008da2:	f100 0114 	add.w	r1, r0, #20
 8008da6:	461a      	mov	r2, r3
 8008da8:	4553      	cmp	r3, sl
 8008daa:	db2b      	blt.n	8008e04 <__lshift+0x8c>
 8008dac:	6920      	ldr	r0, [r4, #16]
 8008dae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db2:	f104 0314 	add.w	r3, r4, #20
 8008db6:	f016 021f 	ands.w	r2, r6, #31
 8008dba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc2:	d025      	beq.n	8008e10 <__lshift+0x98>
 8008dc4:	f1c2 0e20 	rsb	lr, r2, #32
 8008dc8:	2000      	movs	r0, #0
 8008dca:	681e      	ldr	r6, [r3, #0]
 8008dcc:	468a      	mov	sl, r1
 8008dce:	4096      	lsls	r6, r2
 8008dd0:	4330      	orrs	r0, r6
 8008dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008dd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8008dda:	459c      	cmp	ip, r3
 8008ddc:	fa20 f00e 	lsr.w	r0, r0, lr
 8008de0:	d814      	bhi.n	8008e0c <__lshift+0x94>
 8008de2:	6048      	str	r0, [r1, #4]
 8008de4:	b108      	cbz	r0, 8008dea <__lshift+0x72>
 8008de6:	f109 0502 	add.w	r5, r9, #2
 8008dea:	3d01      	subs	r5, #1
 8008dec:	4638      	mov	r0, r7
 8008dee:	f8c8 5010 	str.w	r5, [r8, #16]
 8008df2:	4621      	mov	r1, r4
 8008df4:	f7ff fdf4 	bl	80089e0 <_Bfree>
 8008df8:	4640      	mov	r0, r8
 8008dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfe:	3101      	adds	r1, #1
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	e7c7      	b.n	8008d94 <__lshift+0x1c>
 8008e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	e7cd      	b.n	8008da8 <__lshift+0x30>
 8008e0c:	4651      	mov	r1, sl
 8008e0e:	e7dc      	b.n	8008dca <__lshift+0x52>
 8008e10:	3904      	subs	r1, #4
 8008e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e16:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e1a:	459c      	cmp	ip, r3
 8008e1c:	d8f9      	bhi.n	8008e12 <__lshift+0x9a>
 8008e1e:	e7e4      	b.n	8008dea <__lshift+0x72>

08008e20 <__mcmp>:
 8008e20:	6903      	ldr	r3, [r0, #16]
 8008e22:	690a      	ldr	r2, [r1, #16]
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	b530      	push	{r4, r5, lr}
 8008e28:	d10c      	bne.n	8008e44 <__mcmp+0x24>
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	3014      	adds	r0, #20
 8008e2e:	3114      	adds	r1, #20
 8008e30:	1884      	adds	r4, r0, r2
 8008e32:	4411      	add	r1, r2
 8008e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e3c:	4295      	cmp	r5, r2
 8008e3e:	d003      	beq.n	8008e48 <__mcmp+0x28>
 8008e40:	d305      	bcc.n	8008e4e <__mcmp+0x2e>
 8008e42:	2301      	movs	r3, #1
 8008e44:	4618      	mov	r0, r3
 8008e46:	bd30      	pop	{r4, r5, pc}
 8008e48:	42a0      	cmp	r0, r4
 8008e4a:	d3f3      	bcc.n	8008e34 <__mcmp+0x14>
 8008e4c:	e7fa      	b.n	8008e44 <__mcmp+0x24>
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	e7f7      	b.n	8008e44 <__mcmp+0x24>

08008e54 <__mdiff>:
 8008e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4628      	mov	r0, r5
 8008e60:	4614      	mov	r4, r2
 8008e62:	f7ff ffdd 	bl	8008e20 <__mcmp>
 8008e66:	1e06      	subs	r6, r0, #0
 8008e68:	d108      	bne.n	8008e7c <__mdiff+0x28>
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7ff fd83 	bl	8008978 <_Balloc>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7c:	bfa4      	itt	ge
 8008e7e:	4623      	movge	r3, r4
 8008e80:	462c      	movge	r4, r5
 8008e82:	4638      	mov	r0, r7
 8008e84:	6861      	ldr	r1, [r4, #4]
 8008e86:	bfa6      	itte	ge
 8008e88:	461d      	movge	r5, r3
 8008e8a:	2600      	movge	r6, #0
 8008e8c:	2601      	movlt	r6, #1
 8008e8e:	f7ff fd73 	bl	8008978 <_Balloc>
 8008e92:	692b      	ldr	r3, [r5, #16]
 8008e94:	60c6      	str	r6, [r0, #12]
 8008e96:	6926      	ldr	r6, [r4, #16]
 8008e98:	f105 0914 	add.w	r9, r5, #20
 8008e9c:	f104 0214 	add.w	r2, r4, #20
 8008ea0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008ea4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ea8:	f100 0514 	add.w	r5, r0, #20
 8008eac:	f04f 0e00 	mov.w	lr, #0
 8008eb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8008eb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008eb8:	fa1e f18a 	uxtah	r1, lr, sl
 8008ebc:	b2a3      	uxth	r3, r4
 8008ebe:	1ac9      	subs	r1, r1, r3
 8008ec0:	0c23      	lsrs	r3, r4, #16
 8008ec2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008ec6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008eca:	b289      	uxth	r1, r1
 8008ecc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ed0:	45c8      	cmp	r8, r9
 8008ed2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ed6:	4694      	mov	ip, r2
 8008ed8:	f845 3b04 	str.w	r3, [r5], #4
 8008edc:	d8e8      	bhi.n	8008eb0 <__mdiff+0x5c>
 8008ede:	45bc      	cmp	ip, r7
 8008ee0:	d304      	bcc.n	8008eec <__mdiff+0x98>
 8008ee2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008ee6:	b183      	cbz	r3, 8008f0a <__mdiff+0xb6>
 8008ee8:	6106      	str	r6, [r0, #16]
 8008eea:	e7c5      	b.n	8008e78 <__mdiff+0x24>
 8008eec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ef0:	fa1e f381 	uxtah	r3, lr, r1
 8008ef4:	141a      	asrs	r2, r3, #16
 8008ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008f04:	f845 3b04 	str.w	r3, [r5], #4
 8008f08:	e7e9      	b.n	8008ede <__mdiff+0x8a>
 8008f0a:	3e01      	subs	r6, #1
 8008f0c:	e7e9      	b.n	8008ee2 <__mdiff+0x8e>
	...

08008f10 <__ulp>:
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <__ulp+0x4c>)
 8008f12:	ee10 2a90 	vmov	r2, s1
 8008f16:	401a      	ands	r2, r3
 8008f18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd04      	ble.n	8008f2a <__ulp+0x1a>
 8008f20:	2000      	movs	r0, #0
 8008f22:	4619      	mov	r1, r3
 8008f24:	ec41 0b10 	vmov	d0, r0, r1
 8008f28:	4770      	bx	lr
 8008f2a:	425b      	negs	r3, r3
 8008f2c:	151b      	asrs	r3, r3, #20
 8008f2e:	2b13      	cmp	r3, #19
 8008f30:	f04f 0000 	mov.w	r0, #0
 8008f34:	f04f 0100 	mov.w	r1, #0
 8008f38:	dc04      	bgt.n	8008f44 <__ulp+0x34>
 8008f3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f3e:	fa42 f103 	asr.w	r1, r2, r3
 8008f42:	e7ef      	b.n	8008f24 <__ulp+0x14>
 8008f44:	3b14      	subs	r3, #20
 8008f46:	2b1e      	cmp	r3, #30
 8008f48:	f04f 0201 	mov.w	r2, #1
 8008f4c:	bfda      	itte	le
 8008f4e:	f1c3 031f 	rsble	r3, r3, #31
 8008f52:	fa02 f303 	lslle.w	r3, r2, r3
 8008f56:	4613      	movgt	r3, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	e7e3      	b.n	8008f24 <__ulp+0x14>
 8008f5c:	7ff00000 	.word	0x7ff00000

08008f60 <__b2d>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	6905      	ldr	r5, [r0, #16]
 8008f64:	f100 0714 	add.w	r7, r0, #20
 8008f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f6c:	1f2e      	subs	r6, r5, #4
 8008f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fdc4 	bl	8008b00 <__hi0bits>
 8008f78:	f1c0 0320 	rsb	r3, r0, #32
 8008f7c:	280a      	cmp	r0, #10
 8008f7e:	600b      	str	r3, [r1, #0]
 8008f80:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008ff8 <__b2d+0x98>
 8008f84:	dc14      	bgt.n	8008fb0 <__b2d+0x50>
 8008f86:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f8e:	42b7      	cmp	r7, r6
 8008f90:	ea41 030c 	orr.w	r3, r1, ip
 8008f94:	bf34      	ite	cc
 8008f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f9a:	2100      	movcs	r1, #0
 8008f9c:	3015      	adds	r0, #21
 8008f9e:	fa04 f000 	lsl.w	r0, r4, r0
 8008fa2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008fa6:	ea40 0201 	orr.w	r2, r0, r1
 8008faa:	ec43 2b10 	vmov	d0, r2, r3
 8008fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb0:	42b7      	cmp	r7, r6
 8008fb2:	bf3a      	itte	cc
 8008fb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fbc:	2100      	movcs	r1, #0
 8008fbe:	380b      	subs	r0, #11
 8008fc0:	d015      	beq.n	8008fee <__b2d+0x8e>
 8008fc2:	4084      	lsls	r4, r0
 8008fc4:	f1c0 0520 	rsb	r5, r0, #32
 8008fc8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008fcc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008fd0:	42be      	cmp	r6, r7
 8008fd2:	fa21 fc05 	lsr.w	ip, r1, r5
 8008fd6:	ea44 030c 	orr.w	r3, r4, ip
 8008fda:	bf8c      	ite	hi
 8008fdc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008fe0:	2400      	movls	r4, #0
 8008fe2:	fa01 f000 	lsl.w	r0, r1, r0
 8008fe6:	40ec      	lsrs	r4, r5
 8008fe8:	ea40 0204 	orr.w	r2, r0, r4
 8008fec:	e7dd      	b.n	8008faa <__b2d+0x4a>
 8008fee:	ea44 030c 	orr.w	r3, r4, ip
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	e7d9      	b.n	8008faa <__b2d+0x4a>
 8008ff6:	bf00      	nop
 8008ff8:	3ff00000 	.word	0x3ff00000

08008ffc <__d2b>:
 8008ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009000:	460e      	mov	r6, r1
 8009002:	2101      	movs	r1, #1
 8009004:	ec59 8b10 	vmov	r8, r9, d0
 8009008:	4615      	mov	r5, r2
 800900a:	f7ff fcb5 	bl	8008978 <_Balloc>
 800900e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009012:	4607      	mov	r7, r0
 8009014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009018:	bb34      	cbnz	r4, 8009068 <__d2b+0x6c>
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	f1b8 0300 	subs.w	r3, r8, #0
 8009020:	d027      	beq.n	8009072 <__d2b+0x76>
 8009022:	a802      	add	r0, sp, #8
 8009024:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009028:	f7ff fd89 	bl	8008b3e <__lo0bits>
 800902c:	9900      	ldr	r1, [sp, #0]
 800902e:	b1f0      	cbz	r0, 800906e <__d2b+0x72>
 8009030:	9a01      	ldr	r2, [sp, #4]
 8009032:	f1c0 0320 	rsb	r3, r0, #32
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	430b      	orrs	r3, r1
 800903c:	40c2      	lsrs	r2, r0
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	9201      	str	r2, [sp, #4]
 8009042:	9b01      	ldr	r3, [sp, #4]
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bf14      	ite	ne
 800904a:	2102      	movne	r1, #2
 800904c:	2101      	moveq	r1, #1
 800904e:	6139      	str	r1, [r7, #16]
 8009050:	b1c4      	cbz	r4, 8009084 <__d2b+0x88>
 8009052:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009056:	4404      	add	r4, r0
 8009058:	6034      	str	r4, [r6, #0]
 800905a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800905e:	6028      	str	r0, [r5, #0]
 8009060:	4638      	mov	r0, r7
 8009062:	b003      	add	sp, #12
 8009064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800906c:	e7d5      	b.n	800901a <__d2b+0x1e>
 800906e:	6179      	str	r1, [r7, #20]
 8009070:	e7e7      	b.n	8009042 <__d2b+0x46>
 8009072:	a801      	add	r0, sp, #4
 8009074:	f7ff fd63 	bl	8008b3e <__lo0bits>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	2101      	movs	r1, #1
 800907e:	6139      	str	r1, [r7, #16]
 8009080:	3020      	adds	r0, #32
 8009082:	e7e5      	b.n	8009050 <__d2b+0x54>
 8009084:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800908c:	6030      	str	r0, [r6, #0]
 800908e:	6918      	ldr	r0, [r3, #16]
 8009090:	f7ff fd36 	bl	8008b00 <__hi0bits>
 8009094:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009098:	e7e1      	b.n	800905e <__d2b+0x62>

0800909a <__ratio>:
 800909a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909e:	4688      	mov	r8, r1
 80090a0:	4669      	mov	r1, sp
 80090a2:	4681      	mov	r9, r0
 80090a4:	f7ff ff5c 	bl	8008f60 <__b2d>
 80090a8:	a901      	add	r1, sp, #4
 80090aa:	4640      	mov	r0, r8
 80090ac:	ec57 6b10 	vmov	r6, r7, d0
 80090b0:	f7ff ff56 	bl	8008f60 <__b2d>
 80090b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090bc:	eba3 0c02 	sub.w	ip, r3, r2
 80090c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090ca:	ec5b ab10 	vmov	sl, fp, d0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfce      	itee	gt
 80090d2:	463a      	movgt	r2, r7
 80090d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090d8:	465a      	movle	r2, fp
 80090da:	4659      	mov	r1, fp
 80090dc:	463d      	mov	r5, r7
 80090de:	bfd4      	ite	le
 80090e0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80090e4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80090e8:	4630      	mov	r0, r6
 80090ea:	ee10 2a10 	vmov	r2, s0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 fbab 	bl	800084c <__aeabi_ddiv>
 80090f6:	ec41 0b10 	vmov	d0, r0, r1
 80090fa:	b003      	add	sp, #12
 80090fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009100 <__copybits>:
 8009100:	3901      	subs	r1, #1
 8009102:	b510      	push	{r4, lr}
 8009104:	1149      	asrs	r1, r1, #5
 8009106:	6914      	ldr	r4, [r2, #16]
 8009108:	3101      	adds	r1, #1
 800910a:	f102 0314 	add.w	r3, r2, #20
 800910e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009112:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009116:	42a3      	cmp	r3, r4
 8009118:	4602      	mov	r2, r0
 800911a:	d303      	bcc.n	8009124 <__copybits+0x24>
 800911c:	2300      	movs	r3, #0
 800911e:	428a      	cmp	r2, r1
 8009120:	d305      	bcc.n	800912e <__copybits+0x2e>
 8009122:	bd10      	pop	{r4, pc}
 8009124:	f853 2b04 	ldr.w	r2, [r3], #4
 8009128:	f840 2b04 	str.w	r2, [r0], #4
 800912c:	e7f3      	b.n	8009116 <__copybits+0x16>
 800912e:	f842 3b04 	str.w	r3, [r2], #4
 8009132:	e7f4      	b.n	800911e <__copybits+0x1e>

08009134 <__any_on>:
 8009134:	f100 0214 	add.w	r2, r0, #20
 8009138:	6900      	ldr	r0, [r0, #16]
 800913a:	114b      	asrs	r3, r1, #5
 800913c:	4298      	cmp	r0, r3
 800913e:	b510      	push	{r4, lr}
 8009140:	db11      	blt.n	8009166 <__any_on+0x32>
 8009142:	dd0a      	ble.n	800915a <__any_on+0x26>
 8009144:	f011 011f 	ands.w	r1, r1, #31
 8009148:	d007      	beq.n	800915a <__any_on+0x26>
 800914a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800914e:	fa24 f001 	lsr.w	r0, r4, r1
 8009152:	fa00 f101 	lsl.w	r1, r0, r1
 8009156:	428c      	cmp	r4, r1
 8009158:	d10b      	bne.n	8009172 <__any_on+0x3e>
 800915a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800915e:	4293      	cmp	r3, r2
 8009160:	d803      	bhi.n	800916a <__any_on+0x36>
 8009162:	2000      	movs	r0, #0
 8009164:	bd10      	pop	{r4, pc}
 8009166:	4603      	mov	r3, r0
 8009168:	e7f7      	b.n	800915a <__any_on+0x26>
 800916a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800916e:	2900      	cmp	r1, #0
 8009170:	d0f5      	beq.n	800915e <__any_on+0x2a>
 8009172:	2001      	movs	r0, #1
 8009174:	e7f6      	b.n	8009164 <__any_on+0x30>

08009176 <_calloc_r>:
 8009176:	b538      	push	{r3, r4, r5, lr}
 8009178:	fb02 f401 	mul.w	r4, r2, r1
 800917c:	4621      	mov	r1, r4
 800917e:	f000 f857 	bl	8009230 <_malloc_r>
 8009182:	4605      	mov	r5, r0
 8009184:	b118      	cbz	r0, 800918e <_calloc_r+0x18>
 8009186:	4622      	mov	r2, r4
 8009188:	2100      	movs	r1, #0
 800918a:	f7fc fd3e 	bl	8005c0a <memset>
 800918e:	4628      	mov	r0, r5
 8009190:	bd38      	pop	{r3, r4, r5, pc}
	...

08009194 <_free_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4605      	mov	r5, r0
 8009198:	2900      	cmp	r1, #0
 800919a:	d045      	beq.n	8009228 <_free_r+0x94>
 800919c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a0:	1f0c      	subs	r4, r1, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfb8      	it	lt
 80091a6:	18e4      	addlt	r4, r4, r3
 80091a8:	f000 fa36 	bl	8009618 <__malloc_lock>
 80091ac:	4a1f      	ldr	r2, [pc, #124]	; (800922c <_free_r+0x98>)
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	4610      	mov	r0, r2
 80091b2:	b933      	cbnz	r3, 80091c2 <_free_r+0x2e>
 80091b4:	6063      	str	r3, [r4, #4]
 80091b6:	6014      	str	r4, [r2, #0]
 80091b8:	4628      	mov	r0, r5
 80091ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091be:	f000 ba2c 	b.w	800961a <__malloc_unlock>
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	d90c      	bls.n	80091e0 <_free_r+0x4c>
 80091c6:	6821      	ldr	r1, [r4, #0]
 80091c8:	1862      	adds	r2, r4, r1
 80091ca:	4293      	cmp	r3, r2
 80091cc:	bf04      	itt	eq
 80091ce:	681a      	ldreq	r2, [r3, #0]
 80091d0:	685b      	ldreq	r3, [r3, #4]
 80091d2:	6063      	str	r3, [r4, #4]
 80091d4:	bf04      	itt	eq
 80091d6:	1852      	addeq	r2, r2, r1
 80091d8:	6022      	streq	r2, [r4, #0]
 80091da:	6004      	str	r4, [r0, #0]
 80091dc:	e7ec      	b.n	80091b8 <_free_r+0x24>
 80091de:	4613      	mov	r3, r2
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	b10a      	cbz	r2, 80091e8 <_free_r+0x54>
 80091e4:	42a2      	cmp	r2, r4
 80091e6:	d9fa      	bls.n	80091de <_free_r+0x4a>
 80091e8:	6819      	ldr	r1, [r3, #0]
 80091ea:	1858      	adds	r0, r3, r1
 80091ec:	42a0      	cmp	r0, r4
 80091ee:	d10b      	bne.n	8009208 <_free_r+0x74>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	4401      	add	r1, r0
 80091f4:	1858      	adds	r0, r3, r1
 80091f6:	4282      	cmp	r2, r0
 80091f8:	6019      	str	r1, [r3, #0]
 80091fa:	d1dd      	bne.n	80091b8 <_free_r+0x24>
 80091fc:	6810      	ldr	r0, [r2, #0]
 80091fe:	6852      	ldr	r2, [r2, #4]
 8009200:	605a      	str	r2, [r3, #4]
 8009202:	4401      	add	r1, r0
 8009204:	6019      	str	r1, [r3, #0]
 8009206:	e7d7      	b.n	80091b8 <_free_r+0x24>
 8009208:	d902      	bls.n	8009210 <_free_r+0x7c>
 800920a:	230c      	movs	r3, #12
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	e7d3      	b.n	80091b8 <_free_r+0x24>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	1821      	adds	r1, r4, r0
 8009214:	428a      	cmp	r2, r1
 8009216:	bf04      	itt	eq
 8009218:	6811      	ldreq	r1, [r2, #0]
 800921a:	6852      	ldreq	r2, [r2, #4]
 800921c:	6062      	str	r2, [r4, #4]
 800921e:	bf04      	itt	eq
 8009220:	1809      	addeq	r1, r1, r0
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	605c      	str	r4, [r3, #4]
 8009226:	e7c7      	b.n	80091b8 <_free_r+0x24>
 8009228:	bd38      	pop	{r3, r4, r5, pc}
 800922a:	bf00      	nop
 800922c:	20001170 	.word	0x20001170

08009230 <_malloc_r>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	1ccd      	adds	r5, r1, #3
 8009234:	f025 0503 	bic.w	r5, r5, #3
 8009238:	3508      	adds	r5, #8
 800923a:	2d0c      	cmp	r5, #12
 800923c:	bf38      	it	cc
 800923e:	250c      	movcc	r5, #12
 8009240:	2d00      	cmp	r5, #0
 8009242:	4606      	mov	r6, r0
 8009244:	db01      	blt.n	800924a <_malloc_r+0x1a>
 8009246:	42a9      	cmp	r1, r5
 8009248:	d903      	bls.n	8009252 <_malloc_r+0x22>
 800924a:	230c      	movs	r3, #12
 800924c:	6033      	str	r3, [r6, #0]
 800924e:	2000      	movs	r0, #0
 8009250:	bd70      	pop	{r4, r5, r6, pc}
 8009252:	f000 f9e1 	bl	8009618 <__malloc_lock>
 8009256:	4a21      	ldr	r2, [pc, #132]	; (80092dc <_malloc_r+0xac>)
 8009258:	6814      	ldr	r4, [r2, #0]
 800925a:	4621      	mov	r1, r4
 800925c:	b991      	cbnz	r1, 8009284 <_malloc_r+0x54>
 800925e:	4c20      	ldr	r4, [pc, #128]	; (80092e0 <_malloc_r+0xb0>)
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	b91b      	cbnz	r3, 800926c <_malloc_r+0x3c>
 8009264:	4630      	mov	r0, r6
 8009266:	f000 f98f 	bl	8009588 <_sbrk_r>
 800926a:	6020      	str	r0, [r4, #0]
 800926c:	4629      	mov	r1, r5
 800926e:	4630      	mov	r0, r6
 8009270:	f000 f98a 	bl	8009588 <_sbrk_r>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d124      	bne.n	80092c2 <_malloc_r+0x92>
 8009278:	230c      	movs	r3, #12
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f9cc 	bl	800961a <__malloc_unlock>
 8009282:	e7e4      	b.n	800924e <_malloc_r+0x1e>
 8009284:	680b      	ldr	r3, [r1, #0]
 8009286:	1b5b      	subs	r3, r3, r5
 8009288:	d418      	bmi.n	80092bc <_malloc_r+0x8c>
 800928a:	2b0b      	cmp	r3, #11
 800928c:	d90f      	bls.n	80092ae <_malloc_r+0x7e>
 800928e:	600b      	str	r3, [r1, #0]
 8009290:	50cd      	str	r5, [r1, r3]
 8009292:	18cc      	adds	r4, r1, r3
 8009294:	4630      	mov	r0, r6
 8009296:	f000 f9c0 	bl	800961a <__malloc_unlock>
 800929a:	f104 000b 	add.w	r0, r4, #11
 800929e:	1d23      	adds	r3, r4, #4
 80092a0:	f020 0007 	bic.w	r0, r0, #7
 80092a4:	1ac3      	subs	r3, r0, r3
 80092a6:	d0d3      	beq.n	8009250 <_malloc_r+0x20>
 80092a8:	425a      	negs	r2, r3
 80092aa:	50e2      	str	r2, [r4, r3]
 80092ac:	e7d0      	b.n	8009250 <_malloc_r+0x20>
 80092ae:	428c      	cmp	r4, r1
 80092b0:	684b      	ldr	r3, [r1, #4]
 80092b2:	bf16      	itet	ne
 80092b4:	6063      	strne	r3, [r4, #4]
 80092b6:	6013      	streq	r3, [r2, #0]
 80092b8:	460c      	movne	r4, r1
 80092ba:	e7eb      	b.n	8009294 <_malloc_r+0x64>
 80092bc:	460c      	mov	r4, r1
 80092be:	6849      	ldr	r1, [r1, #4]
 80092c0:	e7cc      	b.n	800925c <_malloc_r+0x2c>
 80092c2:	1cc4      	adds	r4, r0, #3
 80092c4:	f024 0403 	bic.w	r4, r4, #3
 80092c8:	42a0      	cmp	r0, r4
 80092ca:	d005      	beq.n	80092d8 <_malloc_r+0xa8>
 80092cc:	1a21      	subs	r1, r4, r0
 80092ce:	4630      	mov	r0, r6
 80092d0:	f000 f95a 	bl	8009588 <_sbrk_r>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d0cf      	beq.n	8009278 <_malloc_r+0x48>
 80092d8:	6025      	str	r5, [r4, #0]
 80092da:	e7db      	b.n	8009294 <_malloc_r+0x64>
 80092dc:	20001170 	.word	0x20001170
 80092e0:	20001174 	.word	0x20001174

080092e4 <__ssputs_r>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	688e      	ldr	r6, [r1, #8]
 80092ea:	429e      	cmp	r6, r3
 80092ec:	4682      	mov	sl, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	4690      	mov	r8, r2
 80092f2:	4699      	mov	r9, r3
 80092f4:	d837      	bhi.n	8009366 <__ssputs_r+0x82>
 80092f6:	898a      	ldrh	r2, [r1, #12]
 80092f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092fc:	d031      	beq.n	8009362 <__ssputs_r+0x7e>
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	6909      	ldr	r1, [r1, #16]
 8009302:	1a6f      	subs	r7, r5, r1
 8009304:	6965      	ldr	r5, [r4, #20]
 8009306:	2302      	movs	r3, #2
 8009308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800930c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009310:	f109 0301 	add.w	r3, r9, #1
 8009314:	443b      	add	r3, r7
 8009316:	429d      	cmp	r5, r3
 8009318:	bf38      	it	cc
 800931a:	461d      	movcc	r5, r3
 800931c:	0553      	lsls	r3, r2, #21
 800931e:	d530      	bpl.n	8009382 <__ssputs_r+0x9e>
 8009320:	4629      	mov	r1, r5
 8009322:	f7ff ff85 	bl	8009230 <_malloc_r>
 8009326:	4606      	mov	r6, r0
 8009328:	b950      	cbnz	r0, 8009340 <__ssputs_r+0x5c>
 800932a:	230c      	movs	r3, #12
 800932c:	f8ca 3000 	str.w	r3, [sl]
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009340:	463a      	mov	r2, r7
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	f7fc fc56 	bl	8005bf4 <memcpy>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800934e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	6126      	str	r6, [r4, #16]
 8009356:	6165      	str	r5, [r4, #20]
 8009358:	443e      	add	r6, r7
 800935a:	1bed      	subs	r5, r5, r7
 800935c:	6026      	str	r6, [r4, #0]
 800935e:	60a5      	str	r5, [r4, #8]
 8009360:	464e      	mov	r6, r9
 8009362:	454e      	cmp	r6, r9
 8009364:	d900      	bls.n	8009368 <__ssputs_r+0x84>
 8009366:	464e      	mov	r6, r9
 8009368:	4632      	mov	r2, r6
 800936a:	4641      	mov	r1, r8
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	f000 f93a 	bl	80095e6 <memmove>
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	1b9b      	subs	r3, r3, r6
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	441e      	add	r6, r3
 800937c:	6026      	str	r6, [r4, #0]
 800937e:	2000      	movs	r0, #0
 8009380:	e7dc      	b.n	800933c <__ssputs_r+0x58>
 8009382:	462a      	mov	r2, r5
 8009384:	f000 f94a 	bl	800961c <_realloc_r>
 8009388:	4606      	mov	r6, r0
 800938a:	2800      	cmp	r0, #0
 800938c:	d1e2      	bne.n	8009354 <__ssputs_r+0x70>
 800938e:	6921      	ldr	r1, [r4, #16]
 8009390:	4650      	mov	r0, sl
 8009392:	f7ff feff 	bl	8009194 <_free_r>
 8009396:	e7c8      	b.n	800932a <__ssputs_r+0x46>

08009398 <_svfiprintf_r>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	461d      	mov	r5, r3
 800939e:	898b      	ldrh	r3, [r1, #12]
 80093a0:	061f      	lsls	r7, r3, #24
 80093a2:	b09d      	sub	sp, #116	; 0x74
 80093a4:	4680      	mov	r8, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4616      	mov	r6, r2
 80093aa:	d50f      	bpl.n	80093cc <_svfiprintf_r+0x34>
 80093ac:	690b      	ldr	r3, [r1, #16]
 80093ae:	b96b      	cbnz	r3, 80093cc <_svfiprintf_r+0x34>
 80093b0:	2140      	movs	r1, #64	; 0x40
 80093b2:	f7ff ff3d 	bl	8009230 <_malloc_r>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	6120      	str	r0, [r4, #16]
 80093ba:	b928      	cbnz	r0, 80093c8 <_svfiprintf_r+0x30>
 80093bc:	230c      	movs	r3, #12
 80093be:	f8c8 3000 	str.w	r3, [r8]
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295
 80093c6:	e0c8      	b.n	800955a <_svfiprintf_r+0x1c2>
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	2300      	movs	r3, #0
 80093ce:	9309      	str	r3, [sp, #36]	; 0x24
 80093d0:	2320      	movs	r3, #32
 80093d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093d6:	2330      	movs	r3, #48	; 0x30
 80093d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093dc:	9503      	str	r5, [sp, #12]
 80093de:	f04f 0b01 	mov.w	fp, #1
 80093e2:	4637      	mov	r7, r6
 80093e4:	463d      	mov	r5, r7
 80093e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093ea:	b10b      	cbz	r3, 80093f0 <_svfiprintf_r+0x58>
 80093ec:	2b25      	cmp	r3, #37	; 0x25
 80093ee:	d13e      	bne.n	800946e <_svfiprintf_r+0xd6>
 80093f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80093f4:	d00b      	beq.n	800940e <_svfiprintf_r+0x76>
 80093f6:	4653      	mov	r3, sl
 80093f8:	4632      	mov	r2, r6
 80093fa:	4621      	mov	r1, r4
 80093fc:	4640      	mov	r0, r8
 80093fe:	f7ff ff71 	bl	80092e4 <__ssputs_r>
 8009402:	3001      	adds	r0, #1
 8009404:	f000 80a4 	beq.w	8009550 <_svfiprintf_r+0x1b8>
 8009408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940a:	4453      	add	r3, sl
 800940c:	9309      	str	r3, [sp, #36]	; 0x24
 800940e:	783b      	ldrb	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 809d 	beq.w	8009550 <_svfiprintf_r+0x1b8>
 8009416:	2300      	movs	r3, #0
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	9307      	str	r3, [sp, #28]
 8009424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009428:	931a      	str	r3, [sp, #104]	; 0x68
 800942a:	462f      	mov	r7, r5
 800942c:	2205      	movs	r2, #5
 800942e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009432:	4850      	ldr	r0, [pc, #320]	; (8009574 <_svfiprintf_r+0x1dc>)
 8009434:	f7f6 fed4 	bl	80001e0 <memchr>
 8009438:	9b04      	ldr	r3, [sp, #16]
 800943a:	b9d0      	cbnz	r0, 8009472 <_svfiprintf_r+0xda>
 800943c:	06d9      	lsls	r1, r3, #27
 800943e:	bf44      	itt	mi
 8009440:	2220      	movmi	r2, #32
 8009442:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009446:	071a      	lsls	r2, r3, #28
 8009448:	bf44      	itt	mi
 800944a:	222b      	movmi	r2, #43	; 0x2b
 800944c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009450:	782a      	ldrb	r2, [r5, #0]
 8009452:	2a2a      	cmp	r2, #42	; 0x2a
 8009454:	d015      	beq.n	8009482 <_svfiprintf_r+0xea>
 8009456:	9a07      	ldr	r2, [sp, #28]
 8009458:	462f      	mov	r7, r5
 800945a:	2000      	movs	r0, #0
 800945c:	250a      	movs	r5, #10
 800945e:	4639      	mov	r1, r7
 8009460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009464:	3b30      	subs	r3, #48	; 0x30
 8009466:	2b09      	cmp	r3, #9
 8009468:	d94d      	bls.n	8009506 <_svfiprintf_r+0x16e>
 800946a:	b1b8      	cbz	r0, 800949c <_svfiprintf_r+0x104>
 800946c:	e00f      	b.n	800948e <_svfiprintf_r+0xf6>
 800946e:	462f      	mov	r7, r5
 8009470:	e7b8      	b.n	80093e4 <_svfiprintf_r+0x4c>
 8009472:	4a40      	ldr	r2, [pc, #256]	; (8009574 <_svfiprintf_r+0x1dc>)
 8009474:	1a80      	subs	r0, r0, r2
 8009476:	fa0b f000 	lsl.w	r0, fp, r0
 800947a:	4318      	orrs	r0, r3
 800947c:	9004      	str	r0, [sp, #16]
 800947e:	463d      	mov	r5, r7
 8009480:	e7d3      	b.n	800942a <_svfiprintf_r+0x92>
 8009482:	9a03      	ldr	r2, [sp, #12]
 8009484:	1d11      	adds	r1, r2, #4
 8009486:	6812      	ldr	r2, [r2, #0]
 8009488:	9103      	str	r1, [sp, #12]
 800948a:	2a00      	cmp	r2, #0
 800948c:	db01      	blt.n	8009492 <_svfiprintf_r+0xfa>
 800948e:	9207      	str	r2, [sp, #28]
 8009490:	e004      	b.n	800949c <_svfiprintf_r+0x104>
 8009492:	4252      	negs	r2, r2
 8009494:	f043 0302 	orr.w	r3, r3, #2
 8009498:	9207      	str	r2, [sp, #28]
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	783b      	ldrb	r3, [r7, #0]
 800949e:	2b2e      	cmp	r3, #46	; 0x2e
 80094a0:	d10c      	bne.n	80094bc <_svfiprintf_r+0x124>
 80094a2:	787b      	ldrb	r3, [r7, #1]
 80094a4:	2b2a      	cmp	r3, #42	; 0x2a
 80094a6:	d133      	bne.n	8009510 <_svfiprintf_r+0x178>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9203      	str	r2, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfb8      	it	lt
 80094b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094b8:	3702      	adds	r7, #2
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	4d2e      	ldr	r5, [pc, #184]	; (8009578 <_svfiprintf_r+0x1e0>)
 80094be:	7839      	ldrb	r1, [r7, #0]
 80094c0:	2203      	movs	r2, #3
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7f6 fe8c 	bl	80001e0 <memchr>
 80094c8:	b138      	cbz	r0, 80094da <_svfiprintf_r+0x142>
 80094ca:	2340      	movs	r3, #64	; 0x40
 80094cc:	1b40      	subs	r0, r0, r5
 80094ce:	fa03 f000 	lsl.w	r0, r3, r0
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	4303      	orrs	r3, r0
 80094d6:	3701      	adds	r7, #1
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	7839      	ldrb	r1, [r7, #0]
 80094dc:	4827      	ldr	r0, [pc, #156]	; (800957c <_svfiprintf_r+0x1e4>)
 80094de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094e2:	2206      	movs	r2, #6
 80094e4:	1c7e      	adds	r6, r7, #1
 80094e6:	f7f6 fe7b 	bl	80001e0 <memchr>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d038      	beq.n	8009560 <_svfiprintf_r+0x1c8>
 80094ee:	4b24      	ldr	r3, [pc, #144]	; (8009580 <_svfiprintf_r+0x1e8>)
 80094f0:	bb13      	cbnz	r3, 8009538 <_svfiprintf_r+0x1a0>
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	3307      	adds	r3, #7
 80094f6:	f023 0307 	bic.w	r3, r3, #7
 80094fa:	3308      	adds	r3, #8
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009500:	444b      	add	r3, r9
 8009502:	9309      	str	r3, [sp, #36]	; 0x24
 8009504:	e76d      	b.n	80093e2 <_svfiprintf_r+0x4a>
 8009506:	fb05 3202 	mla	r2, r5, r2, r3
 800950a:	2001      	movs	r0, #1
 800950c:	460f      	mov	r7, r1
 800950e:	e7a6      	b.n	800945e <_svfiprintf_r+0xc6>
 8009510:	2300      	movs	r3, #0
 8009512:	3701      	adds	r7, #1
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	4619      	mov	r1, r3
 8009518:	250a      	movs	r5, #10
 800951a:	4638      	mov	r0, r7
 800951c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009520:	3a30      	subs	r2, #48	; 0x30
 8009522:	2a09      	cmp	r2, #9
 8009524:	d903      	bls.n	800952e <_svfiprintf_r+0x196>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0c8      	beq.n	80094bc <_svfiprintf_r+0x124>
 800952a:	9105      	str	r1, [sp, #20]
 800952c:	e7c6      	b.n	80094bc <_svfiprintf_r+0x124>
 800952e:	fb05 2101 	mla	r1, r5, r1, r2
 8009532:	2301      	movs	r3, #1
 8009534:	4607      	mov	r7, r0
 8009536:	e7f0      	b.n	800951a <_svfiprintf_r+0x182>
 8009538:	ab03      	add	r3, sp, #12
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4622      	mov	r2, r4
 800953e:	4b11      	ldr	r3, [pc, #68]	; (8009584 <_svfiprintf_r+0x1ec>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	4640      	mov	r0, r8
 8009544:	f7fc fbfe 	bl	8005d44 <_printf_float>
 8009548:	f1b0 3fff 	cmp.w	r0, #4294967295
 800954c:	4681      	mov	r9, r0
 800954e:	d1d6      	bne.n	80094fe <_svfiprintf_r+0x166>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	065b      	lsls	r3, r3, #25
 8009554:	f53f af35 	bmi.w	80093c2 <_svfiprintf_r+0x2a>
 8009558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800955a:	b01d      	add	sp, #116	; 0x74
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	4622      	mov	r2, r4
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <_svfiprintf_r+0x1ec>)
 8009568:	a904      	add	r1, sp, #16
 800956a:	4640      	mov	r0, r8
 800956c:	f7fc fea0 	bl	80062b0 <_printf_i>
 8009570:	e7ea      	b.n	8009548 <_svfiprintf_r+0x1b0>
 8009572:	bf00      	nop
 8009574:	080098b4 	.word	0x080098b4
 8009578:	080098ba 	.word	0x080098ba
 800957c:	080098be 	.word	0x080098be
 8009580:	08005d45 	.word	0x08005d45
 8009584:	080092e5 	.word	0x080092e5

08009588 <_sbrk_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4c06      	ldr	r4, [pc, #24]	; (80095a4 <_sbrk_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4605      	mov	r5, r0
 8009590:	4608      	mov	r0, r1
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	f7f8 f830 	bl	80015f8 <_sbrk>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_sbrk_r+0x1a>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_sbrk_r+0x1a>
 80095a0:	602b      	str	r3, [r5, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20001298 	.word	0x20001298

080095a8 <strncmp>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	b16a      	cbz	r2, 80095c8 <strncmp+0x20>
 80095ac:	3901      	subs	r1, #1
 80095ae:	1884      	adds	r4, r0, r2
 80095b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d103      	bne.n	80095c4 <strncmp+0x1c>
 80095bc:	42a0      	cmp	r0, r4
 80095be:	d001      	beq.n	80095c4 <strncmp+0x1c>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f5      	bne.n	80095b0 <strncmp+0x8>
 80095c4:	1a98      	subs	r0, r3, r2
 80095c6:	bd10      	pop	{r4, pc}
 80095c8:	4610      	mov	r0, r2
 80095ca:	e7fc      	b.n	80095c6 <strncmp+0x1e>

080095cc <__ascii_wctomb>:
 80095cc:	b149      	cbz	r1, 80095e2 <__ascii_wctomb+0x16>
 80095ce:	2aff      	cmp	r2, #255	; 0xff
 80095d0:	bf85      	ittet	hi
 80095d2:	238a      	movhi	r3, #138	; 0x8a
 80095d4:	6003      	strhi	r3, [r0, #0]
 80095d6:	700a      	strbls	r2, [r1, #0]
 80095d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80095dc:	bf98      	it	ls
 80095de:	2001      	movls	r0, #1
 80095e0:	4770      	bx	lr
 80095e2:	4608      	mov	r0, r1
 80095e4:	4770      	bx	lr

080095e6 <memmove>:
 80095e6:	4288      	cmp	r0, r1
 80095e8:	b510      	push	{r4, lr}
 80095ea:	eb01 0302 	add.w	r3, r1, r2
 80095ee:	d807      	bhi.n	8009600 <memmove+0x1a>
 80095f0:	1e42      	subs	r2, r0, #1
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d00a      	beq.n	800960c <memmove+0x26>
 80095f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095fe:	e7f8      	b.n	80095f2 <memmove+0xc>
 8009600:	4283      	cmp	r3, r0
 8009602:	d9f5      	bls.n	80095f0 <memmove+0xa>
 8009604:	1881      	adds	r1, r0, r2
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	42d3      	cmn	r3, r2
 800960a:	d100      	bne.n	800960e <memmove+0x28>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009612:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009616:	e7f7      	b.n	8009608 <memmove+0x22>

08009618 <__malloc_lock>:
 8009618:	4770      	bx	lr

0800961a <__malloc_unlock>:
 800961a:	4770      	bx	lr

0800961c <_realloc_r>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	4607      	mov	r7, r0
 8009620:	4614      	mov	r4, r2
 8009622:	460e      	mov	r6, r1
 8009624:	b921      	cbnz	r1, 8009630 <_realloc_r+0x14>
 8009626:	4611      	mov	r1, r2
 8009628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800962c:	f7ff be00 	b.w	8009230 <_malloc_r>
 8009630:	b922      	cbnz	r2, 800963c <_realloc_r+0x20>
 8009632:	f7ff fdaf 	bl	8009194 <_free_r>
 8009636:	4625      	mov	r5, r4
 8009638:	4628      	mov	r0, r5
 800963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800963c:	f000 f814 	bl	8009668 <_malloc_usable_size_r>
 8009640:	42a0      	cmp	r0, r4
 8009642:	d20f      	bcs.n	8009664 <_realloc_r+0x48>
 8009644:	4621      	mov	r1, r4
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff fdf2 	bl	8009230 <_malloc_r>
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d0f2      	beq.n	8009638 <_realloc_r+0x1c>
 8009652:	4631      	mov	r1, r6
 8009654:	4622      	mov	r2, r4
 8009656:	f7fc facd 	bl	8005bf4 <memcpy>
 800965a:	4631      	mov	r1, r6
 800965c:	4638      	mov	r0, r7
 800965e:	f7ff fd99 	bl	8009194 <_free_r>
 8009662:	e7e9      	b.n	8009638 <_realloc_r+0x1c>
 8009664:	4635      	mov	r5, r6
 8009666:	e7e7      	b.n	8009638 <_realloc_r+0x1c>

08009668 <_malloc_usable_size_r>:
 8009668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966c:	1f18      	subs	r0, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbc      	itt	lt
 8009672:	580b      	ldrlt	r3, [r1, r0]
 8009674:	18c0      	addlt	r0, r0, r3
 8009676:	4770      	bx	lr

08009678 <_init>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr

08009684 <_fini>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr
