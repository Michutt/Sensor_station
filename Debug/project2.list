
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000621c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006470  08006470  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  20000074  080064ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000112c  080064ec  0002112c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d8e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003199  00000000  00000000  00037e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028787  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f77  00000000  00000000  00065cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb5b6  00000000  00000000  00076c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001721ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005404  00000000  00000000  00172268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006394 	.word	0x08006394

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006394 	.word	0x08006394

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <pin_Output>:

#define PORT GPIOA
#define PIN GPIO_PIN_0

void pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fdcc 	bl	800191c <HAL_GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <pin_Input>:

void pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <pin_Input+0x3c>)
 8000dae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fdae 	bl	800191c <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	10210000 	.word	0x10210000
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <delay>:

void delay(uint32_t delay)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	delay = delay * 0.8;
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fb8b 	bl	80004f4 <__aeabi_ui2d>
 8000dde:	a30f      	add	r3, pc, #60	; (adr r3, 8000e1c <delay+0x4c>)
 8000de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de4:	f7ff fc00 	bl	80005e8 <__aeabi_dmul>
 8000de8:	4603      	mov	r3, r0
 8000dea:	460c      	mov	r4, r1
 8000dec:	4618      	mov	r0, r3
 8000dee:	4621      	mov	r1, r4
 8000df0:	f7ff fe0c 	bl	8000a0c <__aeabi_d2uiz>
 8000df4:	4603      	mov	r3, r0
 8000df6:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <delay+0x48>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000e00:	bf00      	nop
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <delay+0x48>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d8f9      	bhi.n	8000e02 <delay+0x32>
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20001058 	.word	0x20001058
 8000e1c:	9999999a 	.word	0x9999999a
 8000e20:	3fe99999 	.word	0x3fe99999

08000e24 <DHT11_Init>:

void DHT11_Init()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	pin_Output(PORT, PIN);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f7ff ff8d 	bl	8000d4c <pin_Output>
	HAL_GPIO_WritePin(PORT, PIN, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2101      	movs	r1, #1
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f000 ff2f 	bl	8001c9c <HAL_GPIO_WritePin>
	HAL_Delay(18); // 18ms
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f000 fc68 	bl	8001714 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, PIN, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f000 ff26 	bl	8001c9c <HAL_GPIO_WritePin>
 	delay(3000); // 30us
 8000e50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e54:	f7ff ffbc 	bl	8000dd0 <delay>
 	pin_Input(PORT, PIN);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f7ff ff95 	bl	8000d8c <pin_Input>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response()
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
	uint8_t state = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
	delay(4000); // 40us
 8000e70:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e74:	f7ff ffac 	bl	8000dd0 <delay>
	if (!HAL_GPIO_ReadPin(PORT, PIN))
 8000e78:	2101      	movs	r1, #1
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f000 fef5 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <DHT11_Check_Response+0x26>
		state = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	71fb      	strb	r3, [r7, #7]
	delay(8000); // 80us
 8000e8c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000e90:	f7ff ff9e 	bl	8000dd0 <delay>
	if (!HAL_GPIO_ReadPin(PORT, PIN) && state)
 8000e94:	2101      	movs	r1, #1
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f000 fee7 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d104      	bne.n	8000eae <DHT11_Check_Response+0x48>
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <DHT11_Check_Response+0x48>
		state = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(PORT, PIN));
 8000eae:	bf00      	nop
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f000 fed9 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f7      	bne.n	8000eb0 <DHT11_Check_Response+0x4a>

	return state;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte()
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
	uint8_t i, data;
	for (i=0; i<8; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e03b      	b.n	8000f4e <DHT11_Read_Byte+0x84>
	{
		while (!HAL_GPIO_ReadPin(PORT, PIN));
 8000ed6:	bf00      	nop
 8000ed8:	2101      	movs	r1, #1
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fec5 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f7      	beq.n	8000ed8 <DHT11_Read_Byte+0xe>
		delay(4000); // 40us
 8000ee8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000eec:	f7ff ff70 	bl	8000dd0 <delay>
		if (HAL_GPIO_ReadPin(PORT, PIN))
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f000 feb9 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00c      	beq.n	8000f1a <DHT11_Read_Byte+0x50>
			data |= (1 << (7-i));
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2201      	movs	r2, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	b25a      	sxtb	r2, r3
 8000f0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	71bb      	strb	r3, [r7, #6]
 8000f18:	e00d      	b.n	8000f36 <DHT11_Read_Byte+0x6c>
		else
			data &= ~(1 << (7-i));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f1c3 0307 	rsb	r3, r3, #7
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f30:	4013      	ands	r3, r2
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(PORT, PIN));
 8000f36:	bf00      	nop
 8000f38:	2101      	movs	r1, #1
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f000 fe95 	bl	8001c6c <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f7      	bne.n	8000f38 <DHT11_Read_Byte+0x6e>
	for (i=0; i<8; i++)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d9c0      	bls.n	8000ed6 <DHT11_Read_Byte+0xc>
	}
	return data;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <DHT11_Receive_Data>:

void DHT11_Receive_Data()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
	DHT11_Init();
 8000f66:	f7ff ff5d 	bl	8000e24 <DHT11_Init>
	if (DHT11_Check_Response())
 8000f6a:	f7ff ff7c 	bl	8000e66 <DHT11_Check_Response>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d021      	beq.n	8000fb8 <DHT11_Receive_Data+0x58>
	{
		uint8_t humM = DHT11_Read_Byte();
 8000f74:	f7ff ffa9 	bl	8000eca <DHT11_Read_Byte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
		uint8_t humL = DHT11_Read_Byte();
 8000f7c:	f7ff ffa5 	bl	8000eca <DHT11_Read_Byte>
 8000f80:	4603      	mov	r3, r0
 8000f82:	71bb      	strb	r3, [r7, #6]
		uint8_t tempM = DHT11_Read_Byte();
 8000f84:	f7ff ffa1 	bl	8000eca <DHT11_Read_Byte>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	717b      	strb	r3, [r7, #5]
		uint8_t tempL = DHT11_Read_Byte();
 8000f8c:	f7ff ff9d 	bl	8000eca <DHT11_Read_Byte>
 8000f90:	4603      	mov	r3, r0
 8000f92:	713b      	strb	r3, [r7, #4]
		static char data[20];
		sprintf((char *)data, "-%i-%i-%i-%i\r\n", tempM, tempL, humM, humL);
 8000f94:	7979      	ldrb	r1, [r7, #5]
 8000f96:	7938      	ldrb	r0, [r7, #4]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	4906      	ldr	r1, [pc, #24]	; (8000fc0 <DHT11_Receive_Data+0x60>)
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <DHT11_Receive_Data+0x64>)
 8000fa8:	f004 fdf8 	bl	8005b9c <siprintf>
		HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2214      	movs	r2, #20
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <DHT11_Receive_Data+0x64>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <DHT11_Receive_Data+0x68>)
 8000fb4:	f002 ff12 	bl	8003ddc <HAL_UART_Transmit>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	080063ac 	.word	0x080063ac
 8000fc4:	20000090 	.word	0x20000090
 8000fc8:	200010a4 	.word	0x200010a4

08000fcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <vApplicationGetIdleTaskMemory+0x30>)
 8000fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200000a4 	.word	0x200000a4
 8000ffc:	200000f8 	.word	0x200000f8

08001000 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_FREERTOS_Init+0x30>)
 8001008:	1d3c      	adds	r4, r7, #4
 800100a:	461d      	mov	r5, r3
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fb7c 	bl	800471a <osThreadCreate>
 8001022:	4602      	mov	r2, r0
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <MX_FREERTOS_Init+0x34>)
 8001026:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bdb0      	pop	{r4, r5, r7, pc}
 8001030:	080063c8 	.word	0x080063c8
 8001034:	20001008 	.word	0x20001008

08001038 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  DHT11_Receive_Data();
 8001040:	f7ff ff8e 	bl	8000f60 <DHT11_Receive_Data>
	  osDelay(2000);
 8001044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001048:	f003 fbb3 	bl	80047b2 <osDelay>
	  DHT11_Receive_Data();
 800104c:	e7f8      	b.n	8001040 <StartDefaultTask+0x8>
	...

08001050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_GPIO_Init+0xd0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_GPIO_Init+0xd0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_GPIO_Init+0xd0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_GPIO_Init+0xd0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <MX_GPIO_Init+0xd0>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_GPIO_Init+0xd0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fde5 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2120      	movs	r1, #32
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f000 fddf 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_GPIO_Init+0xd4>)
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_GPIO_Init+0xd8>)
 80010f4:	f000 fc12 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80010f8:	2321      	movs	r3, #33	; 0x21
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f000 fc03 	bl	800191c <HAL_GPIO_Init>

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	10210000 	.word	0x10210000
 8001128:	48000800 	.word	0x48000800

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fab0 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f810 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f7ff ff8a 	bl	8001050 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113c:	f000 fa0e 	bl	800155c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001140:	f000 f9a0 	bl	8001484 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <main+0x28>)
 8001146:	f002 f949 	bl	80033dc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800114a:	f7ff ff59 	bl	8001000 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800114e:	f003 fadd 	bl	800470c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001152:	e7fe      	b.n	8001152 <main+0x26>
 8001154:	20001058 	.word	0x20001058

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0b8      	sub	sp, #224	; 0xe0
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001162:	2244      	movs	r2, #68	; 0x44
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fd0f 	bl	8005b8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2288      	movs	r2, #136	; 0x88
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fd01 	bl	8005b8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2310      	movs	r3, #16
 8001198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fde2 	bl	8001d94 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011d6:	f000 f847 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f9ae 	bl	8002560 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800120a:	f000 f82d 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800120e:	2302      	movs	r3, #2
 8001210:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fbd7 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001224:	f000 f820 	bl	8001268 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800122c:	f000 fd5c 	bl	8001ce8 <HAL_PWREx_ControlVoltageScaling>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001236:	f000 f817 	bl	8001268 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	37e0      	adds	r7, #224	; 0xe0
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001256:	f000 fa3d 	bl	80016d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012c00 	.word	0x40012c00

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126e:	e7fe      	b.n	800126e <Error_Handler+0x6>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_MspInit+0x4c>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_MspInit+0x4c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_MspInit+0x4c>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_MspInit+0x4c>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6593      	str	r3, [r2, #88]	; 0x58
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_MspInit+0x4c>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	210f      	movs	r1, #15
 80012aa:	f06f 0001 	mvn.w	r0, #1
 80012ae:	f000 fb0b 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	2019      	movs	r0, #25
 80012d6:	f000 faf7 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012da:	2019      	movs	r0, #25
 80012dc:	f000 fb10 	bl	8001900 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_InitTick+0x9c>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_InitTick+0x9c>)
 80012e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ea:	6613      	str	r3, [r2, #96]	; 0x60
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_InitTick+0x9c>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f8:	f107 0210 	add.w	r2, r7, #16
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fad0 	bl	80028a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001308:	f001 fab8 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 800130c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_InitTick+0xa0>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3b01      	subs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_InitTick+0xa4>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_InitTick+0xa8>)
 8001320:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_InitTick+0xa4>)
 8001324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_InitTick+0xa4>)
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_InitTick+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_InitTick+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_InitTick+0xa4>)
 800133e:	f001 fff5 	bl	800332c <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <HAL_InitTick+0xa4>)
 800134a:	f002 f8af 	bl	80034ac <HAL_TIM_Base_Start_IT>
 800134e:	4603      	mov	r3, r0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	431bde83 	.word	0x431bde83
 8001364:	2000100c 	.word	0x2000100c
 8001368:	40012c00 	.word	0x40012c00

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800139e:	f002 f8f5 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000100c 	.word	0x2000100c

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f004 fba0 	bl	8005b20 <__errno>
 80013e0:	4602      	mov	r2, r0
 80013e2:	230c      	movs	r3, #12
 80013e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20018000 	.word	0x20018000
 800140c:	00000400 	.word	0x00000400
 8001410:	200002f8 	.word	0x200002f8
 8001414:	20001130 	.word	0x20001130

08001418 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <SystemInit+0x64>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <SystemInit+0x64>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <SystemInit+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <SystemInit+0x68>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <SystemInit+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <SystemInit+0x68>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <SystemInit+0x68>)
 8001444:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001448:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800144c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SystemInit+0x68>)
 8001450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001454:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SystemInit+0x68>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <SystemInit+0x68>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <SystemInit+0x68>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <SystemInit+0x64>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	609a      	str	r2, [r3, #8]
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	40021000 	.word	0x40021000

08001484 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_TIM2_Init+0x98>)
 80014a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_TIM2_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_TIM2_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_TIM2_Init+0x98>)
 80014b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_TIM2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM2_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_TIM2_Init+0x98>)
 80014cc:	f001 ff2e 	bl	800332c <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014d6:	f7ff fec7 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM2_Init+0x98>)
 80014e8:	f002 f96f 	bl	80037ca <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014f2:	f7ff feb9 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_TIM2_Init+0x98>)
 8001504:	f002 fb76 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800150e:	f7ff feab 	bl	8001268 <Error_Handler>
  }

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20001058 	.word	0x20001058

08001520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001530:	d10b      	bne.n	800154a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x38>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_TIM_Base_MspInit+0x38>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6593      	str	r3, [r2, #88]	; 0x58
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_TIM_Base_MspInit+0x38>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_USART2_UART_Init+0x5c>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 80015a0:	f002 fbce 	bl	8003d40 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015aa:	f7ff fe5d 	bl	8001268 <Error_Handler>
  }

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200010a4 	.word	0x200010a4
 80015b8:	40004400 	.word	0x40004400

080015bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x7c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d128      	bne.n	8001630 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x80>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x80>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x80>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x80>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161e:	2307      	movs	r3, #7
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 f976 	bl	800191c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000

08001640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001678 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff fee8 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001648:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800164a:	e003      	b.n	8001654 <LoopCopyDataInit>

0800164c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800164e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001650:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001652:	3104      	adds	r1, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001654:	480a      	ldr	r0, [pc, #40]	; (8001680 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001658:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800165a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800165c:	d3f6      	bcc.n	800164c <CopyDataInit>
	ldr	r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001660:	e002      	b.n	8001668 <LoopFillZerobss>

08001662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001662:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001664:	f842 3b04 	str.w	r3, [r2], #4

08001668 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <LoopForever+0x16>)
	cmp	r2, r3
 800166a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800166c:	d3f9      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f004 fa5d 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001672:	f7ff fd5b 	bl	800112c <main>

08001676 <LoopForever>:

LoopForever:
    b LoopForever
 8001676:	e7fe      	b.n	8001676 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800167c:	08006478 	.word	0x08006478
	ldr	r0, =_sdata
 8001680:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001684:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001688:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800168c:	2000112c 	.word	0x2000112c

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>
	...

08001694 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_Init+0x3c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x3c>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f901 	bl	80018b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fe05 	bl	80012c0 <HAL_InitTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	e001      	b.n	80016c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c2:	f7ff fdd5 	bl	8001270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20001124 	.word	0x20001124

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20001124 	.word	0x20001124

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_Delay+0x40>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff4c 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018da:	f7ff ff61 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff ffb1 	bl	800184c <NVIC_EncodePriority>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff80 	bl	80017f8 <__NVIC_SetPriority>
}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff54 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e17f      	b.n	8001c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8171 	beq.w	8001c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d00b      	beq.n	8001964 <HAL_GPIO_Init+0x48>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001958:	2b11      	cmp	r3, #17
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b12      	cmp	r3, #18
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d118      	bne.n	8001a04 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x128>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	6939      	ldr	r1, [r7, #16]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80ac 	beq.w	8001c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_GPIO_Init+0x32c>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	; (8001c48 <HAL_GPIO_Init+0x32c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_GPIO_Init+0x32c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae6:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_GPIO_Init+0x330>)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b10:	d025      	beq.n	8001b5e <HAL_GPIO_Init+0x242>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <HAL_GPIO_Init+0x334>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_GPIO_Init+0x23e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <HAL_GPIO_Init+0x338>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x23a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_GPIO_Init+0x33c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x236>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_GPIO_Init+0x340>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x232>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x344>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x22e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x348>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x22a>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00c      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e00a      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x244>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b70:	4936      	ldr	r1, [pc, #216]	; (8001c4c <HAL_GPIO_Init+0x330>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba2:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_GPIO_Init+0x34c>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f47f ae78 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	48001400 	.word	0x48001400
 8001c64:	48001800 	.word	0x48001800
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf6:	d130      	bne.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d038      	beq.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2232      	movs	r2, #50	; 0x32
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2c:	e002      	b.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	d102      	bne.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f2      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d54:	d110      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e00f      	b.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d007      	beq.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d70:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e3d4      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da6:	4ba1      	ldr	r3, [pc, #644]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db0:	4b9e      	ldr	r3, [pc, #632]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80e4 	beq.w	8001f90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <HAL_RCC_OscConfig+0x4a>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f040 808b 	bne.w	8001eec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	f040 8087 	bne.w	8001eec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dde:	4b93      	ldr	r3, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x62>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e3ac      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <HAL_RCC_OscConfig+0x7c>
 8001e06:	4b89      	ldr	r3, [pc, #548]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_OscConfig+0x88>
 8001e10:	4b86      	ldr	r3, [pc, #536]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d223      	bcs.n	8001e68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fd71 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e38d      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e34:	4b7d      	ldr	r3, [pc, #500]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a7c      	ldr	r2, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4977      	ldr	r1, [pc, #476]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e52:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	4972      	ldr	r1, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
 8001e66:	e025      	b.n	8001eb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6f      	ldr	r2, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	496a      	ldr	r1, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e86:	4b69      	ldr	r3, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	4965      	ldr	r1, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fd31 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e34d      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb4:	f000 fc36 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x29c>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_OscConfig+0x2a0>)
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed4:	4b58      	ldr	r3, [pc, #352]	; (8002038 <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f9f1 	bl	80012c0 <HAL_InitTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d052      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	e331      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d032      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fbfc 	bl	80016fc <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f08:	f7ff fbf8 	bl	80016fc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e31a      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a40      	ldr	r2, [pc, #256]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	493b      	ldr	r1, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e01a      	b.n	8001f90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a33      	ldr	r2, [pc, #204]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fbc9 	bl	80016fc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fbc5 	bl	80016fc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e2e7      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x1da>
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d074      	beq.n	8002086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x21a>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d064      	beq.n	8002084 <HAL_RCC_OscConfig+0x2f0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d160      	bne.n	8002084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e2c4      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x24a>
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e01d      	b.n	800201a <HAL_RCC_OscConfig+0x286>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x26e>
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e00b      	b.n	800201a <HAL_RCC_OscConfig+0x286>
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x298>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01c      	beq.n	800205c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff fb6b 	bl	80016fc <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002028:	e011      	b.n	800204e <HAL_RCC_OscConfig+0x2ba>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	080063ec 	.word	0x080063ec
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fb5e 	bl	80016fc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e280      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4baf      	ldr	r3, [pc, #700]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x2a8>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fb4e 	bl	80016fc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fb4a 	bl	80016fc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e26c      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002076:	4ba5      	ldr	r3, [pc, #660]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x2d0>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d060      	beq.n	8002154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x310>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d116      	bne.n	80020d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	4b99      	ldr	r3, [pc, #612]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x328>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e249      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b93      	ldr	r3, [pc, #588]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4990      	ldr	r1, [pc, #576]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	e040      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d023      	beq.n	8002122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020da:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a8b      	ldr	r2, [pc, #556]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb09 	bl	80016fc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fb05 	bl	80016fc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e227      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b82      	ldr	r3, [pc, #520]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	497c      	ldr	r1, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	e018      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff fae5 	bl	80016fc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff fae1 	bl	80016fc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e203      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002148:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d03c      	beq.n	80021da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff fac0 	bl	80016fc <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff fabc 	bl	80016fc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1de      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002192:	4b5e      	ldr	r3, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ef      	beq.n	8002180 <HAL_RCC_OscConfig+0x3ec>
 80021a0:	e01b      	b.n	80021da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff faa3 	bl	80016fc <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff fa9f 	bl	80016fc <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1c1      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021cc:	4b4f      	ldr	r3, [pc, #316]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ef      	bne.n	80021ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a6 	beq.w	8002334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ec:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b44      	ldr	r3, [pc, #272]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCC_OscConfig+0x57c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x57c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3a      	ldr	r2, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0x57c>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222c:	f7ff fa66 	bl	80016fc <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7ff fa62 	bl	80016fc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e184      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002246:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0x57c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d108      	bne.n	800226c <HAL_RCC_OscConfig+0x4d8>
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226a:	e024      	b.n	80022b6 <HAL_RCC_OscConfig+0x522>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d110      	bne.n	8002296 <HAL_RCC_OscConfig+0x502>
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002294:	e00f      	b.n	80022b6 <HAL_RCC_OscConfig+0x522>
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x578>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x578>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff fa1d 	bl	80016fc <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff fa19 	bl	80016fc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e139      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x578>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ed      	beq.n	80022c6 <HAL_RCC_OscConfig+0x532>
 80022ea:	e01a      	b.n	8002322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff fa06 	bl	80016fc <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f2:	e00f      	b.n	8002314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff fa02 	bl	80016fc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d906      	bls.n	8002314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e122      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002314:	4b90      	ldr	r3, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e8      	bne.n	80022f4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002332:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8108 	beq.w	800254e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	2b02      	cmp	r3, #2
 8002344:	f040 80d0 	bne.w	80024e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002348:	4b83      	ldr	r3, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	429a      	cmp	r2, r3
 800235a:	d130      	bne.n	80023be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	3b01      	subs	r3, #1
 8002368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d127      	bne.n	80023be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d11f      	bne.n	80023be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002388:	2a07      	cmp	r2, #7
 800238a:	bf14      	ite	ne
 800238c:	2201      	movne	r2, #1
 800238e:	2200      	moveq	r2, #0
 8002390:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d109      	bne.n	80023be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d06e      	beq.n	800249c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d069      	beq.n	8002498 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023c4:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b7      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023e0:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5c      	ldr	r2, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80023e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ec:	f7ff f986 	bl	80016fc <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7ff f982 	bl	80016fc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0a4      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_RCC_OscConfig+0x7c8>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002422:	3a01      	subs	r2, #1
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242c:	0212      	lsls	r2, r2, #8
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002434:	0852      	lsrs	r2, r2, #1
 8002436:	3a01      	subs	r2, #1
 8002438:	0552      	lsls	r2, r2, #21
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002440:	0852      	lsrs	r2, r2, #1
 8002442:	3a01      	subs	r2, #1
 8002444:	0652      	lsls	r2, r2, #25
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800244c:	0912      	lsrs	r2, r2, #4
 800244e:	0452      	lsls	r2, r2, #17
 8002450:	430a      	orrs	r2, r1
 8002452:	4941      	ldr	r1, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002470:	f7ff f944 	bl	80016fc <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f940 	bl	80016fc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e062      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002496:	e05a      	b.n	800254e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e059      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249c:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d152      	bne.n	800254e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c0:	f7ff f91c 	bl	80016fc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f918 	bl	80016fc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e03a      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x734>
 80024e6:	e032      	b.n	800254e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d02d      	beq.n	800254a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800250c:	f023 0303 	bic.w	r3, r3, #3
 8002510:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 8002518:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff f8eb 	bl	80016fc <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff f8e7 	bl	80016fc <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e009      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x796>
 8002548:	e001      	b.n	800254e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	f99d808c 	.word	0xf99d808c

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0c8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4961      	ldr	r1, [pc, #388]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d04c      	beq.n	800264a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b8:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d121      	bne.n	8002608 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e09e      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e092      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e8:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e086      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e07e      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	493f      	ldr	r1, [pc, #252]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261a:	f7ff f86f 	bl	80016fc <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7ff f86b 	bl	80016fc <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e066      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 020c 	and.w	r2, r3, #12
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	429a      	cmp	r2, r3
 8002648:	d1eb      	bne.n	8002622 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	492c      	ldr	r1, [pc, #176]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d210      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4924      	ldr	r1, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e036      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4918      	ldr	r1, [pc, #96]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4910      	ldr	r1, [pc, #64]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d6:	f000 f825 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_ClockConfig+0x1b4>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa21 f303 	lsr.w	r3, r1, r3
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fde0 	bl	80012c0 <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
 8002702:	72fb      	strb	r3, [r7, #11]

  return status;
 8002704:	7afb      	ldrb	r3, [r7, #11]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	080063ec 	.word	0x080063ec
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x34>
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d121      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d11e      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 8002766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d102      	bne.n	80027a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_GetSysClockFreq+0x10c>)
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e004      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_GetSysClockFreq+0x110>)
 80027aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d133      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0xaa>
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ca:	617b      	str	r3, [r7, #20]
      break;
 80027cc:	e005      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d0:	617b      	str	r3, [r7, #20]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	617b      	str	r3, [r7, #20]
      break;
 80027d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	3301      	adds	r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	fb02 f203 	mul.w	r2, r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_GetSysClockFreq+0x104>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0e5b      	lsrs	r3, r3, #25
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800281a:	69bb      	ldr	r3, [r7, #24]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	08006404 	.word	0x08006404
 8002830:	00f42400 	.word	0x00f42400
 8002834:	007a1200 	.word	0x007a1200

08002838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_GetHCLKFreq+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002854:	f7ff fff0 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002858:	4601      	mov	r1, r0
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	080063fc 	.word	0x080063fc

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002880:	f7ff ffda 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002884:	4601      	mov	r1, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0adb      	lsrs	r3, r3, #11
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080063fc 	.word	0x080063fc

080028a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	220f      	movs	r2, #15
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_GetClockConfig+0x5c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_RCC_GetClockConfig+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0207 	and.w	r2, r3, #7
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40022000 	.word	0x40022000

0800290c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002924:	f7ff f9d2 	bl	8001ccc <HAL_PWREx_GetVoltageRange>
 8002928:	6178      	str	r0, [r7, #20]
 800292a:	e014      	b.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f9c2 	bl	8001ccc <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d10b      	bne.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d919      	bls.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2ba0      	cmp	r3, #160	; 0xa0
 8002968:	d902      	bls.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800296a:	2302      	movs	r3, #2
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e013      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e010      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d902      	bls.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e00a      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d102      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e004      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d101      	bne.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4909      	ldr	r1, [pc, #36]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d8:	2300      	movs	r3, #0
 80029da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03f      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f0:	d01c      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f6:	d802      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80029fc:	e01f      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80029fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a02:	d003      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a08:	d01c      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a0c:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a84      	ldr	r2, [pc, #528]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a18:	e015      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fab9 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2a:	e00c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3320      	adds	r3, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fba0 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	74fb      	strb	r3, [r7, #19]
      break;
 8002a42:	e000      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5a:	4972      	ldr	r1, [pc, #456]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a62:	e001      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a82:	d802      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a88:	e01f      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a94:	d01c      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a96:	e018      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a98:	4b62      	ldr	r3, [pc, #392]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa73 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ab6:	e00c      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3320      	adds	r3, #32
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fb5a 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ac8:	e003      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae6:	494f      	ldr	r1, [pc, #316]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aee:	e001      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a0 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fdda 	bl	80016fc <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b4a:	e009      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe fdd6 	bl	80016fc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d902      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b5e:	e005      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ef      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d15c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b72:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fe fd95 	bl	80016fc <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd4:	e00b      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fd91 	bl	80016fc <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d902      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	74fb      	strb	r3, [r7, #19]
            break;
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ec      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c12:	4904      	ldr	r1, [pc, #16]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c1a:	e009      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
 8002c20:	e006      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c30:	7c7b      	ldrb	r3, [r7, #17]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b9e      	ldr	r3, [pc, #632]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	4a9d      	ldr	r2, [pc, #628]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4e:	4b98      	ldr	r3, [pc, #608]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 0203 	bic.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	4994      	ldr	r1, [pc, #592]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c70:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 020c 	bic.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	498c      	ldr	r1, [pc, #560]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c92:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4983      	ldr	r1, [pc, #524]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	497b      	ldr	r1, [pc, #492]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	4972      	ldr	r1, [pc, #456]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	496a      	ldr	r1, [pc, #424]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	4961      	ldr	r1, [pc, #388]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d3c:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	4959      	ldr	r1, [pc, #356]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	4950      	ldr	r1, [pc, #320]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	4948      	ldr	r1, [pc, #288]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	493f      	ldr	r1, [pc, #252]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d028      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd2:	4937      	ldr	r1, [pc, #220]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a31      	ldr	r2, [pc, #196]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dee:	60d3      	str	r3, [r2, #12]
 8002df0:	e011      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f8c8 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d028      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4c:	60d3      	str	r3, [r2, #12]
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f899 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eaa:	60d3      	str	r3, [r2, #12]
 8002eac:	e014      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 f867 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef2:	4928      	ldr	r1, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f02:	d10d      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f844 	bl	8002f98 <RCCEx_PLLSAI1_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	74bb      	strb	r3, [r7, #18]
 8002f1e:	e011      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f921 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f5e:	490d      	ldr	r1, [pc, #52]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f82:	4904      	ldr	r1, [pc, #16]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d044      	beq.n	8003068 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e041      	b.n	8003068 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d00c      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x6e>
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d013      	beq.n	8003018 <RCCEx_PLLSAI1_Config+0x80>
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d120      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff4:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11d      	bne.n	800303c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e01a      	b.n	800303c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003016:	e013      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10f      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003034:	e006      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e004      	b.n	8003046 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003044:	bf00      	nop
    }

    if(status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800304c:	4b49      	ldr	r3, [pc, #292]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	3b01      	subs	r3, #1
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	430b      	orrs	r3, r1
 8003062:	4944      	ldr	r1, [pc, #272]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d17d      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a40      	ldr	r2, [pc, #256]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003074:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307a:	f7fe fb3f 	bl	80016fc <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003080:	e009      	b.n	8003096 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003082:	f7fe fb3b 	bl	80016fc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	73fb      	strb	r3, [r7, #15]
        break;
 8003094:	e005      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ef      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d160      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d111      	bne.n	80030d2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	0211      	lsls	r1, r2, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68d2      	ldr	r2, [r2, #12]
 80030c4:	0912      	lsrs	r2, r2, #4
 80030c6:	0452      	lsls	r2, r2, #17
 80030c8:	430a      	orrs	r2, r1
 80030ca:	492a      	ldr	r1, [pc, #168]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	610b      	str	r3, [r1, #16]
 80030d0:	e027      	b.n	8003122 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d112      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6912      	ldr	r2, [r2, #16]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0552      	lsls	r2, r2, #21
 80030f4:	430a      	orrs	r2, r1
 80030f6:	491f      	ldr	r1, [pc, #124]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	610b      	str	r3, [r1, #16]
 80030fc:	e011      	b.n	8003122 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003106:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	0211      	lsls	r1, r2, #8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6952      	ldr	r2, [r2, #20]
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
 8003118:	0652      	lsls	r2, r2, #25
 800311a:	430a      	orrs	r2, r1
 800311c:	4915      	ldr	r1, [pc, #84]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800312c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe fae5 	bl	80016fc <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003134:	e009      	b.n	800314a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003136:	f7fe fae1 	bl	80016fc <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	73fb      	strb	r3, [r7, #15]
          break;
 8003148:	e005      	b.n	8003156 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000

08003178 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003186:	4b68      	ldr	r3, [pc, #416]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d018      	beq.n	80031c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
       ||
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031aa:	4b5f      	ldr	r3, [pc, #380]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d044      	beq.n	8003248 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e041      	b.n	8003248 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d00c      	beq.n	80031e6 <RCCEx_PLLSAI2_Config+0x6e>
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d013      	beq.n	80031f8 <RCCEx_PLLSAI2_Config+0x80>
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d120      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d4:	4b54      	ldr	r3, [pc, #336]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11d      	bne.n	800321c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e4:	e01a      	b.n	800321c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e6:	4b50      	ldr	r3, [pc, #320]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f6:	e013      	b.n	8003220 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031f8:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003214:	e006      	b.n	8003224 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      break;
 800321a:	e004      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800321c:	bf00      	nop
 800321e:	e002      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003224:	bf00      	nop
    }

    if(status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800322c:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	3b01      	subs	r3, #1
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	430b      	orrs	r3, r1
 8003242:	4939      	ldr	r1, [pc, #228]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d167      	bne.n	800331e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a35      	ldr	r2, [pc, #212]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325a:	f7fe fa4f 	bl	80016fc <HAL_GetTick>
 800325e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003260:	e009      	b.n	8003276 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003262:	f7fe fa4b 	bl	80016fc <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d902      	bls.n	8003276 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	73fb      	strb	r3, [r7, #15]
        break;
 8003274:	e005      	b.n	8003282 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ef      	bne.n	8003262 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d14a      	bne.n	800331e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d111      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800328e:	4b26      	ldr	r3, [pc, #152]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	0211      	lsls	r1, r2, #8
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	0912      	lsrs	r2, r2, #4
 80032a6:	0452      	lsls	r2, r2, #17
 80032a8:	430a      	orrs	r2, r1
 80032aa:	491f      	ldr	r1, [pc, #124]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	614b      	str	r3, [r1, #20]
 80032b0:	e011      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	0211      	lsls	r1, r2, #8
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6912      	ldr	r2, [r2, #16]
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0652      	lsls	r2, r2, #25
 80032ce:	430a      	orrs	r2, r1
 80032d0:	4915      	ldr	r1, [pc, #84]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe fa0b 	bl	80016fc <HAL_GetTick>
 80032e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032e8:	e009      	b.n	80032fe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032ea:	f7fe fa07 	bl	80016fc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d902      	bls.n	80032fe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
          break;
 80032fc:	e005      	b.n	800330a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <RCCEx_PLLSAI2_Config+0x1b0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e049      	b.n	80033d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f8e4 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fb0e 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e047      	b.n	8003484 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_Base_Start+0xb4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d018      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_TIM_Base_Start+0xb8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_TIM_Base_Start+0xbc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_TIM_Base_Start+0xc0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_TIM_Base_Start+0xc4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIM_Base_Start+0x66>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_TIM_Base_Start+0xc8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d115      	bne.n	800346e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_TIM_Base_Start+0xcc>)
 800344a:	4013      	ands	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d015      	beq.n	8003480 <HAL_TIM_Base_Start+0xa4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345a:	d011      	beq.n	8003480 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	e008      	b.n	8003480 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e000      	b.n	8003482 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40013400 	.word	0x40013400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	00010007 	.word	0x00010007

080034ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d001      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e04f      	b.n	8003564 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a23      	ldr	r2, [pc, #140]	; (8003570 <HAL_TIM_Base_Start_IT+0xc4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d018      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_TIM_Base_Start_IT+0xc8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_TIM_Base_Start_IT+0xcc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_TIM_Base_Start_IT+0xd0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_TIM_Base_Start_IT+0xd4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_TIM_Base_Start_IT+0x76>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_Start_IT+0xd8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d115      	bne.n	800354e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_TIM_Base_Start_IT+0xdc>)
 800352a:	4013      	ands	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d015      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0xb4>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d011      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	e008      	b.n	8003560 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e000      	b.n	8003562 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40013400 	.word	0x40013400
 8003584:	40014000 	.word	0x40014000
 8003588:	00010007 	.word	0x00010007

0800358c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0202 	mvn.w	r2, #2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9be 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9b0 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f9c1 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0204 	mvn.w	r2, #4
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f994 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f986 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f997 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0208 	mvn.w	r2, #8
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2204      	movs	r2, #4
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f96a 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f95c 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f96d 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b10      	cmp	r3, #16
 800369c:	d122      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d11b      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0210 	mvn.w	r2, #16
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2208      	movs	r2, #8
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f940 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f932 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f943 	bl	8003964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0201 	mvn.w	r2, #1
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fd9a 	bl	8001244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d10e      	bne.n	800373c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d107      	bne.n	800373c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faee 	bl	8003d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d10e      	bne.n	800376a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d107      	bne.n	800376a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fae1 	bl	8003d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d10e      	bne.n	8003796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d107      	bne.n	8003796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800378e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8f1 	bl	8003978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0220 	mvn.w	r2, #32
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 faa1 	bl	8003d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_ConfigClockSource+0x18>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0a8      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x16a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003804:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d067      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x124>
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d80b      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x70>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d073      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x144>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d802      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x66>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d06f      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800382e:	e078      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003830:	2b20      	cmp	r3, #32
 8003832:	d06c      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x144>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d06a      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003838:	e073      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800383a:	2b70      	cmp	r3, #112	; 0x70
 800383c:	d00d      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x90>
 800383e:	2b70      	cmp	r3, #112	; 0x70
 8003840:	d804      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x82>
 8003842:	2b50      	cmp	r3, #80	; 0x50
 8003844:	d033      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0xe4>
 8003846:	2b60      	cmp	r3, #96	; 0x60
 8003848:	d041      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x104>
      break;
 800384a:	e06a      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	d066      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0x156>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d017      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003858:	e063      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f000 f9a3 	bl	8003bb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800387c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	609a      	str	r2, [r3, #8]
      break;
 8003886:	e04c      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f000 f98c 	bl	8003bb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038aa:	609a      	str	r2, [r3, #8]
      break;
 80038ac:	e039      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 f900 	bl	8003ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2150      	movs	r1, #80	; 0x50
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f959 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 80038cc:	e029      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f91f 	bl	8003b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2160      	movs	r1, #96	; 0x60
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f949 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 80038ec:	e019      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f8e0 	bl	8003ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f939 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 800390c:	e009      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f000 f930 	bl	8003b7e <TIM_ITRx_SetConfig>
        break;
 800391e:	e000      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003920:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3d      	ldr	r2, [pc, #244]	; (8003aa4 <TIM_Base_SetConfig+0x118>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <TIM_Base_SetConfig+0x11c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <TIM_Base_SetConfig+0x120>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d01b      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <TIM_Base_SetConfig+0x118>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <TIM_Base_SetConfig+0x11c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	; (8003aac <TIM_Base_SetConfig+0x120>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <TIM_Base_SetConfig+0x128>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <TIM_Base_SetConfig+0x12c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <TIM_Base_SetConfig+0x130>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <TIM_Base_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00f      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <TIM_Base_SetConfig+0x128>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <TIM_Base_SetConfig+0x12c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0xf8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <TIM_Base_SetConfig+0x130>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40013400 	.word	0x40013400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800

08003ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 030a 	bic.w	r3, r3, #10
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0210 	bic.w	r2, r3, #16
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f043 0307 	orr.w	r3, r3, #7
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	021a      	lsls	r2, r3, #8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e068      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2e      	ldr	r2, [pc, #184]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000

08003d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e040      	b.n	8003dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fc2a 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8c0 	bl	8003f04 <UART_SetConfig>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e022      	b.n	8003dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fb3e 	bl	8004418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fbc5 	bl	800455c <UART_CheckIdleState>
 8003dd2:	4603      	mov	r3, r0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	f040 8081 	bne.w	8003ef8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_Transmit+0x26>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e079      	b.n	8003efa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Transmit+0x38>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e072      	b.n	8003efa <HAL_UART_Transmit+0x11e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd fc68 	bl	80016fc <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d108      	bne.n	8003e5a <HAL_UART_Transmit+0x7e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e003      	b.n	8003e62 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003e6a:	e02d      	b.n	8003ec8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fbb5 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e039      	b.n	8003efa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e008      	b.n	8003eb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b292      	uxth	r2, r2
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1cb      	bne.n	8003e6c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2140      	movs	r1, #64	; 0x40
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fb81 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e005      	b.n	8003efa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f08:	b088      	sub	sp, #32
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4bac      	ldr	r3, [pc, #688]	; (80041e4 <UART_SetConfig+0x2e0>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	69f9      	ldr	r1, [r7, #28]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4aa2      	ldr	r2, [pc, #648]	; (80041e8 <UART_SetConfig+0x2e4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a99      	ldr	r2, [pc, #612]	; (80041ec <UART_SetConfig+0x2e8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d121      	bne.n	8003fd0 <UART_SetConfig+0xcc>
 8003f8c:	4b98      	ldr	r3, [pc, #608]	; (80041f0 <UART_SetConfig+0x2ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d816      	bhi.n	8003fc8 <UART_SetConfig+0xc4>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0x9c>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fbd 	.word	0x08003fbd
 8003fa8:	08003fb7 	.word	0x08003fb7
 8003fac:	08003fc3 	.word	0x08003fc3
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	76fb      	strb	r3, [r7, #27]
 8003fb4:	e0e8      	b.n	8004188 <UART_SetConfig+0x284>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	76fb      	strb	r3, [r7, #27]
 8003fba:	e0e5      	b.n	8004188 <UART_SetConfig+0x284>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	76fb      	strb	r3, [r7, #27]
 8003fc0:	e0e2      	b.n	8004188 <UART_SetConfig+0x284>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	76fb      	strb	r3, [r7, #27]
 8003fc6:	e0df      	b.n	8004188 <UART_SetConfig+0x284>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	bf00      	nop
 8003fce:	e0db      	b.n	8004188 <UART_SetConfig+0x284>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a87      	ldr	r2, [pc, #540]	; (80041f4 <UART_SetConfig+0x2f0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d134      	bne.n	8004044 <UART_SetConfig+0x140>
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <UART_SetConfig+0x2ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d829      	bhi.n	800403c <UART_SetConfig+0x138>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0xec>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	0800403d 	.word	0x0800403d
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	08004031 	.word	0x08004031
 8004004:	0800403d 	.word	0x0800403d
 8004008:	0800403d 	.word	0x0800403d
 800400c:	0800403d 	.word	0x0800403d
 8004010:	0800402b 	.word	0x0800402b
 8004014:	0800403d 	.word	0x0800403d
 8004018:	0800403d 	.word	0x0800403d
 800401c:	0800403d 	.word	0x0800403d
 8004020:	08004037 	.word	0x08004037
 8004024:	2300      	movs	r3, #0
 8004026:	76fb      	strb	r3, [r7, #27]
 8004028:	e0ae      	b.n	8004188 <UART_SetConfig+0x284>
 800402a:	2302      	movs	r3, #2
 800402c:	76fb      	strb	r3, [r7, #27]
 800402e:	e0ab      	b.n	8004188 <UART_SetConfig+0x284>
 8004030:	2304      	movs	r3, #4
 8004032:	76fb      	strb	r3, [r7, #27]
 8004034:	e0a8      	b.n	8004188 <UART_SetConfig+0x284>
 8004036:	2308      	movs	r3, #8
 8004038:	76fb      	strb	r3, [r7, #27]
 800403a:	e0a5      	b.n	8004188 <UART_SetConfig+0x284>
 800403c:	2310      	movs	r3, #16
 800403e:	76fb      	strb	r3, [r7, #27]
 8004040:	bf00      	nop
 8004042:	e0a1      	b.n	8004188 <UART_SetConfig+0x284>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <UART_SetConfig+0x2f4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d120      	bne.n	8004090 <UART_SetConfig+0x18c>
 800404e:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <UART_SetConfig+0x2ec>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004058:	2b10      	cmp	r3, #16
 800405a:	d00f      	beq.n	800407c <UART_SetConfig+0x178>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d802      	bhi.n	8004066 <UART_SetConfig+0x162>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <UART_SetConfig+0x16c>
 8004064:	e010      	b.n	8004088 <UART_SetConfig+0x184>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d005      	beq.n	8004076 <UART_SetConfig+0x172>
 800406a:	2b30      	cmp	r3, #48	; 0x30
 800406c:	d009      	beq.n	8004082 <UART_SetConfig+0x17e>
 800406e:	e00b      	b.n	8004088 <UART_SetConfig+0x184>
 8004070:	2300      	movs	r3, #0
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e088      	b.n	8004188 <UART_SetConfig+0x284>
 8004076:	2302      	movs	r3, #2
 8004078:	76fb      	strb	r3, [r7, #27]
 800407a:	e085      	b.n	8004188 <UART_SetConfig+0x284>
 800407c:	2304      	movs	r3, #4
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	e082      	b.n	8004188 <UART_SetConfig+0x284>
 8004082:	2308      	movs	r3, #8
 8004084:	76fb      	strb	r3, [r7, #27]
 8004086:	e07f      	b.n	8004188 <UART_SetConfig+0x284>
 8004088:	2310      	movs	r3, #16
 800408a:	76fb      	strb	r3, [r7, #27]
 800408c:	bf00      	nop
 800408e:	e07b      	b.n	8004188 <UART_SetConfig+0x284>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a59      	ldr	r2, [pc, #356]	; (80041fc <UART_SetConfig+0x2f8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d120      	bne.n	80040dc <UART_SetConfig+0x1d8>
 800409a:	4b55      	ldr	r3, [pc, #340]	; (80041f0 <UART_SetConfig+0x2ec>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d00f      	beq.n	80040c8 <UART_SetConfig+0x1c4>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d802      	bhi.n	80040b2 <UART_SetConfig+0x1ae>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <UART_SetConfig+0x1b8>
 80040b0:	e010      	b.n	80040d4 <UART_SetConfig+0x1d0>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d005      	beq.n	80040c2 <UART_SetConfig+0x1be>
 80040b6:	2bc0      	cmp	r3, #192	; 0xc0
 80040b8:	d009      	beq.n	80040ce <UART_SetConfig+0x1ca>
 80040ba:	e00b      	b.n	80040d4 <UART_SetConfig+0x1d0>
 80040bc:	2300      	movs	r3, #0
 80040be:	76fb      	strb	r3, [r7, #27]
 80040c0:	e062      	b.n	8004188 <UART_SetConfig+0x284>
 80040c2:	2302      	movs	r3, #2
 80040c4:	76fb      	strb	r3, [r7, #27]
 80040c6:	e05f      	b.n	8004188 <UART_SetConfig+0x284>
 80040c8:	2304      	movs	r3, #4
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e05c      	b.n	8004188 <UART_SetConfig+0x284>
 80040ce:	2308      	movs	r3, #8
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e059      	b.n	8004188 <UART_SetConfig+0x284>
 80040d4:	2310      	movs	r3, #16
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	bf00      	nop
 80040da:	e055      	b.n	8004188 <UART_SetConfig+0x284>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a47      	ldr	r2, [pc, #284]	; (8004200 <UART_SetConfig+0x2fc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d124      	bne.n	8004130 <UART_SetConfig+0x22c>
 80040e6:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <UART_SetConfig+0x2ec>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d012      	beq.n	800411c <UART_SetConfig+0x218>
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fa:	d802      	bhi.n	8004102 <UART_SetConfig+0x1fe>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <UART_SetConfig+0x20c>
 8004100:	e012      	b.n	8004128 <UART_SetConfig+0x224>
 8004102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004106:	d006      	beq.n	8004116 <UART_SetConfig+0x212>
 8004108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410c:	d009      	beq.n	8004122 <UART_SetConfig+0x21e>
 800410e:	e00b      	b.n	8004128 <UART_SetConfig+0x224>
 8004110:	2300      	movs	r3, #0
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e038      	b.n	8004188 <UART_SetConfig+0x284>
 8004116:	2302      	movs	r3, #2
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e035      	b.n	8004188 <UART_SetConfig+0x284>
 800411c:	2304      	movs	r3, #4
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e032      	b.n	8004188 <UART_SetConfig+0x284>
 8004122:	2308      	movs	r3, #8
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e02f      	b.n	8004188 <UART_SetConfig+0x284>
 8004128:	2310      	movs	r3, #16
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	bf00      	nop
 800412e:	e02b      	b.n	8004188 <UART_SetConfig+0x284>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <UART_SetConfig+0x2e4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d124      	bne.n	8004184 <UART_SetConfig+0x280>
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <UART_SetConfig+0x2ec>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d012      	beq.n	8004170 <UART_SetConfig+0x26c>
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d802      	bhi.n	8004156 <UART_SetConfig+0x252>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <UART_SetConfig+0x260>
 8004154:	e012      	b.n	800417c <UART_SetConfig+0x278>
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d006      	beq.n	800416a <UART_SetConfig+0x266>
 800415c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004160:	d009      	beq.n	8004176 <UART_SetConfig+0x272>
 8004162:	e00b      	b.n	800417c <UART_SetConfig+0x278>
 8004164:	2300      	movs	r3, #0
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e00e      	b.n	8004188 <UART_SetConfig+0x284>
 800416a:	2302      	movs	r3, #2
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x284>
 8004170:	2304      	movs	r3, #4
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e008      	b.n	8004188 <UART_SetConfig+0x284>
 8004176:	2308      	movs	r3, #8
 8004178:	76fb      	strb	r3, [r7, #27]
 800417a:	e005      	b.n	8004188 <UART_SetConfig+0x284>
 800417c:	2310      	movs	r3, #16
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	bf00      	nop
 8004182:	e001      	b.n	8004188 <UART_SetConfig+0x284>
 8004184:	2310      	movs	r3, #16
 8004186:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <UART_SetConfig+0x2e4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	f040 8087 	bne.w	80042a2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004194:	7efb      	ldrb	r3, [r7, #27]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d836      	bhi.n	8004208 <UART_SetConfig+0x304>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x29c>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	08004209 	.word	0x08004209
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	08004209 	.word	0x08004209
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004209 	.word	0x08004209
 80041bc:	08004209 	.word	0x08004209
 80041c0:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe fb44 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80041c8:	6178      	str	r0, [r7, #20]
        break;
 80041ca:	e022      	b.n	8004212 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <UART_SetConfig+0x300>)
 80041ce:	617b      	str	r3, [r7, #20]
        break;
 80041d0:	e01f      	b.n	8004212 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fe faa7 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80041d6:	6178      	str	r0, [r7, #20]
        break;
 80041d8:	e01b      	b.n	8004212 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	617b      	str	r3, [r7, #20]
        break;
 80041e0:	e017      	b.n	8004212 <UART_SetConfig+0x30e>
 80041e2:	bf00      	nop
 80041e4:	efff69f3 	.word	0xefff69f3
 80041e8:	40008000 	.word	0x40008000
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	40004c00 	.word	0x40004c00
 8004200:	40005000 	.word	0x40005000
 8004204:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	76bb      	strb	r3, [r7, #26]
        break;
 8004210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80f1 	beq.w	80043fc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	429a      	cmp	r2, r3
 8004228:	d305      	bcc.n	8004236 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	429a      	cmp	r2, r3
 8004234:	d902      	bls.n	800423c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	76bb      	strb	r3, [r7, #26]
 800423a:	e0df      	b.n	80043fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4619      	mov	r1, r3
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	0214      	lsls	r4, r2, #8
 800424e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004252:	020b      	lsls	r3, r1, #8
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	0852      	lsrs	r2, r2, #1
 800425a:	4611      	mov	r1, r2
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	eb13 0b01 	adds.w	fp, r3, r1
 8004264:	eb44 0c02 	adc.w	ip, r4, r2
 8004268:	4658      	mov	r0, fp
 800426a:	4661      	mov	r1, ip
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fc fbe8 	bl	8000a4c <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004288:	d308      	bcc.n	800429c <UART_SetConfig+0x398>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004290:	d204      	bcs.n	800429c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e0af      	b.n	80043fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	76bb      	strb	r3, [r7, #26]
 80042a0:	e0ac      	b.n	80043fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042aa:	d15b      	bne.n	8004364 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80042ac:	7efb      	ldrb	r3, [r7, #27]
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d827      	bhi.n	8004302 <UART_SetConfig+0x3fe>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0x3b4>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	080042e5 	.word	0x080042e5
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	08004303 	.word	0x08004303
 80042c8:	080042f3 	.word	0x080042f3
 80042cc:	08004303 	.word	0x08004303
 80042d0:	08004303 	.word	0x08004303
 80042d4:	08004303 	.word	0x08004303
 80042d8:	080042fb 	.word	0x080042fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042dc:	f7fe fab8 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80042e0:	6178      	str	r0, [r7, #20]
        break;
 80042e2:	e013      	b.n	800430c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e4:	f7fe faca 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80042e8:	6178      	str	r0, [r7, #20]
        break;
 80042ea:	e00f      	b.n	800430c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ec:	4b49      	ldr	r3, [pc, #292]	; (8004414 <UART_SetConfig+0x510>)
 80042ee:	617b      	str	r3, [r7, #20]
        break;
 80042f0:	e00c      	b.n	800430c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f2:	f7fe fa17 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80042f6:	6178      	str	r0, [r7, #20]
        break;
 80042f8:	e008      	b.n	800430c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fe:	617b      	str	r3, [r7, #20]
        break;
 8004300:	e004      	b.n	800430c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	76bb      	strb	r3, [r7, #26]
        break;
 800430a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d074      	beq.n	80043fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005a      	lsls	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b0f      	cmp	r3, #15
 800432e:	d916      	bls.n	800435e <UART_SetConfig+0x45a>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d212      	bcs.n	800435e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f023 030f 	bic.w	r3, r3, #15
 8004340:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b29a      	uxth	r2, r3
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	4313      	orrs	r3, r2
 8004352:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	89fa      	ldrh	r2, [r7, #14]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e04e      	b.n	80043fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	76bb      	strb	r3, [r7, #26]
 8004362:	e04b      	b.n	80043fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004364:	7efb      	ldrb	r3, [r7, #27]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d827      	bhi.n	80043ba <UART_SetConfig+0x4b6>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x46c>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004395 	.word	0x08004395
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe fa5c 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8004398:	6178      	str	r0, [r7, #20]
        break;
 800439a:	e013      	b.n	80043c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fa6e 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80043a0:	6178      	str	r0, [r7, #20]
        break;
 80043a2:	e00f      	b.n	80043c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <UART_SetConfig+0x510>)
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e00c      	b.n	80043c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fe f9bb 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80043ae:	6178      	str	r0, [r7, #20]
        break;
 80043b0:	e008      	b.n	80043c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	617b      	str	r3, [r7, #20]
        break;
 80043b8:	e004      	b.n	80043c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	76bb      	strb	r3, [r7, #26]
        break;
 80043c2:	bf00      	nop
    }

    if (pclk != 0U)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085a      	lsrs	r2, r3, #1
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	441a      	add	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d908      	bls.n	80043f8 <UART_SetConfig+0x4f4>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d204      	bcs.n	80043f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e001      	b.n	80043fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004408:	7ebb      	ldrb	r3, [r7, #26]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004414:	00f42400 	.word	0x00f42400

08004418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01a      	beq.n	800452e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d10a      	bne.n	800452e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800456a:	f7fd f8c7 	bl	80016fc <HAL_GetTick>
 800456e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d10e      	bne.n	800459c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f82a 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e020      	b.n	80045de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d10e      	bne.n	80045c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f814 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e00a      	b.n	80045de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	e05d      	b.n	80046b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d059      	beq.n	80046b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004600:	f7fd f87c 	bl	80016fc <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <UART_WaitOnFlagUntilTimeout+0x30>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11b      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004624:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e042      	b.n	80046d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02b      	beq.n	80046b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d123      	bne.n	80046b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004684:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e00f      	b.n	80046d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d092      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80046ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ee:	2b84      	cmp	r3, #132	; 0x84
 80046f0:	d005      	beq.n	80046fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80046f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	3303      	adds	r3, #3
 80046fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004710:	f000 fada 	bl	8004cc8 <vTaskStartScheduler>
  
  return osOK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	bd80      	pop	{r7, pc}

0800471a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800471a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471c:	b089      	sub	sp, #36	; 0x24
 800471e:	af04      	add	r7, sp, #16
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <osThreadCreate+0x54>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01c      	beq.n	800476e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685c      	ldr	r4, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681d      	ldr	r5, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691e      	ldr	r6, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ffc8 	bl	80046dc <makeFreeRtosPriority>
 800474c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	9100      	str	r1, [sp, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4632      	mov	r2, r6
 8004760:	4629      	mov	r1, r5
 8004762:	4620      	mov	r0, r4
 8004764:	f000 f8ed 	bl	8004942 <xTaskCreateStatic>
 8004768:	4603      	mov	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e01c      	b.n	80047a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685c      	ldr	r4, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800477a:	b29e      	uxth	r6, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ffaa 	bl	80046dc <makeFreeRtosPriority>
 8004788:	4602      	mov	r2, r0
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	9200      	str	r2, [sp, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	4632      	mov	r2, r6
 8004796:	4629      	mov	r1, r5
 8004798:	4620      	mov	r0, r4
 800479a:	f000 f92c 	bl	80049f6 <xTaskCreate>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <osDelay+0x16>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	e000      	b.n	80047ca <osDelay+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fa48 	bl	8004c60 <vTaskDelay>
  
  return osOK;
 80047d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f103 0208 	add.w	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f04f 32ff 	mov.w	r2, #4294967295
 80047f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0208 	add.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d103      	bne.n	800489c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e00c      	b.n	80048b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3308      	adds	r3, #8
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e002      	b.n	80048aa <vListInsert+0x2e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d2f6      	bcs.n	80048a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6892      	ldr	r2, [r2, #8]
 8004904:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d103      	bne.n	8004922 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08e      	sub	sp, #56	; 0x38
 8004946:	af04      	add	r7, sp, #16
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	e7fe      	b.n	8004968 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <xTaskCreateStatic+0x42>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e7fe      	b.n	8004982 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004984:	2354      	movs	r3, #84	; 0x54
 8004986:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b54      	cmp	r3, #84	; 0x54
 800498c:	d009      	beq.n	80049a2 <xTaskCreateStatic+0x60>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	e7fe      	b.n	80049a0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01e      	beq.n	80049e8 <xTaskCreateStatic+0xa6>
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049c2:	2300      	movs	r3, #0
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f850 	bl	8004a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049e2:	f000 f8d3 	bl	8004b8c <prvAddNewTaskToReadyList>
 80049e6:	e001      	b.n	80049ec <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ec:	697b      	ldr	r3, [r7, #20]
	}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3728      	adds	r7, #40	; 0x28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b08c      	sub	sp, #48	; 0x30
 80049fa:	af04      	add	r7, sp, #16
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 feb2 	bl	8005774 <pvPortMalloc>
 8004a10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00e      	beq.n	8004a36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a18:	2054      	movs	r0, #84	; 0x54
 8004a1a:	f000 feab 	bl	8005774 <pvPortMalloc>
 8004a1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	e005      	b.n	8004a3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a2e:	6978      	ldr	r0, [r7, #20]
 8004a30:	f000 ff62 	bl	80058f8 <vPortFree>
 8004a34:	e001      	b.n	8004a3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9303      	str	r3, [sp, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f80e 	bl	8004a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a64:	69f8      	ldr	r0, [r7, #28]
 8004a66:	f000 f891 	bl	8004b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e002      	b.n	8004a76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295
 8004a74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a76:	69bb      	ldr	r3, [r7, #24]
	}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <prvInitialiseNewTask+0x46>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e7fe      	b.n	8004ac4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01f      	beq.n	8004b0c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e012      	b.n	8004af8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	7819      	ldrb	r1, [r3, #0]
 8004ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	3334      	adds	r3, #52	; 0x34
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d9e9      	bls.n	8004ad2 <prvInitialiseNewTask+0x52>
 8004afe:	e000      	b.n	8004b02 <prvInitialiseNewTask+0x82>
			{
				break;
 8004b00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b0a:	e003      	b.n	8004b14 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d901      	bls.n	8004b1e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b1a:	2306      	movs	r3, #6
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fe70 	bl	800481a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fe6b 	bl	800481a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f1c3 0207 	rsb	r2, r3, #7
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	69b8      	ldr	r0, [r7, #24]
 8004b6e:	f000 fbfd 	bl	800536c <pxPortInitialiseStack>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b84:	bf00      	nop
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b94:	f000 fd12 	bl	80055bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b98:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <prvAddNewTaskToReadyList+0xb8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <prvAddNewTaskToReadyList+0xb8>)
 8004ba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <prvAddNewTaskToReadyList+0xbc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004baa:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <prvAddNewTaskToReadyList+0xbc>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <prvAddNewTaskToReadyList+0xb8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d110      	bne.n	8004bda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bb8:	f000 fab8 	bl	800512c <prvInitialiseTaskLists>
 8004bbc:	e00d      	b.n	8004bda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bbe:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <prvAddNewTaskToReadyList+0xc0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bc6:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <prvAddNewTaskToReadyList+0xbc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d802      	bhi.n	8004bda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <prvAddNewTaskToReadyList+0xbc>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <prvAddNewTaskToReadyList+0xc4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <prvAddNewTaskToReadyList+0xc4>)
 8004be2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvAddNewTaskToReadyList+0xcc>)
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7ff fe11 	bl	8004834 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c12:	f000 fd01 	bl	8005618 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvAddNewTaskToReadyList+0xc0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddNewTaskToReadyList+0xbc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d207      	bcs.n	8004c3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <prvAddNewTaskToReadyList+0xd0>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200003fc 	.word	0x200003fc
 8004c48:	200002fc 	.word	0x200002fc
 8004c4c:	20000408 	.word	0x20000408
 8004c50:	20000418 	.word	0x20000418
 8004c54:	20000404 	.word	0x20000404
 8004c58:	20000300 	.word	0x20000300
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <vTaskDelay+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <vTaskDelay+0x2e>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	e7fe      	b.n	8004c8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004c8e:	f000 f879 	bl	8004d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c92:	2100      	movs	r1, #0
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb03 	bl	80052a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9a:	f000 f881 	bl	8004da0 <xTaskResumeAll>
 8004c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <vTaskDelay+0x64>)
 8004ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000424 	.word	0x20000424
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	1d39      	adds	r1, r7, #4
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fc f974 	bl	8000fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	9202      	str	r2, [sp, #8]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	491d      	ldr	r1, [pc, #116]	; (8004d6c <vTaskStartScheduler+0xa4>)
 8004cf8:	481d      	ldr	r0, [pc, #116]	; (8004d70 <vTaskStartScheduler+0xa8>)
 8004cfa:	f7ff fe22 	bl	8004942 <xTaskCreateStatic>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <vTaskStartScheduler+0xac>)
 8004d02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <vTaskStartScheduler+0xac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e001      	b.n	8004d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d115      	bne.n	8004d48 <vTaskStartScheduler+0x80>
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <vTaskStartScheduler+0xb0>)
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <vTaskStartScheduler+0xb4>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <vTaskStartScheduler+0xb8>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d42:	f000 fb9d 	bl	8005480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d46:	e00d      	b.n	8004d64 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d109      	bne.n	8004d64 <vTaskStartScheduler+0x9c>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e7fe      	b.n	8004d62 <vTaskStartScheduler+0x9a>
}
 8004d64:	bf00      	nop
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	080063e4 	.word	0x080063e4
 8004d70:	080050fd 	.word	0x080050fd
 8004d74:	20000420 	.word	0x20000420
 8004d78:	2000041c 	.word	0x2000041c
 8004d7c:	20000408 	.word	0x20000408
 8004d80:	20000400 	.word	0x20000400

08004d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <vTaskSuspendAll+0x18>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4a03      	ldr	r2, [pc, #12]	; (8004d9c <vTaskSuspendAll+0x18>)
 8004d90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20000424 	.word	0x20000424

08004da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <xTaskResumeAll+0x114>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <xTaskResumeAll+0x2a>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	e7fe      	b.n	8004dc8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dca:	f000 fbf7 	bl	80055bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <xTaskResumeAll+0x114>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4a37      	ldr	r2, [pc, #220]	; (8004eb4 <xTaskResumeAll+0x114>)
 8004dd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <xTaskResumeAll+0x114>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d161      	bne.n	8004ea4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004de0:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <xTaskResumeAll+0x118>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d05d      	beq.n	8004ea4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004de8:	e02e      	b.n	8004e48 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <xTaskResumeAll+0x11c>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3318      	adds	r3, #24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fd79 	bl	80048ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fd74 	bl	80048ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <xTaskResumeAll+0x120>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <xTaskResumeAll+0x120>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <xTaskResumeAll+0x124>)
 8004e26:	441a      	add	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7ff fd00 	bl	8004834 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <xTaskResumeAll+0x128>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <xTaskResumeAll+0x12c>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <xTaskResumeAll+0x11c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cc      	bne.n	8004dea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e56:	f000 fa03 	bl	8005260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <xTaskResumeAll+0x130>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e66:	f000 f837 	bl	8004ed8 <xTaskIncrementTick>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <xTaskResumeAll+0x12c>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f1      	bne.n	8004e66 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <xTaskResumeAll+0x130>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <xTaskResumeAll+0x12c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <xTaskResumeAll+0x134>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea4:	f000 fbb8 	bl	8005618 <vPortExitCritical>

	return xAlreadyYielded;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000424 	.word	0x20000424
 8004eb8:	200003fc 	.word	0x200003fc
 8004ebc:	200003bc 	.word	0x200003bc
 8004ec0:	20000404 	.word	0x20000404
 8004ec4:	20000300 	.word	0x20000300
 8004ec8:	200002fc 	.word	0x200002fc
 8004ecc:	20000410 	.word	0x20000410
 8004ed0:	2000040c 	.word	0x2000040c
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <xTaskIncrementTick+0x144>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f040 8087 	bne.w	8004ffa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eec:	4b4c      	ldr	r3, [pc, #304]	; (8005020 <xTaskIncrementTick+0x148>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ef4:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <xTaskIncrementTick+0x148>)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11f      	bne.n	8004f40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f00:	4b48      	ldr	r3, [pc, #288]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <xTaskIncrementTick+0x46>
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	e7fe      	b.n	8004f1c <xTaskIncrementTick+0x44>
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	4b40      	ldr	r3, [pc, #256]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3e      	ldr	r2, [pc, #248]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4a3e      	ldr	r2, [pc, #248]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <xTaskIncrementTick+0x154>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <xTaskIncrementTick+0x154>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	f000 f990 	bl	8005260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <xTaskIncrementTick+0x158>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d348      	bcc.n	8004fdc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4a:	4b36      	ldr	r3, [pc, #216]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f54:	4b36      	ldr	r3, [pc, #216]	; (8005030 <xTaskIncrementTick+0x158>)
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	601a      	str	r2, [r3, #0]
					break;
 8004f5c:	e03e      	b.n	8004fdc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d203      	bcs.n	8004f7e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f76:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <xTaskIncrementTick+0x158>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f7c:	e02e      	b.n	8004fdc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fcb3 	bl	80048ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3318      	adds	r3, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fcaa 	bl	80048ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <xTaskIncrementTick+0x15c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <xTaskIncrementTick+0x15c>)
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <xTaskIncrementTick+0x160>)
 8004fba:	441a      	add	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7ff fc36 	bl	8004834 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <xTaskIncrementTick+0x164>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d3b9      	bcc.n	8004f4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fda:	e7b6      	b.n	8004f4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <xTaskIncrementTick+0x164>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	4915      	ldr	r1, [pc, #84]	; (8005038 <xTaskIncrementTick+0x160>)
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d907      	bls.n	8005004 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e004      	b.n	8005004 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <xTaskIncrementTick+0x168>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <xTaskIncrementTick+0x168>)
 8005002:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <xTaskIncrementTick+0x16c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005010:	697b      	ldr	r3, [r7, #20]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000424 	.word	0x20000424
 8005020:	20000400 	.word	0x20000400
 8005024:	200003b4 	.word	0x200003b4
 8005028:	200003b8 	.word	0x200003b8
 800502c:	20000414 	.word	0x20000414
 8005030:	2000041c 	.word	0x2000041c
 8005034:	20000404 	.word	0x20000404
 8005038:	20000300 	.word	0x20000300
 800503c:	200002fc 	.word	0x200002fc
 8005040:	2000040c 	.word	0x2000040c
 8005044:	20000410 	.word	0x20000410

08005048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800504e:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <vTaskSwitchContext+0xa0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <vTaskSwitchContext+0xa4>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800505c:	e03e      	b.n	80050dc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <vTaskSwitchContext+0xa4>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005064:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <vTaskSwitchContext+0xa8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005072:	7afb      	ldrb	r3, [r7, #11]
 8005074:	f1c3 031f 	rsb	r3, r3, #31
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	491e      	ldr	r1, [pc, #120]	; (80050f4 <vTaskSwitchContext+0xac>)
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e7fe      	b.n	80050a0 <vTaskSwitchContext+0x58>
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <vTaskSwitchContext+0xac>)
 80050ae:	4413      	add	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3308      	adds	r3, #8
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d104      	bne.n	80050d2 <vTaskSwitchContext+0x8a>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <vTaskSwitchContext+0xb0>)
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20000424 	.word	0x20000424
 80050ec:	20000410 	.word	0x20000410
 80050f0:	20000404 	.word	0x20000404
 80050f4:	20000300 	.word	0x20000300
 80050f8:	200002fc 	.word	0x200002fc

080050fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005104:	f000 f852 	bl	80051ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <prvIdleTask+0x28>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d9f9      	bls.n	8005104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <prvIdleTask+0x2c>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005120:	e7f0      	b.n	8005104 <prvIdleTask+0x8>
 8005122:	bf00      	nop
 8005124:	20000300 	.word	0x20000300
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	e00c      	b.n	8005152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <prvInitialiseTaskLists+0x60>)
 8005144:	4413      	add	r3, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fb47 	bl	80047da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3301      	adds	r3, #1
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b06      	cmp	r3, #6
 8005156:	d9ef      	bls.n	8005138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005158:	480d      	ldr	r0, [pc, #52]	; (8005190 <prvInitialiseTaskLists+0x64>)
 800515a:	f7ff fb3e 	bl	80047da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <prvInitialiseTaskLists+0x68>)
 8005160:	f7ff fb3b 	bl	80047da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005164:	480c      	ldr	r0, [pc, #48]	; (8005198 <prvInitialiseTaskLists+0x6c>)
 8005166:	f7ff fb38 	bl	80047da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800516a:	480c      	ldr	r0, [pc, #48]	; (800519c <prvInitialiseTaskLists+0x70>)
 800516c:	f7ff fb35 	bl	80047da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005170:	480b      	ldr	r0, [pc, #44]	; (80051a0 <prvInitialiseTaskLists+0x74>)
 8005172:	f7ff fb32 	bl	80047da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <prvInitialiseTaskLists+0x78>)
 8005178:	4a05      	ldr	r2, [pc, #20]	; (8005190 <prvInitialiseTaskLists+0x64>)
 800517a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <prvInitialiseTaskLists+0x7c>)
 800517e:	4a05      	ldr	r2, [pc, #20]	; (8005194 <prvInitialiseTaskLists+0x68>)
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000300 	.word	0x20000300
 8005190:	2000038c 	.word	0x2000038c
 8005194:	200003a0 	.word	0x200003a0
 8005198:	200003bc 	.word	0x200003bc
 800519c:	200003d0 	.word	0x200003d0
 80051a0:	200003e8 	.word	0x200003e8
 80051a4:	200003b4 	.word	0x200003b4
 80051a8:	200003b8 	.word	0x200003b8

080051ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051b2:	e019      	b.n	80051e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051b4:	f000 fa02 	bl	80055bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <prvCheckTasksWaitingTermination+0x4c>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fb92 	bl	80048ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <prvCheckTasksWaitingTermination+0x50>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <prvCheckTasksWaitingTermination+0x50>)
 80051d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <prvCheckTasksWaitingTermination+0x54>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3b01      	subs	r3, #1
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <prvCheckTasksWaitingTermination+0x54>)
 80051dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051de:	f000 fa1b 	bl	8005618 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f80e 	bl	8005204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <prvCheckTasksWaitingTermination+0x54>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e1      	bne.n	80051b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200003d0 	.word	0x200003d0
 80051fc:	200003fc 	.word	0x200003fc
 8005200:	200003e4 	.word	0x200003e4

08005204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005212:	2b00      	cmp	r3, #0
 8005214:	d108      	bne.n	8005228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb6c 	bl	80058f8 <vPortFree>
				vPortFree( pxTCB );
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fb69 	bl	80058f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005226:	e017      	b.n	8005258 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522e:	2b01      	cmp	r3, #1
 8005230:	d103      	bne.n	800523a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fb60 	bl	80058f8 <vPortFree>
	}
 8005238:	e00e      	b.n	8005258 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005240:	2b02      	cmp	r3, #2
 8005242:	d009      	beq.n	8005258 <prvDeleteTCB+0x54>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e7fe      	b.n	8005256 <prvDeleteTCB+0x52>
	}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <prvResetNextTaskUnblockTime+0x38>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <prvResetNextTaskUnblockTime+0x3c>)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005278:	e008      	b.n	800528c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <prvResetNextTaskUnblockTime+0x38>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <prvResetNextTaskUnblockTime+0x3c>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	200003b4 	.word	0x200003b4
 800529c:	2000041c 	.word	0x2000041c

080052a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052aa:	4b29      	ldr	r3, [pc, #164]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fb19 	bl	80048ee <uxListRemove>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10b      	bne.n	80052da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	2201      	movs	r2, #1
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43da      	mvns	r2, r3
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4013      	ands	r3, r2
 80052d6:	4a20      	ldr	r2, [pc, #128]	; (8005358 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d10a      	bne.n	80052f8 <prvAddCurrentTaskToDelayedList+0x58>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e8:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	481a      	ldr	r0, [pc, #104]	; (800535c <prvAddCurrentTaskToDelayedList+0xbc>)
 80052f2:	f7ff fa9f 	bl	8004834 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052f6:	e026      	b.n	8005346 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	429a      	cmp	r2, r3
 800530e:	d209      	bcs.n	8005324 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005310:	4b13      	ldr	r3, [pc, #76]	; (8005360 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7ff faad 	bl	800487c <vListInsert>
}
 8005322:	e010      	b.n	8005346 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7ff faa3 	bl	800487c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	d202      	bcs.n	8005346 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6013      	str	r3, [r2, #0]
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000400 	.word	0x20000400
 8005354:	200002fc 	.word	0x200002fc
 8005358:	20000404 	.word	0x20000404
 800535c:	200003e8 	.word	0x200003e8
 8005360:	200003b8 	.word	0x200003b8
 8005364:	200003b4 	.word	0x200003b4
 8005368:	2000041c 	.word	0x2000041c

0800536c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b04      	subs	r3, #4
 800537c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b04      	subs	r3, #4
 800538a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b04      	subs	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800539c:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <pxPortInitialiseStack+0x64>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b14      	subs	r3, #20
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f06f 0202 	mvn.w	r2, #2
 80053ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b20      	subs	r3, #32
 80053c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	080053d5 	.word	0x080053d5

080053d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053de:	4b11      	ldr	r3, [pc, #68]	; (8005424 <prvTaskExitError+0x50>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d009      	beq.n	80053fc <prvTaskExitError+0x28>
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e7fe      	b.n	80053fa <prvTaskExitError+0x26>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800540e:	bf00      	nop
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0fc      	beq.n	8005410 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	2000000c 	.word	0x2000000c
	...

08005430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <pxCurrentTCBConst2>)
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f380 8809 	msr	PSP, r0
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	4770      	bx	lr
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst2>:
 8005450:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005458:	4808      	ldr	r0, [pc, #32]	; (800547c <prvPortStartFirstTask+0x24>)
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f380 8808 	msr	MSP, r0
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8814 	msr	CONTROL, r0
 800546a:	b662      	cpsie	i
 800546c:	b661      	cpsie	f
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	df00      	svc	0
 8005478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800547a:	bf00      	nop
 800547c:	e000ed08 	.word	0xe000ed08

08005480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005486:	4b44      	ldr	r3, [pc, #272]	; (8005598 <xPortStartScheduler+0x118>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a44      	ldr	r2, [pc, #272]	; (800559c <xPortStartScheduler+0x11c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d109      	bne.n	80054a4 <xPortStartScheduler+0x24>
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	e7fe      	b.n	80054a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054a4:	4b3c      	ldr	r3, [pc, #240]	; (8005598 <xPortStartScheduler+0x118>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <xPortStartScheduler+0x120>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d109      	bne.n	80054c2 <xPortStartScheduler+0x42>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e7fe      	b.n	80054c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054c2:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <xPortStartScheduler+0x124>)
 80054c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	22ff      	movs	r2, #255	; 0xff
 80054d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <xPortStartScheduler+0x128>)
 80054e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054ea:	4b30      	ldr	r3, [pc, #192]	; (80055ac <xPortStartScheduler+0x12c>)
 80054ec:	2207      	movs	r2, #7
 80054ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054f0:	e009      	b.n	8005506 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <xPortStartScheduler+0x12c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <xPortStartScheduler+0x12c>)
 80054fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b80      	cmp	r3, #128	; 0x80
 8005510:	d0ef      	beq.n	80054f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <xPortStartScheduler+0x12c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1c3 0307 	rsb	r3, r3, #7
 800551a:	2b04      	cmp	r3, #4
 800551c:	d009      	beq.n	8005532 <xPortStartScheduler+0xb2>
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	e7fe      	b.n	8005530 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <xPortStartScheduler+0x12c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <xPortStartScheduler+0x12c>)
 800553a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <xPortStartScheduler+0x12c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005544:	4a19      	ldr	r2, [pc, #100]	; (80055ac <xPortStartScheduler+0x12c>)
 8005546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005550:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <xPortStartScheduler+0x130>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <xPortStartScheduler+0x130>)
 8005556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800555a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800555c:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <xPortStartScheduler+0x130>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <xPortStartScheduler+0x130>)
 8005562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005568:	f000 f8d6 	bl	8005718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <xPortStartScheduler+0x134>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005572:	f000 f8f5 	bl	8005760 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <xPortStartScheduler+0x138>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <xPortStartScheduler+0x138>)
 800557c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005582:	f7ff ff69 	bl	8005458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005586:	f7ff fd5f 	bl	8005048 <vTaskSwitchContext>
	prvTaskExitError();
 800558a:	f7ff ff23 	bl	80053d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	e000ed00 	.word	0xe000ed00
 800559c:	410fc271 	.word	0x410fc271
 80055a0:	410fc270 	.word	0x410fc270
 80055a4:	e000e400 	.word	0xe000e400
 80055a8:	20000428 	.word	0x20000428
 80055ac:	2000042c 	.word	0x2000042c
 80055b0:	e000ed20 	.word	0xe000ed20
 80055b4:	2000000c 	.word	0x2000000c
 80055b8:	e000ef34 	.word	0xe000ef34

080055bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <vPortEnterCritical+0x54>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <vPortEnterCritical+0x54>)
 80055dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <vPortEnterCritical+0x54>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10e      	bne.n	8005604 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <vPortEnterCritical+0x58>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <vPortEnterCritical+0x48>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	e7fe      	b.n	8005602 <vPortEnterCritical+0x46>
	}
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	2000000c 	.word	0x2000000c
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800561e:	4b11      	ldr	r3, [pc, #68]	; (8005664 <vPortExitCritical+0x4c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <vPortExitCritical+0x22>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	e7fe      	b.n	8005638 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <vPortExitCritical+0x4c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3b01      	subs	r3, #1
 8005640:	4a08      	ldr	r2, [pc, #32]	; (8005664 <vPortExitCritical+0x4c>)
 8005642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <vPortExitCritical+0x4c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <vPortExitCritical+0x3e>
 800564c:	2300      	movs	r3, #0
 800564e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000000c 	.word	0x2000000c
	...

08005670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005670:	f3ef 8009 	mrs	r0, PSP
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <pxCurrentTCBConst>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	f01e 0f10 	tst.w	lr, #16
 8005680:	bf08      	it	eq
 8005682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568a:	6010      	str	r0, [r2, #0]
 800568c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005694:	f380 8811 	msr	BASEPRI, r0
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f7ff fcd2 	bl	8005048 <vTaskSwitchContext>
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f380 8811 	msr	BASEPRI, r0
 80056ac:	bc09      	pop	{r0, r3}
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	6808      	ldr	r0, [r1, #0]
 80056b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b6:	f01e 0f10 	tst.w	lr, #16
 80056ba:	bf08      	it	eq
 80056bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056c0:	f380 8809 	msr	PSP, r0
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	f3af 8000 	nop.w

080056d0 <pxCurrentTCBConst>:
 80056d0:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop

080056d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056f0:	f7ff fbf2 	bl	8004ed8 <xTaskIncrementTick>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <SysTick_Handler+0x3c>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <vPortSetupTimerInterrupt+0x34>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <vPortSetupTimerInterrupt+0x38>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <vPortSetupTimerInterrupt+0x3c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <vPortSetupTimerInterrupt+0x40>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	4a09      	ldr	r2, [pc, #36]	; (800575c <vPortSetupTimerInterrupt+0x44>)
 8005736:	3b01      	subs	r3, #1
 8005738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <vPortSetupTimerInterrupt+0x34>)
 800573c:	2207      	movs	r2, #7
 800573e:	601a      	str	r2, [r3, #0]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	e000e010 	.word	0xe000e010
 8005750:	e000e018 	.word	0xe000e018
 8005754:	20000000 	.word	0x20000000
 8005758:	10624dd3 	.word	0x10624dd3
 800575c:	e000e014 	.word	0xe000e014

08005760 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005760:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005770 <vPortEnableVFP+0x10>
 8005764:	6801      	ldr	r1, [r0, #0]
 8005766:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800576a:	6001      	str	r1, [r0, #0]
 800576c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800576e:	bf00      	nop
 8005770:	e000ed88 	.word	0xe000ed88

08005774 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005780:	f7ff fb00 	bl	8004d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005784:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <pvPortMalloc+0x170>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800578c:	f000 f90c 	bl	80059a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005790:	4b55      	ldr	r3, [pc, #340]	; (80058e8 <pvPortMalloc+0x174>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 808c 	bne.w	80058b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01c      	beq.n	80057de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80057a4:	2208      	movs	r2, #8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f023 0307 	bic.w	r3, r3, #7
 80057bc:	3308      	adds	r3, #8
 80057be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <pvPortMalloc+0x6a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e7fe      	b.n	80057dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d068      	beq.n	80058b6 <pvPortMalloc+0x142>
 80057e4:	4b41      	ldr	r3, [pc, #260]	; (80058ec <pvPortMalloc+0x178>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d863      	bhi.n	80058b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ee:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <pvPortMalloc+0x17c>)
 80057f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057f2:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <pvPortMalloc+0x17c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f8:	e004      	b.n	8005804 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d903      	bls.n	8005816 <pvPortMalloc+0xa2>
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f1      	bne.n	80057fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005816:	4b33      	ldr	r3, [pc, #204]	; (80058e4 <pvPortMalloc+0x170>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	429a      	cmp	r2, r3
 800581e:	d04a      	beq.n	80058b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	4413      	add	r3, r2
 8005828:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	2308      	movs	r3, #8
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	d91e      	bls.n	8005880 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <pvPortMalloc+0xf4>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e7fe      	b.n	8005866 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800587a:	69b8      	ldr	r0, [r7, #24]
 800587c:	f000 f8f6 	bl	8005a6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <pvPortMalloc+0x178>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <pvPortMalloc+0x178>)
 800588c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800588e:	4b17      	ldr	r3, [pc, #92]	; (80058ec <pvPortMalloc+0x178>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <pvPortMalloc+0x180>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d203      	bcs.n	80058a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <pvPortMalloc+0x178>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <pvPortMalloc+0x180>)
 80058a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <pvPortMalloc+0x174>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058b6:	f7ff fa73 	bl	8004da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <pvPortMalloc+0x164>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e7fe      	b.n	80058d6 <pvPortMalloc+0x162>
	return pvReturn;
 80058d8:	69fb      	ldr	r3, [r7, #28]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000ff0 	.word	0x20000ff0
 80058e8:	20000ffc 	.word	0x20000ffc
 80058ec:	20000ff4 	.word	0x20000ff4
 80058f0:	20000fe8 	.word	0x20000fe8
 80058f4:	20000ff8 	.word	0x20000ff8

080058f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d046      	beq.n	8005998 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800590a:	2308      	movs	r3, #8
 800590c:	425b      	negs	r3, r3
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <vPortFree+0xa8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <vPortFree+0x42>
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e7fe      	b.n	8005938 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <vPortFree+0x5e>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	e7fe      	b.n	8005954 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <vPortFree+0xa8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d019      	beq.n	8005998 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortFree+0xa8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800597c:	f7ff fa02 	bl	8004d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <vPortFree+0xac>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4413      	add	r3, r2
 800598a:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <vPortFree+0xac>)
 800598c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f000 f86c 	bl	8005a6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005994:	f7ff fa04 	bl	8004da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000ffc 	.word	0x20000ffc
 80059a4:	20000ff4 	.word	0x20000ff4

080059a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80059b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059b4:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <prvHeapInit+0xac>)
 80059b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3307      	adds	r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <prvHeapInit+0xac>)
 80059d8:	4413      	add	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <prvHeapInit+0xb0>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059e6:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <prvHeapInit+0xb0>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059f4:	2208      	movs	r2, #8
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <prvHeapInit+0xb4>)
 8005a08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <prvHeapInit+0xb4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <prvHeapInit+0xb4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <prvHeapInit+0xb4>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <prvHeapInit+0xb8>)
 8005a36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <prvHeapInit+0xbc>)
 8005a3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <prvHeapInit+0xc0>)
 8005a42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000430 	.word	0x20000430
 8005a58:	20000fe8 	.word	0x20000fe8
 8005a5c:	20000ff0 	.word	0x20000ff0
 8005a60:	20000ff8 	.word	0x20000ff8
 8005a64:	20000ff4 	.word	0x20000ff4
 8005a68:	20000ffc 	.word	0x20000ffc

08005a6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a74:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <prvInsertBlockIntoFreeList+0xac>)
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e002      	b.n	8005a80 <prvInsertBlockIntoFreeList+0x14>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d8f7      	bhi.n	8005a7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d108      	bne.n	8005aae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	441a      	add	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d118      	bne.n	8005af4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d00d      	beq.n	8005aea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	441a      	add	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e008      	b.n	8005afc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <prvInsertBlockIntoFreeList+0xb0>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e003      	b.n	8005afc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d002      	beq.n	8005b0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000fe8 	.word	0x20000fe8
 8005b1c:	20000ff0 	.word	0x20000ff0

08005b20 <__errno>:
 8005b20:	4b01      	ldr	r3, [pc, #4]	; (8005b28 <__errno+0x8>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000010 	.word	0x20000010

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0d      	ldr	r6, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1ba4      	subs	r4, r4, r6
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2500      	movs	r5, #0
 8005b38:	42a5      	cmp	r5, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4e0b      	ldr	r6, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 fc28 	bl	8006394 <_init>
 8005b44:	1ba4      	subs	r4, r4, r6
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2500      	movs	r5, #0
 8005b4a:	42a5      	cmp	r5, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b54:	4798      	blx	r3
 8005b56:	3501      	adds	r5, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5e:	4798      	blx	r3
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08006470 	.word	0x08006470
 8005b68:	08006470 	.word	0x08006470
 8005b6c:	08006470 	.word	0x08006470
 8005b70:	08006474 	.word	0x08006474

08005b74 <memcpy>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	1e43      	subs	r3, r0, #1
 8005b78:	440a      	add	r2, r1
 8005b7a:	4291      	cmp	r1, r2
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b88:	e7f7      	b.n	8005b7a <memcpy+0x6>

08005b8a <memset>:
 8005b8a:	4402      	add	r2, r0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d100      	bne.n	8005b94 <memset+0xa>
 8005b92:	4770      	bx	lr
 8005b94:	f803 1b01 	strb.w	r1, [r3], #1
 8005b98:	e7f9      	b.n	8005b8e <memset+0x4>
	...

08005b9c <siprintf>:
 8005b9c:	b40e      	push	{r1, r2, r3}
 8005b9e:	b500      	push	{lr}
 8005ba0:	b09c      	sub	sp, #112	; 0x70
 8005ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba4:	9002      	str	r0, [sp, #8]
 8005ba6:	9006      	str	r0, [sp, #24]
 8005ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bac:	4809      	ldr	r0, [pc, #36]	; (8005bd4 <siprintf+0x38>)
 8005bae:	9107      	str	r1, [sp, #28]
 8005bb0:	9104      	str	r1, [sp, #16]
 8005bb2:	4909      	ldr	r1, [pc, #36]	; (8005bd8 <siprintf+0x3c>)
 8005bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb8:	9105      	str	r1, [sp, #20]
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	a902      	add	r1, sp, #8
 8005bc0:	f000 f866 	bl	8005c90 <_svfiprintf_r>
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	b01c      	add	sp, #112	; 0x70
 8005bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd0:	b003      	add	sp, #12
 8005bd2:	4770      	bx	lr
 8005bd4:	20000010 	.word	0x20000010
 8005bd8:	ffff0208 	.word	0xffff0208

08005bdc <__ssputs_r>:
 8005bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	688e      	ldr	r6, [r1, #8]
 8005be2:	429e      	cmp	r6, r3
 8005be4:	4682      	mov	sl, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	4690      	mov	r8, r2
 8005bea:	4699      	mov	r9, r3
 8005bec:	d837      	bhi.n	8005c5e <__ssputs_r+0x82>
 8005bee:	898a      	ldrh	r2, [r1, #12]
 8005bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bf4:	d031      	beq.n	8005c5a <__ssputs_r+0x7e>
 8005bf6:	6825      	ldr	r5, [r4, #0]
 8005bf8:	6909      	ldr	r1, [r1, #16]
 8005bfa:	1a6f      	subs	r7, r5, r1
 8005bfc:	6965      	ldr	r5, [r4, #20]
 8005bfe:	2302      	movs	r3, #2
 8005c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c04:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c08:	f109 0301 	add.w	r3, r9, #1
 8005c0c:	443b      	add	r3, r7
 8005c0e:	429d      	cmp	r5, r3
 8005c10:	bf38      	it	cc
 8005c12:	461d      	movcc	r5, r3
 8005c14:	0553      	lsls	r3, r2, #21
 8005c16:	d530      	bpl.n	8005c7a <__ssputs_r+0x9e>
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f000 fb21 	bl	8006260 <_malloc_r>
 8005c1e:	4606      	mov	r6, r0
 8005c20:	b950      	cbnz	r0, 8005c38 <__ssputs_r+0x5c>
 8005c22:	230c      	movs	r3, #12
 8005c24:	f8ca 3000 	str.w	r3, [sl]
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c38:	463a      	mov	r2, r7
 8005c3a:	6921      	ldr	r1, [r4, #16]
 8005c3c:	f7ff ff9a 	bl	8005b74 <memcpy>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	6126      	str	r6, [r4, #16]
 8005c4e:	6165      	str	r5, [r4, #20]
 8005c50:	443e      	add	r6, r7
 8005c52:	1bed      	subs	r5, r5, r7
 8005c54:	6026      	str	r6, [r4, #0]
 8005c56:	60a5      	str	r5, [r4, #8]
 8005c58:	464e      	mov	r6, r9
 8005c5a:	454e      	cmp	r6, r9
 8005c5c:	d900      	bls.n	8005c60 <__ssputs_r+0x84>
 8005c5e:	464e      	mov	r6, r9
 8005c60:	4632      	mov	r2, r6
 8005c62:	4641      	mov	r1, r8
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	f000 fa93 	bl	8006190 <memmove>
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	1b9b      	subs	r3, r3, r6
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	441e      	add	r6, r3
 8005c74:	6026      	str	r6, [r4, #0]
 8005c76:	2000      	movs	r0, #0
 8005c78:	e7dc      	b.n	8005c34 <__ssputs_r+0x58>
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	f000 fb4a 	bl	8006314 <_realloc_r>
 8005c80:	4606      	mov	r6, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d1e2      	bne.n	8005c4c <__ssputs_r+0x70>
 8005c86:	6921      	ldr	r1, [r4, #16]
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f000 fa9b 	bl	80061c4 <_free_r>
 8005c8e:	e7c8      	b.n	8005c22 <__ssputs_r+0x46>

08005c90 <_svfiprintf_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	461d      	mov	r5, r3
 8005c96:	898b      	ldrh	r3, [r1, #12]
 8005c98:	061f      	lsls	r7, r3, #24
 8005c9a:	b09d      	sub	sp, #116	; 0x74
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	d50f      	bpl.n	8005cc4 <_svfiprintf_r+0x34>
 8005ca4:	690b      	ldr	r3, [r1, #16]
 8005ca6:	b96b      	cbnz	r3, 8005cc4 <_svfiprintf_r+0x34>
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	f000 fad9 	bl	8006260 <_malloc_r>
 8005cae:	6020      	str	r0, [r4, #0]
 8005cb0:	6120      	str	r0, [r4, #16]
 8005cb2:	b928      	cbnz	r0, 8005cc0 <_svfiprintf_r+0x30>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	f8c8 3000 	str.w	r3, [r8]
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbe:	e0c8      	b.n	8005e52 <_svfiprintf_r+0x1c2>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	6163      	str	r3, [r4, #20]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc8:	2320      	movs	r3, #32
 8005cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cce:	2330      	movs	r3, #48	; 0x30
 8005cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd4:	9503      	str	r5, [sp, #12]
 8005cd6:	f04f 0b01 	mov.w	fp, #1
 8005cda:	4637      	mov	r7, r6
 8005cdc:	463d      	mov	r5, r7
 8005cde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ce2:	b10b      	cbz	r3, 8005ce8 <_svfiprintf_r+0x58>
 8005ce4:	2b25      	cmp	r3, #37	; 0x25
 8005ce6:	d13e      	bne.n	8005d66 <_svfiprintf_r+0xd6>
 8005ce8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cec:	d00b      	beq.n	8005d06 <_svfiprintf_r+0x76>
 8005cee:	4653      	mov	r3, sl
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	f7ff ff71 	bl	8005bdc <__ssputs_r>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f000 80a4 	beq.w	8005e48 <_svfiprintf_r+0x1b8>
 8005d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d02:	4453      	add	r3, sl
 8005d04:	9309      	str	r3, [sp, #36]	; 0x24
 8005d06:	783b      	ldrb	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 809d 	beq.w	8005e48 <_svfiprintf_r+0x1b8>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	9307      	str	r3, [sp, #28]
 8005d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d20:	931a      	str	r3, [sp, #104]	; 0x68
 8005d22:	462f      	mov	r7, r5
 8005d24:	2205      	movs	r2, #5
 8005d26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d2a:	4850      	ldr	r0, [pc, #320]	; (8005e6c <_svfiprintf_r+0x1dc>)
 8005d2c:	f7fa fa50 	bl	80001d0 <memchr>
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	b9d0      	cbnz	r0, 8005d6a <_svfiprintf_r+0xda>
 8005d34:	06d9      	lsls	r1, r3, #27
 8005d36:	bf44      	itt	mi
 8005d38:	2220      	movmi	r2, #32
 8005d3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d3e:	071a      	lsls	r2, r3, #28
 8005d40:	bf44      	itt	mi
 8005d42:	222b      	movmi	r2, #43	; 0x2b
 8005d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d48:	782a      	ldrb	r2, [r5, #0]
 8005d4a:	2a2a      	cmp	r2, #42	; 0x2a
 8005d4c:	d015      	beq.n	8005d7a <_svfiprintf_r+0xea>
 8005d4e:	9a07      	ldr	r2, [sp, #28]
 8005d50:	462f      	mov	r7, r5
 8005d52:	2000      	movs	r0, #0
 8005d54:	250a      	movs	r5, #10
 8005d56:	4639      	mov	r1, r7
 8005d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d5c:	3b30      	subs	r3, #48	; 0x30
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	d94d      	bls.n	8005dfe <_svfiprintf_r+0x16e>
 8005d62:	b1b8      	cbz	r0, 8005d94 <_svfiprintf_r+0x104>
 8005d64:	e00f      	b.n	8005d86 <_svfiprintf_r+0xf6>
 8005d66:	462f      	mov	r7, r5
 8005d68:	e7b8      	b.n	8005cdc <_svfiprintf_r+0x4c>
 8005d6a:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <_svfiprintf_r+0x1dc>)
 8005d6c:	1a80      	subs	r0, r0, r2
 8005d6e:	fa0b f000 	lsl.w	r0, fp, r0
 8005d72:	4318      	orrs	r0, r3
 8005d74:	9004      	str	r0, [sp, #16]
 8005d76:	463d      	mov	r5, r7
 8005d78:	e7d3      	b.n	8005d22 <_svfiprintf_r+0x92>
 8005d7a:	9a03      	ldr	r2, [sp, #12]
 8005d7c:	1d11      	adds	r1, r2, #4
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	9103      	str	r1, [sp, #12]
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	db01      	blt.n	8005d8a <_svfiprintf_r+0xfa>
 8005d86:	9207      	str	r2, [sp, #28]
 8005d88:	e004      	b.n	8005d94 <_svfiprintf_r+0x104>
 8005d8a:	4252      	negs	r2, r2
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	9207      	str	r2, [sp, #28]
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	783b      	ldrb	r3, [r7, #0]
 8005d96:	2b2e      	cmp	r3, #46	; 0x2e
 8005d98:	d10c      	bne.n	8005db4 <_svfiprintf_r+0x124>
 8005d9a:	787b      	ldrb	r3, [r7, #1]
 8005d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9e:	d133      	bne.n	8005e08 <_svfiprintf_r+0x178>
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	1d1a      	adds	r2, r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	9203      	str	r2, [sp, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bfb8      	it	lt
 8005dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db0:	3702      	adds	r7, #2
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	4d2e      	ldr	r5, [pc, #184]	; (8005e70 <_svfiprintf_r+0x1e0>)
 8005db6:	7839      	ldrb	r1, [r7, #0]
 8005db8:	2203      	movs	r2, #3
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f7fa fa08 	bl	80001d0 <memchr>
 8005dc0:	b138      	cbz	r0, 8005dd2 <_svfiprintf_r+0x142>
 8005dc2:	2340      	movs	r3, #64	; 0x40
 8005dc4:	1b40      	subs	r0, r0, r5
 8005dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	4303      	orrs	r3, r0
 8005dce:	3701      	adds	r7, #1
 8005dd0:	9304      	str	r3, [sp, #16]
 8005dd2:	7839      	ldrb	r1, [r7, #0]
 8005dd4:	4827      	ldr	r0, [pc, #156]	; (8005e74 <_svfiprintf_r+0x1e4>)
 8005dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dda:	2206      	movs	r2, #6
 8005ddc:	1c7e      	adds	r6, r7, #1
 8005dde:	f7fa f9f7 	bl	80001d0 <memchr>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d038      	beq.n	8005e58 <_svfiprintf_r+0x1c8>
 8005de6:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <_svfiprintf_r+0x1e8>)
 8005de8:	bb13      	cbnz	r3, 8005e30 <_svfiprintf_r+0x1a0>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	3307      	adds	r3, #7
 8005dee:	f023 0307 	bic.w	r3, r3, #7
 8005df2:	3308      	adds	r3, #8
 8005df4:	9303      	str	r3, [sp, #12]
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	444b      	add	r3, r9
 8005dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfc:	e76d      	b.n	8005cda <_svfiprintf_r+0x4a>
 8005dfe:	fb05 3202 	mla	r2, r5, r2, r3
 8005e02:	2001      	movs	r0, #1
 8005e04:	460f      	mov	r7, r1
 8005e06:	e7a6      	b.n	8005d56 <_svfiprintf_r+0xc6>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	3701      	adds	r7, #1
 8005e0c:	9305      	str	r3, [sp, #20]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	250a      	movs	r5, #10
 8005e12:	4638      	mov	r0, r7
 8005e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e18:	3a30      	subs	r2, #48	; 0x30
 8005e1a:	2a09      	cmp	r2, #9
 8005e1c:	d903      	bls.n	8005e26 <_svfiprintf_r+0x196>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0c8      	beq.n	8005db4 <_svfiprintf_r+0x124>
 8005e22:	9105      	str	r1, [sp, #20]
 8005e24:	e7c6      	b.n	8005db4 <_svfiprintf_r+0x124>
 8005e26:	fb05 2101 	mla	r1, r5, r1, r2
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	e7f0      	b.n	8005e12 <_svfiprintf_r+0x182>
 8005e30:	ab03      	add	r3, sp, #12
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4622      	mov	r2, r4
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <_svfiprintf_r+0x1ec>)
 8005e38:	a904      	add	r1, sp, #16
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f3af 8000 	nop.w
 8005e40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e44:	4681      	mov	r9, r0
 8005e46:	d1d6      	bne.n	8005df6 <_svfiprintf_r+0x166>
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	065b      	lsls	r3, r3, #25
 8005e4c:	f53f af35 	bmi.w	8005cba <_svfiprintf_r+0x2a>
 8005e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e52:	b01d      	add	sp, #116	; 0x74
 8005e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e58:	ab03      	add	r3, sp, #12
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <_svfiprintf_r+0x1ec>)
 8005e60:	a904      	add	r1, sp, #16
 8005e62:	4640      	mov	r0, r8
 8005e64:	f000 f882 	bl	8005f6c <_printf_i>
 8005e68:	e7ea      	b.n	8005e40 <_svfiprintf_r+0x1b0>
 8005e6a:	bf00      	nop
 8005e6c:	08006434 	.word	0x08006434
 8005e70:	0800643a 	.word	0x0800643a
 8005e74:	0800643e 	.word	0x0800643e
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	08005bdd 	.word	0x08005bdd

08005e80 <_printf_common>:
 8005e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	4691      	mov	r9, r2
 8005e86:	461f      	mov	r7, r3
 8005e88:	688a      	ldr	r2, [r1, #8]
 8005e8a:	690b      	ldr	r3, [r1, #16]
 8005e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	bfb8      	it	lt
 8005e94:	4613      	movlt	r3, r2
 8005e96:	f8c9 3000 	str.w	r3, [r9]
 8005e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b112      	cbz	r2, 8005eaa <_printf_common+0x2a>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f8c9 3000 	str.w	r3, [r9]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	0699      	lsls	r1, r3, #26
 8005eae:	bf42      	ittt	mi
 8005eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005eb4:	3302      	addmi	r3, #2
 8005eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d107      	bne.n	8005ed2 <_printf_common+0x52>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	42ab      	cmp	r3, r5
 8005ed0:	dc28      	bgt.n	8005f24 <_printf_common+0xa4>
 8005ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	3300      	adds	r3, #0
 8005eda:	bf18      	it	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	0692      	lsls	r2, r2, #26
 8005ee0:	d42d      	bmi.n	8005f3e <_printf_common+0xbe>
 8005ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	4630      	mov	r0, r6
 8005eea:	47c0      	blx	r8
 8005eec:	3001      	adds	r0, #1
 8005eee:	d020      	beq.n	8005f32 <_printf_common+0xb2>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	68e5      	ldr	r5, [r4, #12]
 8005ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef8:	f003 0306 	and.w	r3, r3, #6
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	bf08      	it	eq
 8005f00:	1aad      	subeq	r5, r5, r2
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	bf0c      	ite	eq
 8005f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f0c:	2500      	movne	r5, #0
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bfc4      	itt	gt
 8005f12:	1a9b      	subgt	r3, r3, r2
 8005f14:	18ed      	addgt	r5, r5, r3
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	341a      	adds	r4, #26
 8005f1c:	454d      	cmp	r5, r9
 8005f1e:	d11a      	bne.n	8005f56 <_printf_common+0xd6>
 8005f20:	2000      	movs	r0, #0
 8005f22:	e008      	b.n	8005f36 <_printf_common+0xb6>
 8005f24:	2301      	movs	r3, #1
 8005f26:	4652      	mov	r2, sl
 8005f28:	4639      	mov	r1, r7
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	47c0      	blx	r8
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d103      	bne.n	8005f3a <_printf_common+0xba>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	e7c3      	b.n	8005ec6 <_printf_common+0x46>
 8005f3e:	18e1      	adds	r1, r4, r3
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	2030      	movs	r0, #48	; 0x30
 8005f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f48:	4422      	add	r2, r4
 8005f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f52:	3302      	adds	r3, #2
 8005f54:	e7c5      	b.n	8005ee2 <_printf_common+0x62>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	47c0      	blx	r8
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0e6      	beq.n	8005f32 <_printf_common+0xb2>
 8005f64:	f109 0901 	add.w	r9, r9, #1
 8005f68:	e7d8      	b.n	8005f1c <_printf_common+0x9c>
	...

08005f6c <_printf_i>:
 8005f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f74:	460c      	mov	r4, r1
 8005f76:	7e09      	ldrb	r1, [r1, #24]
 8005f78:	b085      	sub	sp, #20
 8005f7a:	296e      	cmp	r1, #110	; 0x6e
 8005f7c:	4617      	mov	r7, r2
 8005f7e:	4606      	mov	r6, r0
 8005f80:	4698      	mov	r8, r3
 8005f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f84:	f000 80b3 	beq.w	80060ee <_printf_i+0x182>
 8005f88:	d822      	bhi.n	8005fd0 <_printf_i+0x64>
 8005f8a:	2963      	cmp	r1, #99	; 0x63
 8005f8c:	d036      	beq.n	8005ffc <_printf_i+0x90>
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x3a>
 8005f90:	2900      	cmp	r1, #0
 8005f92:	f000 80b9 	beq.w	8006108 <_printf_i+0x19c>
 8005f96:	2958      	cmp	r1, #88	; 0x58
 8005f98:	f000 8083 	beq.w	80060a2 <_printf_i+0x136>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fa4:	e032      	b.n	800600c <_printf_i+0xa0>
 8005fa6:	2964      	cmp	r1, #100	; 0x64
 8005fa8:	d001      	beq.n	8005fae <_printf_i+0x42>
 8005faa:	2969      	cmp	r1, #105	; 0x69
 8005fac:	d1f6      	bne.n	8005f9c <_printf_i+0x30>
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	0605      	lsls	r5, r0, #24
 8005fb4:	f103 0104 	add.w	r1, r3, #4
 8005fb8:	d52a      	bpl.n	8006010 <_printf_i+0xa4>
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6011      	str	r1, [r2, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da03      	bge.n	8005fca <_printf_i+0x5e>
 8005fc2:	222d      	movs	r2, #45	; 0x2d
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fca:	486f      	ldr	r0, [pc, #444]	; (8006188 <_printf_i+0x21c>)
 8005fcc:	220a      	movs	r2, #10
 8005fce:	e039      	b.n	8006044 <_printf_i+0xd8>
 8005fd0:	2973      	cmp	r1, #115	; 0x73
 8005fd2:	f000 809d 	beq.w	8006110 <_printf_i+0x1a4>
 8005fd6:	d808      	bhi.n	8005fea <_printf_i+0x7e>
 8005fd8:	296f      	cmp	r1, #111	; 0x6f
 8005fda:	d020      	beq.n	800601e <_printf_i+0xb2>
 8005fdc:	2970      	cmp	r1, #112	; 0x70
 8005fde:	d1dd      	bne.n	8005f9c <_printf_i+0x30>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	e003      	b.n	8005ff2 <_printf_i+0x86>
 8005fea:	2975      	cmp	r1, #117	; 0x75
 8005fec:	d017      	beq.n	800601e <_printf_i+0xb2>
 8005fee:	2978      	cmp	r1, #120	; 0x78
 8005ff0:	d1d4      	bne.n	8005f9c <_printf_i+0x30>
 8005ff2:	2378      	movs	r3, #120	; 0x78
 8005ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff8:	4864      	ldr	r0, [pc, #400]	; (800618c <_printf_i+0x220>)
 8005ffa:	e055      	b.n	80060a8 <_printf_i+0x13c>
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	1d19      	adds	r1, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6011      	str	r1, [r2, #0]
 8006004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800600c:	2301      	movs	r3, #1
 800600e:	e08c      	b.n	800612a <_printf_i+0x1be>
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6011      	str	r1, [r2, #0]
 8006014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006018:	bf18      	it	ne
 800601a:	b21b      	sxthne	r3, r3
 800601c:	e7cf      	b.n	8005fbe <_printf_i+0x52>
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	6825      	ldr	r5, [r4, #0]
 8006022:	1d18      	adds	r0, r3, #4
 8006024:	6010      	str	r0, [r2, #0]
 8006026:	0628      	lsls	r0, r5, #24
 8006028:	d501      	bpl.n	800602e <_printf_i+0xc2>
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e002      	b.n	8006034 <_printf_i+0xc8>
 800602e:	0668      	lsls	r0, r5, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0xbe>
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	4854      	ldr	r0, [pc, #336]	; (8006188 <_printf_i+0x21c>)
 8006036:	296f      	cmp	r1, #111	; 0x6f
 8006038:	bf14      	ite	ne
 800603a:	220a      	movne	r2, #10
 800603c:	2208      	moveq	r2, #8
 800603e:	2100      	movs	r1, #0
 8006040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006044:	6865      	ldr	r5, [r4, #4]
 8006046:	60a5      	str	r5, [r4, #8]
 8006048:	2d00      	cmp	r5, #0
 800604a:	f2c0 8095 	blt.w	8006178 <_printf_i+0x20c>
 800604e:	6821      	ldr	r1, [r4, #0]
 8006050:	f021 0104 	bic.w	r1, r1, #4
 8006054:	6021      	str	r1, [r4, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d13d      	bne.n	80060d6 <_printf_i+0x16a>
 800605a:	2d00      	cmp	r5, #0
 800605c:	f040 808e 	bne.w	800617c <_printf_i+0x210>
 8006060:	4665      	mov	r5, ip
 8006062:	2a08      	cmp	r2, #8
 8006064:	d10b      	bne.n	800607e <_printf_i+0x112>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07db      	lsls	r3, r3, #31
 800606a:	d508      	bpl.n	800607e <_printf_i+0x112>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	bfde      	ittt	le
 8006074:	2330      	movle	r3, #48	; 0x30
 8006076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800607a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607e:	ebac 0305 	sub.w	r3, ip, r5
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	f8cd 8000 	str.w	r8, [sp]
 8006088:	463b      	mov	r3, r7
 800608a:	aa03      	add	r2, sp, #12
 800608c:	4621      	mov	r1, r4
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff fef6 	bl	8005e80 <_printf_common>
 8006094:	3001      	adds	r0, #1
 8006096:	d14d      	bne.n	8006134 <_printf_i+0x1c8>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b005      	add	sp, #20
 800609e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060a2:	4839      	ldr	r0, [pc, #228]	; (8006188 <_printf_i+0x21c>)
 80060a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	1d1d      	adds	r5, r3, #4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6015      	str	r5, [r2, #0]
 80060b2:	060a      	lsls	r2, r1, #24
 80060b4:	d50b      	bpl.n	80060ce <_printf_i+0x162>
 80060b6:	07ca      	lsls	r2, r1, #31
 80060b8:	bf44      	itt	mi
 80060ba:	f041 0120 	orrmi.w	r1, r1, #32
 80060be:	6021      	strmi	r1, [r4, #0]
 80060c0:	b91b      	cbnz	r3, 80060ca <_printf_i+0x15e>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f022 0220 	bic.w	r2, r2, #32
 80060c8:	6022      	str	r2, [r4, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	e7b7      	b.n	800603e <_printf_i+0xd2>
 80060ce:	064d      	lsls	r5, r1, #25
 80060d0:	bf48      	it	mi
 80060d2:	b29b      	uxthmi	r3, r3
 80060d4:	e7ef      	b.n	80060b6 <_printf_i+0x14a>
 80060d6:	4665      	mov	r5, ip
 80060d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060dc:	fb02 3311 	mls	r3, r2, r1, r3
 80060e0:	5cc3      	ldrb	r3, [r0, r3]
 80060e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060e6:	460b      	mov	r3, r1
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d1f5      	bne.n	80060d8 <_printf_i+0x16c>
 80060ec:	e7b9      	b.n	8006062 <_printf_i+0xf6>
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	6961      	ldr	r1, [r4, #20]
 80060f4:	1d18      	adds	r0, r3, #4
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	0628      	lsls	r0, r5, #24
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	d501      	bpl.n	8006102 <_printf_i+0x196>
 80060fe:	6019      	str	r1, [r3, #0]
 8006100:	e002      	b.n	8006108 <_printf_i+0x19c>
 8006102:	066a      	lsls	r2, r5, #25
 8006104:	d5fb      	bpl.n	80060fe <_printf_i+0x192>
 8006106:	8019      	strh	r1, [r3, #0]
 8006108:	2300      	movs	r3, #0
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	4665      	mov	r5, ip
 800610e:	e7b9      	b.n	8006084 <_printf_i+0x118>
 8006110:	6813      	ldr	r3, [r2, #0]
 8006112:	1d19      	adds	r1, r3, #4
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	681d      	ldr	r5, [r3, #0]
 8006118:	6862      	ldr	r2, [r4, #4]
 800611a:	2100      	movs	r1, #0
 800611c:	4628      	mov	r0, r5
 800611e:	f7fa f857 	bl	80001d0 <memchr>
 8006122:	b108      	cbz	r0, 8006128 <_printf_i+0x1bc>
 8006124:	1b40      	subs	r0, r0, r5
 8006126:	6060      	str	r0, [r4, #4]
 8006128:	6863      	ldr	r3, [r4, #4]
 800612a:	6123      	str	r3, [r4, #16]
 800612c:	2300      	movs	r3, #0
 800612e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006132:	e7a7      	b.n	8006084 <_printf_i+0x118>
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	462a      	mov	r2, r5
 8006138:	4639      	mov	r1, r7
 800613a:	4630      	mov	r0, r6
 800613c:	47c0      	blx	r8
 800613e:	3001      	adds	r0, #1
 8006140:	d0aa      	beq.n	8006098 <_printf_i+0x12c>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	079b      	lsls	r3, r3, #30
 8006146:	d413      	bmi.n	8006170 <_printf_i+0x204>
 8006148:	68e0      	ldr	r0, [r4, #12]
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	4298      	cmp	r0, r3
 800614e:	bfb8      	it	lt
 8006150:	4618      	movlt	r0, r3
 8006152:	e7a3      	b.n	800609c <_printf_i+0x130>
 8006154:	2301      	movs	r3, #1
 8006156:	464a      	mov	r2, r9
 8006158:	4639      	mov	r1, r7
 800615a:	4630      	mov	r0, r6
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d09a      	beq.n	8006098 <_printf_i+0x12c>
 8006162:	3501      	adds	r5, #1
 8006164:	68e3      	ldr	r3, [r4, #12]
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	42ab      	cmp	r3, r5
 800616c:	dcf2      	bgt.n	8006154 <_printf_i+0x1e8>
 800616e:	e7eb      	b.n	8006148 <_printf_i+0x1dc>
 8006170:	2500      	movs	r5, #0
 8006172:	f104 0919 	add.w	r9, r4, #25
 8006176:	e7f5      	b.n	8006164 <_printf_i+0x1f8>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ac      	bne.n	80060d6 <_printf_i+0x16a>
 800617c:	7803      	ldrb	r3, [r0, #0]
 800617e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006186:	e76c      	b.n	8006062 <_printf_i+0xf6>
 8006188:	08006445 	.word	0x08006445
 800618c:	08006456 	.word	0x08006456

08006190 <memmove>:
 8006190:	4288      	cmp	r0, r1
 8006192:	b510      	push	{r4, lr}
 8006194:	eb01 0302 	add.w	r3, r1, r2
 8006198:	d807      	bhi.n	80061aa <memmove+0x1a>
 800619a:	1e42      	subs	r2, r0, #1
 800619c:	4299      	cmp	r1, r3
 800619e:	d00a      	beq.n	80061b6 <memmove+0x26>
 80061a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061a8:	e7f8      	b.n	800619c <memmove+0xc>
 80061aa:	4283      	cmp	r3, r0
 80061ac:	d9f5      	bls.n	800619a <memmove+0xa>
 80061ae:	1881      	adds	r1, r0, r2
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	42d3      	cmn	r3, r2
 80061b4:	d100      	bne.n	80061b8 <memmove+0x28>
 80061b6:	bd10      	pop	{r4, pc}
 80061b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061c0:	e7f7      	b.n	80061b2 <memmove+0x22>
	...

080061c4 <_free_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4605      	mov	r5, r0
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d045      	beq.n	8006258 <_free_r+0x94>
 80061cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d0:	1f0c      	subs	r4, r1, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfb8      	it	lt
 80061d6:	18e4      	addlt	r4, r4, r3
 80061d8:	f000 f8d2 	bl	8006380 <__malloc_lock>
 80061dc:	4a1f      	ldr	r2, [pc, #124]	; (800625c <_free_r+0x98>)
 80061de:	6813      	ldr	r3, [r2, #0]
 80061e0:	4610      	mov	r0, r2
 80061e2:	b933      	cbnz	r3, 80061f2 <_free_r+0x2e>
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6014      	str	r4, [r2, #0]
 80061e8:	4628      	mov	r0, r5
 80061ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ee:	f000 b8c8 	b.w	8006382 <__malloc_unlock>
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d90c      	bls.n	8006210 <_free_r+0x4c>
 80061f6:	6821      	ldr	r1, [r4, #0]
 80061f8:	1862      	adds	r2, r4, r1
 80061fa:	4293      	cmp	r3, r2
 80061fc:	bf04      	itt	eq
 80061fe:	681a      	ldreq	r2, [r3, #0]
 8006200:	685b      	ldreq	r3, [r3, #4]
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	bf04      	itt	eq
 8006206:	1852      	addeq	r2, r2, r1
 8006208:	6022      	streq	r2, [r4, #0]
 800620a:	6004      	str	r4, [r0, #0]
 800620c:	e7ec      	b.n	80061e8 <_free_r+0x24>
 800620e:	4613      	mov	r3, r2
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	b10a      	cbz	r2, 8006218 <_free_r+0x54>
 8006214:	42a2      	cmp	r2, r4
 8006216:	d9fa      	bls.n	800620e <_free_r+0x4a>
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	1858      	adds	r0, r3, r1
 800621c:	42a0      	cmp	r0, r4
 800621e:	d10b      	bne.n	8006238 <_free_r+0x74>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	4401      	add	r1, r0
 8006224:	1858      	adds	r0, r3, r1
 8006226:	4282      	cmp	r2, r0
 8006228:	6019      	str	r1, [r3, #0]
 800622a:	d1dd      	bne.n	80061e8 <_free_r+0x24>
 800622c:	6810      	ldr	r0, [r2, #0]
 800622e:	6852      	ldr	r2, [r2, #4]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	4401      	add	r1, r0
 8006234:	6019      	str	r1, [r3, #0]
 8006236:	e7d7      	b.n	80061e8 <_free_r+0x24>
 8006238:	d902      	bls.n	8006240 <_free_r+0x7c>
 800623a:	230c      	movs	r3, #12
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	e7d3      	b.n	80061e8 <_free_r+0x24>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428a      	cmp	r2, r1
 8006246:	bf04      	itt	eq
 8006248:	6811      	ldreq	r1, [r2, #0]
 800624a:	6852      	ldreq	r2, [r2, #4]
 800624c:	6062      	str	r2, [r4, #4]
 800624e:	bf04      	itt	eq
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	605c      	str	r4, [r3, #4]
 8006256:	e7c7      	b.n	80061e8 <_free_r+0x24>
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	bf00      	nop
 800625c:	20001000 	.word	0x20001000

08006260 <_malloc_r>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	1ccd      	adds	r5, r1, #3
 8006264:	f025 0503 	bic.w	r5, r5, #3
 8006268:	3508      	adds	r5, #8
 800626a:	2d0c      	cmp	r5, #12
 800626c:	bf38      	it	cc
 800626e:	250c      	movcc	r5, #12
 8006270:	2d00      	cmp	r5, #0
 8006272:	4606      	mov	r6, r0
 8006274:	db01      	blt.n	800627a <_malloc_r+0x1a>
 8006276:	42a9      	cmp	r1, r5
 8006278:	d903      	bls.n	8006282 <_malloc_r+0x22>
 800627a:	230c      	movs	r3, #12
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	2000      	movs	r0, #0
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	f000 f87d 	bl	8006380 <__malloc_lock>
 8006286:	4a21      	ldr	r2, [pc, #132]	; (800630c <_malloc_r+0xac>)
 8006288:	6814      	ldr	r4, [r2, #0]
 800628a:	4621      	mov	r1, r4
 800628c:	b991      	cbnz	r1, 80062b4 <_malloc_r+0x54>
 800628e:	4c20      	ldr	r4, [pc, #128]	; (8006310 <_malloc_r+0xb0>)
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	b91b      	cbnz	r3, 800629c <_malloc_r+0x3c>
 8006294:	4630      	mov	r0, r6
 8006296:	f000 f863 	bl	8006360 <_sbrk_r>
 800629a:	6020      	str	r0, [r4, #0]
 800629c:	4629      	mov	r1, r5
 800629e:	4630      	mov	r0, r6
 80062a0:	f000 f85e 	bl	8006360 <_sbrk_r>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d124      	bne.n	80062f2 <_malloc_r+0x92>
 80062a8:	230c      	movs	r3, #12
 80062aa:	6033      	str	r3, [r6, #0]
 80062ac:	4630      	mov	r0, r6
 80062ae:	f000 f868 	bl	8006382 <__malloc_unlock>
 80062b2:	e7e4      	b.n	800627e <_malloc_r+0x1e>
 80062b4:	680b      	ldr	r3, [r1, #0]
 80062b6:	1b5b      	subs	r3, r3, r5
 80062b8:	d418      	bmi.n	80062ec <_malloc_r+0x8c>
 80062ba:	2b0b      	cmp	r3, #11
 80062bc:	d90f      	bls.n	80062de <_malloc_r+0x7e>
 80062be:	600b      	str	r3, [r1, #0]
 80062c0:	50cd      	str	r5, [r1, r3]
 80062c2:	18cc      	adds	r4, r1, r3
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f85c 	bl	8006382 <__malloc_unlock>
 80062ca:	f104 000b 	add.w	r0, r4, #11
 80062ce:	1d23      	adds	r3, r4, #4
 80062d0:	f020 0007 	bic.w	r0, r0, #7
 80062d4:	1ac3      	subs	r3, r0, r3
 80062d6:	d0d3      	beq.n	8006280 <_malloc_r+0x20>
 80062d8:	425a      	negs	r2, r3
 80062da:	50e2      	str	r2, [r4, r3]
 80062dc:	e7d0      	b.n	8006280 <_malloc_r+0x20>
 80062de:	428c      	cmp	r4, r1
 80062e0:	684b      	ldr	r3, [r1, #4]
 80062e2:	bf16      	itet	ne
 80062e4:	6063      	strne	r3, [r4, #4]
 80062e6:	6013      	streq	r3, [r2, #0]
 80062e8:	460c      	movne	r4, r1
 80062ea:	e7eb      	b.n	80062c4 <_malloc_r+0x64>
 80062ec:	460c      	mov	r4, r1
 80062ee:	6849      	ldr	r1, [r1, #4]
 80062f0:	e7cc      	b.n	800628c <_malloc_r+0x2c>
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d005      	beq.n	8006308 <_malloc_r+0xa8>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4630      	mov	r0, r6
 8006300:	f000 f82e 	bl	8006360 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d0cf      	beq.n	80062a8 <_malloc_r+0x48>
 8006308:	6025      	str	r5, [r4, #0]
 800630a:	e7db      	b.n	80062c4 <_malloc_r+0x64>
 800630c:	20001000 	.word	0x20001000
 8006310:	20001004 	.word	0x20001004

08006314 <_realloc_r>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	4607      	mov	r7, r0
 8006318:	4614      	mov	r4, r2
 800631a:	460e      	mov	r6, r1
 800631c:	b921      	cbnz	r1, 8006328 <_realloc_r+0x14>
 800631e:	4611      	mov	r1, r2
 8006320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006324:	f7ff bf9c 	b.w	8006260 <_malloc_r>
 8006328:	b922      	cbnz	r2, 8006334 <_realloc_r+0x20>
 800632a:	f7ff ff4b 	bl	80061c4 <_free_r>
 800632e:	4625      	mov	r5, r4
 8006330:	4628      	mov	r0, r5
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006334:	f000 f826 	bl	8006384 <_malloc_usable_size_r>
 8006338:	42a0      	cmp	r0, r4
 800633a:	d20f      	bcs.n	800635c <_realloc_r+0x48>
 800633c:	4621      	mov	r1, r4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff8e 	bl	8006260 <_malloc_r>
 8006344:	4605      	mov	r5, r0
 8006346:	2800      	cmp	r0, #0
 8006348:	d0f2      	beq.n	8006330 <_realloc_r+0x1c>
 800634a:	4631      	mov	r1, r6
 800634c:	4622      	mov	r2, r4
 800634e:	f7ff fc11 	bl	8005b74 <memcpy>
 8006352:	4631      	mov	r1, r6
 8006354:	4638      	mov	r0, r7
 8006356:	f7ff ff35 	bl	80061c4 <_free_r>
 800635a:	e7e9      	b.n	8006330 <_realloc_r+0x1c>
 800635c:	4635      	mov	r5, r6
 800635e:	e7e7      	b.n	8006330 <_realloc_r+0x1c>

08006360 <_sbrk_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4c06      	ldr	r4, [pc, #24]	; (800637c <_sbrk_r+0x1c>)
 8006364:	2300      	movs	r3, #0
 8006366:	4605      	mov	r5, r0
 8006368:	4608      	mov	r0, r1
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	f7fb f81e 	bl	80013ac <_sbrk>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_sbrk_r+0x1a>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	b103      	cbz	r3, 800637a <_sbrk_r+0x1a>
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20001128 	.word	0x20001128

08006380 <__malloc_lock>:
 8006380:	4770      	bx	lr

08006382 <__malloc_unlock>:
 8006382:	4770      	bx	lr

08006384 <_malloc_usable_size_r>:
 8006384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006388:	1f18      	subs	r0, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	bfbc      	itt	lt
 800638e:	580b      	ldrlt	r3, [r1, r0]
 8006390:	18c0      	addlt	r0, r0, r3
 8006392:	4770      	bx	lr

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
